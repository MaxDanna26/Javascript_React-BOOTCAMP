{"version":3,"file":"cli.js","sources":["../../src/utils/api.ts","../../src/commands/analytics/fetch-org-analytics.ts","../../src/commands/analytics/fetch-repo-analytics.ts","../../src/utils/markdown.ts","../../src/commands/analytics/display-analytics.ts","../../src/flags.ts","../../src/utils/output-formatting.ts","../../src/utils/meow-with-subcommands.ts","../../src/commands/analytics/cmd-analytics.ts","../../src/commands/audit-log/fetch-audit-log.ts","../../src/commands/audit-log/output-audit-log.ts","../../src/commands/audit-log/handle-audit-log.ts","../../src/commands/audit-log/cmd-audit-log.ts","../../src/commands/cdxgen/run-cyclonedx.ts","../../src/utils/cmd.ts","../../src/commands/cdxgen/cmd-cdxgen.ts","../../src/commands/dependencies/fetch-dependencies.ts","../../src/commands/dependencies/output-dependencies.ts","../../src/commands/dependencies/handle-dependencies.ts","../../src/commands/dependencies/cmd-dependencies.ts","../../src/commands/diff-scan/fetch-diff-scan.ts","../../src/commands/diff-scan/output-diff-scan.ts","../../src/commands/diff-scan/handle-diff-scan.ts","../../src/commands/diff-scan/cmd-diff-scan-get.ts","../../src/commands/diff-scan/cmd-diff-scan.ts","../../src/commands/fix/npm-fix.ts","../../src/utils/lockfile/pnpm-lock-yaml.ts","../../src/utils/npm.ts","../../src/commands/optimize/run-agent.ts","../../src/commands/fix/pnpm-fix.ts","../../src/utils/package-environment.ts","../../src/commands/fix/run-fix.ts","../../src/commands/fix/cmd-fix.ts","../../src/commands/info/fetch-package-info.ts","../../src/commands/info/output-package-info.ts","../../src/commands/info/handle-package-info.ts","../../src/commands/info/cmd-info.ts","../../src/commands/login/apply-login.ts","../../src/commands/login/attempt-login.ts","../../src/commands/login/cmd-login.ts","../../src/commands/logout/apply-logout.ts","../../src/commands/logout/attempt-logout.ts","../../src/commands/logout/cmd-logout.ts","../../src/commands/manifest/convert_gradle_to_maven.ts","../../src/commands/manifest/cmd-manifest-gradle.ts","../../src/commands/manifest/convert_sbt_to_maven.ts","../../src/commands/manifest/cmd-manifest-scala.ts","../../src/commands/manifest/cmd-manifest-auto.ts","../../src/commands/manifest/cmd-manifest-kotlin.ts","../../src/commands/manifest/cmd-manifest.ts","../../src/commands/npm/wrap-npm.ts","../../src/commands/npm/cmd-npm.ts","../../src/commands/npx/wrap-npx.ts","../../src/commands/npx/cmd-npx.ts","../../src/commands/oops/cmd-oops.ts","../../src/commands/optimize/deps-includes-by-agent.ts","../../src/commands/optimize/get-dependency-entries.ts","../../src/commands/optimize/get-overrides-by-agent.ts","../../src/commands/optimize/get-workspace-globs.ts","../../src/commands/optimize/lockfile-includes-by-agent.ts","../../src/commands/optimize/ls-by-agent.ts","../../src/commands/optimize/update-manifest-by-agent.ts","../../src/commands/optimize/add-overrides.ts","../../src/commands/optimize/update-lockfile.ts","../../src/commands/optimize/apply-optimization.ts","../../src/commands/optimize/cmd-optimize.ts","../../src/commands/organization/fetch-organization-list.ts","../../src/commands/organization/output-organization-list.ts","../../src/commands/organization/handle-organization-list.ts","../../src/commands/organization/cmd-organization-list.ts","../../src/commands/organization/fetch-security-policy.ts","../../src/commands/organization/output-security-policy.ts","../../src/commands/organization/handle-security-policy.ts","../../src/commands/organization/cmd-organization-policy-security.ts","../../src/commands/organization/cmd-organization-policy.ts","../../src/commands/organization/fetch-quota.ts","../../src/commands/organization/output-quota.ts","../../src/commands/organization/handle-quota.ts","../../src/commands/organization/cmd-organization-quota.ts","../../src/commands/organization/cmd-organization.ts","../../src/commands/package/fetch-purls-shallow-score.ts","../../src/commands/package/output-purls-shallow-score.ts","../../src/commands/package/handle-purls-shallow-score.ts","../../src/commands/package/parse-package-specifiers.ts","../../src/commands/package/cmd-package-shallow.ts","../../src/commands/package/cmd-package.ts","../../src/commands/raw-npm/run-raw-npm.ts","../../src/commands/raw-npm/cmd-raw-npm.ts","../../src/commands/raw-npx/run-raw-npx.ts","../../src/commands/raw-npx/cmd-raw-npx.ts","../../src/commands/report/create-report.ts","../../src/commands/report/get-socket-config.ts","../../src/commands/report/fetch-report-data.ts","../../src/commands/report/format-report-data.ts","../../src/commands/scan/get-full-scan.ts","../../src/commands/report/view-report.ts","../../src/commands/report/cmd-report-create.ts","../../src/commands/report/cmd-report-view.ts","../../src/commands/report/cmd-report.ts","../../src/commands/repos/fetch-create-repo.ts","../../src/commands/repos/output-create-repo.ts","../../src/commands/repos/handle-create-repo.ts","../../src/commands/repos/cmd-repos-create.ts","../../src/commands/repos/handle-delete-repo.ts","../../src/commands/repos/cmd-repos-del.ts","../../src/commands/repos/fetch-list-repos.ts","../../src/commands/repos/output-list-repos.ts","../../src/commands/repos/handle-list-repos.ts","../../src/commands/repos/cmd-repos-list.ts","../../src/commands/repos/fetch-update-repo.ts","../../src/commands/repos/output-update-repo.ts","../../src/commands/repos/handle-update-repo.ts","../../src/commands/repos/cmd-repos-update.ts","../../src/commands/repos/fetch-view-repo.ts","../../src/commands/repos/output-view-repo.ts","../../src/commands/repos/handle-view-repo.ts","../../src/commands/repos/cmd-repos-view.ts","../../src/commands/repos/cmd-repos.ts","../../src/commands/scan/suggest-org-slug.ts","../../src/commands/scan/suggest-repo-slug.ts","../../src/commands/scan/suggest_branch_slug.ts","../../src/commands/scan/suggest_target.ts","../../src/commands/scan/create-full-scan.ts","../../src/commands/scan/cmd-scan-create.ts","../../src/commands/scan/delete-full-scan.ts","../../src/commands/scan/cmd-scan-del.ts","../../src/commands/scan/list-full-scans.ts","../../src/commands/scan/cmd-scan-list.ts","../../src/commands/scan/get-full-scan-metadata.ts","../../src/commands/scan/cmd-scan-metadata.ts","../../src/commands/scan/fetch-report-data.ts","../../src/commands/scan/generate-report.ts","../../src/utils/map-to-object.ts","../../src/utils/walk-nested-map.ts","../../src/commands/scan/report-full-scan.ts","../../src/commands/scan/cmd-scan-report.ts","../../src/commands/scan/stream-full-scan.ts","../../src/commands/scan/view-full-scan.ts","../../src/commands/scan/cmd-scan-view.ts","../../src/commands/scan/cmd-scan.ts","../../src/commands/threat-feed/get-threat-feed.ts","../../src/commands/threat-feed/cmd-threat-feed.ts","../../src/commands/wrapper/add-socket-wrapper.ts","../../src/commands/wrapper/check-socket-wrapper-setup.ts","../../src/commands/wrapper/postinstall-wrapper.ts","../../src/commands/wrapper/remove-socket-wrapper.ts","../../src/commands/wrapper/cmd-wrapper.ts","../../src/cli.ts"],"sourcesContent":["import process from 'node:process'\n\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\nimport { isNonEmptyString } from '@socketsecurity/registry/lib/strings'\n\nimport { AuthError } from './errors'\nimport { getSetting } from './settings'\nimport constants from '../constants'\n\nimport type {\n  SocketSdkErrorType,\n  SocketSdkOperations\n} from '@socketsecurity/sdk'\n\nexport function handleUnsuccessfulApiResponse<T extends SocketSdkOperations>(\n  _name: T,\n  result: SocketSdkErrorType<T>\n): never {\n  // SocketSdkErrorType['error'] is not typed.\n  const resultErrorMessage = (result as { error?: Error }).error?.message\n  const message =\n    typeof resultErrorMessage === 'string'\n      ? resultErrorMessage\n      : 'No error message returned'\n  if (result.status === 401 || result.status === 403) {\n    // Lazily access constants.spinner.\n    const { spinner } = constants\n    spinner.stop()\n\n    throw new AuthError(message)\n  }\n  logger.fail(\n    `${colors.bgRed(colors.white('API returned an error:'))} ${message}`\n  )\n  process.exit(1)\n}\n\nexport async function handleApiCall<T>(\n  value: T,\n  description: string\n): Promise<T> {\n  let result: T\n  try {\n    result = await value\n  } catch (cause) {\n    throw new Error(`Failed ${description}`, { cause })\n  }\n  return result\n}\n\nexport async function handleAPIError(code: number) {\n  if (code === 400) {\n    return 'One of the options passed might be incorrect.'\n  } else if (code === 403) {\n    return 'You might be trying to access an organization that is not linked to the API key you are logged in with.'\n  } else {\n    ;`Server responded with status code ${code}`\n  }\n}\n\nexport function getLastFiveOfApiToken(token: string): string {\n  // Get the last 5 characters of the API token before the trailing \"_api\".\n  return token.slice(-9, -4)\n}\n\n// The API server that should be used for operations.\nfunction getDefaultApiBaseUrl(): string | undefined {\n  const baseUrl =\n    process.env['SOCKET_SECURITY_API_BASE_URL'] || getSetting('apiBaseUrl')\n  return isNonEmptyString(baseUrl) ? baseUrl : undefined\n}\n\nexport async function queryAPI(path: string, apiToken: string) {\n  const API_V0_URL = getDefaultApiBaseUrl()\n  return await fetch(`${API_V0_URL}/${path}`, {\n    method: 'GET',\n    headers: {\n      Authorization: `Basic ${btoa(`${apiToken}:${apiToken}`)}`\n    }\n  })\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { setupSdk } from '../../utils/sdk'\n\nimport type { Spinner } from '@socketsecurity/registry/lib/spinner'\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchOrgAnalyticsData(\n  time: number,\n  spinner: Spinner,\n  apiToken: string\n): Promise<SocketSdkReturnType<'getOrgAnalytics'>['data'] | undefined> {\n  const socketSdk = await setupSdk(apiToken)\n  const result = await handleApiCall(\n    socketSdk.getOrgAnalytics(time.toString()),\n    'fetching analytics data'\n  )\n\n  if (result.success === false) {\n    handleUnsuccessfulApiResponse('getOrgAnalytics', result)\n    return undefined\n  }\n\n  spinner.stop()\n\n  if (!result.data.length) {\n    logger.log('No analytics data is available for this organization yet.')\n    return undefined\n  }\n\n  return result.data\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { setupSdk } from '../../utils/sdk'\n\nimport type { Spinner } from '@socketsecurity/registry/lib/spinner'\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchRepoAnalyticsData(\n  repo: string,\n  time: number,\n  spinner: Spinner,\n  apiToken: string\n): Promise<SocketSdkReturnType<'getRepoAnalytics'>['data'] | undefined> {\n  const socketSdk = await setupSdk(apiToken)\n  const result = await handleApiCall(\n    socketSdk.getRepoAnalytics(repo, time.toString()),\n    'fetching analytics data'\n  )\n\n  if (result.success === false) {\n    handleUnsuccessfulApiResponse('getRepoAnalytics', result)\n    return undefined\n  }\n\n  spinner.stop()\n\n  if (!result.data.length) {\n    logger.log('No analytics data is available for this organization yet.')\n    return undefined\n  }\n\n  return result.data\n}\n","export function mdTableStringNumber(\n  title1: string,\n  title2: string,\n  obj: Record<string, number | string>\n): string {\n  // | Date        | Counts |\n  // | ----------- | ------ |\n  // | Header      | 201464 |\n  // | Paragraph   |     18 |\n  let mw1 = title1.length\n  let mw2 = title2.length\n  for (const [key, value] of Object.entries(obj)) {\n    mw1 = Math.max(mw1, key.length)\n    mw2 = Math.max(mw2, String(value ?? '').length)\n  }\n\n  const lines = []\n  lines.push(`| ${title1.padEnd(mw1, ' ')} | ${title2.padEnd(mw2)} |`)\n  lines.push(`| ${'-'.repeat(mw1)} | ${'-'.repeat(mw2)} |`)\n  for (const [key, value] of Object.entries(obj)) {\n    lines.push(\n      `| ${key.padEnd(mw1, ' ')} | ${String(value ?? '').padStart(mw2, ' ')} |`\n    )\n  }\n  lines.push(`| ${'-'.repeat(mw1)} | ${'-'.repeat(mw2)} |`)\n\n  return lines.join('\\n')\n}\n\nexport function mdTable<T extends Array<Record<string, string>>>(\n  logs: T,\n  // This is saying \"an array of strings and the strings are a valid key of elements of T\"\n  // In turn, T is defined above as the audit log event type from our OpenAPI docs.\n  cols: Array<string & keyof T[number]>\n): string {\n  // Max col width required to fit all data in that column\n  const cws = cols.map(col => col.length)\n\n  for (const log of logs) {\n    for (let i = 0; i < cols.length; ++i) {\n      // @ts-ignore\n      const val: unknown = log[cols[i] ?? ''] ?? ''\n      cws[i] = Math.max(cws[i] ?? 0, String(val).length)\n    }\n  }\n\n  let div = '|'\n  for (const cw of cws) div += ' ' + '-'.repeat(cw) + ' |'\n\n  let header = '|'\n  for (let i = 0; i < cols.length; ++i)\n    header += ' ' + String(cols[i]).padEnd(cws[i] ?? 0, ' ') + ' |'\n\n  let body = ''\n  for (const log of logs) {\n    body += '|'\n    for (let i = 0; i < cols.length; ++i) {\n      // @ts-ignore\n      const val: unknown = log[cols[i] ?? ''] ?? ''\n      body += ' ' + String(val).padEnd(cws[i] ?? 0, ' ') + ' |'\n    }\n    body += '\\n'\n  }\n\n  return [div, header, div, body.trim(), div].filter(s => !!s.trim()).join('\\n')\n}\n\nexport function mdTableOfPairs(\n  arr: Array<[string, string]>,\n  // This is saying \"an array of strings and the strings are a valid key of elements of T\"\n  // In turn, T is defined above as the audit log event type from our OpenAPI docs.\n  cols: string[]\n): string {\n  // Max col width required to fit all data in that column\n  const cws = cols.map(col => col.length)\n\n  for (const [key, val] of arr) {\n    cws[0] = Math.max(cws[0] ?? 0, String(key).length)\n    cws[1] = Math.max(cws[1] ?? 0, String(val ?? '').length)\n  }\n\n  let div = '|'\n  for (const cw of cws) div += ' ' + '-'.repeat(cw) + ' |'\n\n  let header = '|'\n  for (let i = 0; i < cols.length; ++i) {\n    header += ' ' + String(cols[i]).padEnd(cws[i] ?? 0, ' ') + ' |'\n  }\n\n  let body = ''\n  for (const [key, val] of arr) {\n    body += '|'\n    body += ' ' + String(key).padEnd(cws[0] ?? 0, ' ') + ' |'\n    body += ' ' + String(val ?? '').padEnd(cws[1] ?? 0, ' ') + ' |'\n    body += '\\n'\n  }\n\n  return [div, header, div, body.trim(), div].filter(s => !!s.trim()).join('\\n')\n}\n","import fs from 'node:fs/promises'\n\n// @ts-ignore\nimport ScreenWidget from 'blessed/lib/widgets/screen'\nimport contrib from 'blessed-contrib'\nimport { stripIndents } from 'common-tags'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { fetchOrgAnalyticsData } from './fetch-org-analytics'\nimport { fetchRepoAnalyticsData } from './fetch-repo-analytics'\nimport constants from '../../constants'\nimport { AuthError } from '../../utils/errors'\nimport { mdTableStringNumber } from '../../utils/markdown'\nimport { getDefaultToken } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\nimport type { Widgets } from 'blessed' // Note: Widgets does not seem to actually work as code :'(\n\ninterface FormattedData {\n  top_five_alert_types: Record<string, number>\n  total_critical_alerts: Record<string, number>\n  total_high_alerts: Record<string, number>\n  total_medium_alerts: Record<string, number>\n  total_low_alerts: Record<string, number>\n  total_critical_added: Record<string, number>\n  total_medium_added: Record<string, number>\n  total_low_added: Record<string, number>\n  total_high_added: Record<string, number>\n  total_critical_prevented: Record<string, number>\n  total_high_prevented: Record<string, number>\n  total_medium_prevented: Record<string, number>\n  total_low_prevented: Record<string, number>\n}\n\nconst METRICS = [\n  'total_critical_alerts',\n  'total_high_alerts',\n  'total_medium_alerts',\n  'total_low_alerts',\n  'total_critical_added',\n  'total_medium_added',\n  'total_low_added',\n  'total_high_added',\n  'total_critical_prevented',\n  'total_high_prevented',\n  'total_medium_prevented',\n  'total_low_prevented'\n] as const\n\n// Note: This maps `new Date(date).getMonth()` to English three letters\nconst Months = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec'\n] as const\n\nexport async function displayAnalytics({\n  filePath,\n  outputKind,\n  repo,\n  scope,\n  time\n}: {\n  scope: string\n  time: number\n  repo: string\n  outputKind: 'json' | 'markdown' | 'print'\n  filePath: string\n}): Promise<void> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API token.'\n    )\n  }\n\n  await outputAnalyticsWithToken({\n    apiToken,\n    filePath,\n    outputKind,\n    repo,\n    scope,\n    time\n  })\n}\n\nasync function outputAnalyticsWithToken({\n  apiToken,\n  filePath,\n  outputKind,\n  repo,\n  scope,\n  time\n}: {\n  apiToken: string\n  scope: string\n  time: number\n  repo: string\n  outputKind: 'json' | 'markdown' | 'print'\n  filePath: string\n}): Promise<void> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Fetching analytics data')\n\n  let data:\n    | undefined\n    | SocketSdkReturnType<'getOrgAnalytics'>['data']\n    | SocketSdkReturnType<'getRepoAnalytics'>['data']\n  if (scope === 'org') {\n    data = await fetchOrgAnalyticsData(time, spinner, apiToken)\n  } else if (repo) {\n    data = await fetchRepoAnalyticsData(repo, time, spinner, apiToken)\n  }\n\n  // A message should already have been printed if we have no data here\n  if (!data) return\n\n  if (outputKind === 'json') {\n    const serialized = renderJson(data)\n    if (!serialized) return\n\n    if (filePath && filePath !== '-') {\n      try {\n        await fs.writeFile(filePath, serialized, 'utf8')\n        logger.log(`Data successfully written to ${filePath}`)\n      } catch (e) {\n        process.exitCode = 1\n        logger.fail('There was an error trying to write the json to disk')\n        logger.error(e)\n      }\n    } else {\n      logger.log(serialized)\n    }\n  } else {\n    const fdata = scope === 'org' ? formatDataOrg(data) : formatDataRepo(data)\n\n    if (outputKind === 'markdown') {\n      const serialized = renderMarkdown(fdata, time, repo)\n\n      if (filePath && filePath !== '-') {\n        try {\n          await fs.writeFile(filePath, serialized, 'utf8')\n          logger.log(`Data successfully written to ${filePath}`)\n        } catch (e) {\n          logger.error(e)\n        }\n      } else {\n        logger.log(serialized)\n      }\n    } else {\n      displayAnalyticsScreen(fdata)\n    }\n  }\n}\n\nfunction renderJson(data: unknown): string | undefined {\n  try {\n    return JSON.stringify(data, null, 2)\n  } catch (e) {\n    process.exitCode = 1\n    // This could be caused by circular references, which is an \"us\" problem\n    logger.fail(\n      'There was a problem converting the data set to JSON. Please try without --json or with --markdown'\n    )\n    return\n  }\n}\n\nfunction renderMarkdown(\n  data: FormattedData,\n  days: number,\n  repoSlug: string\n): string {\n  return stripIndents`\n# Socket Alert Analytics\n\nThese are the Socket.dev stats are analytics for the ${repoSlug ? `${repoSlug} repo` : 'org'} of the past ${days} days\n\n${[\n  [\n    'Total critical alerts',\n    mdTableStringNumber('Date', 'Counts', data['total_critical_alerts'])\n  ],\n  [\n    'Total high alerts',\n    mdTableStringNumber('Date', 'Counts', data['total_high_alerts'])\n  ],\n  [\n    'Total critical alerts added to the main branch',\n    mdTableStringNumber('Date', 'Counts', data['total_critical_added'])\n  ],\n  [\n    'Total high alerts added to the main branch',\n    mdTableStringNumber('Date', 'Counts', data['total_high_added'])\n  ],\n  [\n    'Total critical alerts prevented from the main branch',\n    mdTableStringNumber('Date', 'Counts', data['total_critical_prevented'])\n  ],\n  [\n    'Total high alerts prevented from the main branch',\n    mdTableStringNumber('Date', 'Counts', data['total_high_prevented'])\n  ],\n  [\n    'Total medium alerts prevented from the main branch',\n    mdTableStringNumber('Date', 'Counts', data['total_medium_prevented'])\n  ],\n  [\n    'Total low alerts prevented from the main branch',\n    mdTableStringNumber('Date', 'Counts', data['total_low_prevented'])\n  ]\n]\n  .map(\n    ([title, table]) =>\n      stripIndents`\n## ${title}\n\n${table}\n`\n  )\n  .join('\\n\\n')}\n\n## Top 5 alert types\n\n${mdTableStringNumber('Name', 'Counts', data['top_five_alert_types'])}\n`\n}\n\nfunction displayAnalyticsScreen(data: FormattedData): void {\n  const screen: Widgets.Screen = new ScreenWidget({})\n  const grid = new contrib.grid({ rows: 5, cols: 4, screen })\n\n  renderLineCharts(\n    grid,\n    screen,\n    'Total critical alerts',\n    [0, 0, 1, 2],\n    data['total_critical_alerts']\n  )\n  renderLineCharts(\n    grid,\n    screen,\n    'Total high alerts',\n    [0, 2, 1, 2],\n    data['total_high_alerts']\n  )\n  renderLineCharts(\n    grid,\n    screen,\n    'Total critical alerts added to the main branch',\n    [1, 0, 1, 2],\n    data['total_critical_added']\n  )\n  renderLineCharts(\n    grid,\n    screen,\n    'Total high alerts added to the main branch',\n    [1, 2, 1, 2],\n    data['total_high_added']\n  )\n  renderLineCharts(\n    grid,\n    screen,\n    'Total critical alerts prevented from the main branch',\n    [2, 0, 1, 2],\n    data['total_critical_prevented']\n  )\n  renderLineCharts(\n    grid,\n    screen,\n    'Total high alerts prevented from the main branch',\n    [2, 2, 1, 2],\n    data['total_high_prevented']\n  )\n  renderLineCharts(\n    grid,\n    screen,\n    'Total medium alerts prevented from the main branch',\n    [3, 0, 1, 2],\n    data['total_medium_prevented']\n  )\n  renderLineCharts(\n    grid,\n    screen,\n    'Total low alerts prevented from the main branch',\n    [3, 2, 1, 2],\n    data['total_low_prevented']\n  )\n\n  const bar = grid.set(4, 0, 1, 2, contrib.bar, {\n    label: 'Top 5 alert types',\n    barWidth: 10,\n    barSpacing: 17,\n    xOffset: 0,\n    maxHeight: 9,\n    barBgColor: 'magenta'\n  })\n\n  screen.append(bar) //must append before setting data\n\n  bar.setData({\n    titles: Object.keys(data.top_five_alert_types),\n    data: Object.values(data.top_five_alert_types)\n  })\n\n  screen.render()\n\n  screen.key(['escape', 'q', 'C-c'], () => process.exit(0))\n}\n\nfunction formatDataRepo(\n  data: SocketSdkReturnType<'getRepoAnalytics'>['data']\n): FormattedData {\n  const sortedTopFiveAlerts: Record<string, number> = {}\n  const totalTopAlerts: Record<string, number> = {}\n\n  const formattedData = {} as Omit<FormattedData, 'top_five_alert_types'>\n  for (const metric of METRICS) {\n    formattedData[metric] = {}\n  }\n\n  for (const entry of data) {\n    const topFiveAlertTypes = entry['top_five_alert_types']\n    for (const type of Object.keys(topFiveAlertTypes)) {\n      const count = topFiveAlertTypes[type] ?? 0\n      if (!totalTopAlerts[type]) {\n        totalTopAlerts[type] = count\n      } else if (count > (totalTopAlerts[type] ?? 0)) {\n        totalTopAlerts[type] = count\n      }\n    }\n  }\n  for (const entry of data) {\n    for (const metric of METRICS) {\n      formattedData[metric]![formatDate(entry['created_at'])] = entry[metric]\n    }\n  }\n\n  const topFiveAlertEntries = Object.entries(totalTopAlerts)\n    .sort(([_keya, a], [_keyb, b]) => b - a)\n    .slice(0, 5)\n  for (const [key, value] of topFiveAlertEntries) {\n    sortedTopFiveAlerts[key] = value\n  }\n\n  return {\n    ...formattedData,\n    top_five_alert_types: sortedTopFiveAlerts\n  }\n}\n\nfunction formatDataOrg(\n  data: SocketSdkReturnType<'getOrgAnalytics'>['data']\n): FormattedData {\n  const sortedTopFiveAlerts: Record<string, number> = {}\n  const totalTopAlerts: Record<string, number> = {}\n\n  const formattedData = {} as Omit<FormattedData, 'top_five_alert_types'>\n  for (const metric of METRICS) {\n    formattedData[metric] = {}\n  }\n\n  for (const entry of data) {\n    const topFiveAlertTypes = entry['top_five_alert_types']\n    for (const type of Object.keys(topFiveAlertTypes)) {\n      const count = topFiveAlertTypes[type] ?? 0\n      if (!totalTopAlerts[type]) {\n        totalTopAlerts[type] = count\n      } else {\n        totalTopAlerts[type] += count\n      }\n    }\n  }\n\n  for (const metric of METRICS) {\n    const formatted = formattedData[metric]\n    for (const entry of data) {\n      const date = formatDate(entry['created_at'])\n      if (!formatted[date]) {\n        formatted[date] = entry[metric]!\n      } else {\n        formatted[date] += entry[metric]!\n      }\n    }\n  }\n\n  const topFiveAlertEntries = Object.entries(totalTopAlerts)\n    .sort(([_keya, a], [_keyb, b]) => b - a)\n    .slice(0, 5)\n  for (const [key, value] of topFiveAlertEntries) {\n    sortedTopFiveAlerts[key] = value\n  }\n\n  return {\n    ...formattedData,\n    top_five_alert_types: sortedTopFiveAlerts\n  }\n}\n\nfunction formatDate(date: string): string {\n  return `${Months[new Date(date).getMonth()]} ${new Date(date).getDate()}`\n}\n\nfunction renderLineCharts(\n  grid: contrib.grid,\n  screen: Widgets.Screen,\n  title: string,\n  coords: number[],\n  data: Record<string, number>\n): void {\n  const line = grid.set(...coords, contrib.line, {\n    style: { line: 'cyan', text: 'cyan', baseline: 'black' },\n    xLabelPadding: 0,\n    xPadding: 0,\n    xOffset: 0,\n    wholeNumbersOnly: true,\n    legend: {\n      width: 1\n    },\n    label: title\n  })\n\n  screen.append(line)\n\n  const lineData = {\n    x: Object.keys(data),\n    y: Object.values(data)\n  }\n\n  line.setData([lineData])\n}\n","import type { Flag } from 'meow'\n\n// TODO: not sure if I'm missing something but meow doesn't seem to expose this?\ntype StringFlag = Flag<'string', string> | Flag<'string', string[], true>\ntype BooleanFlag = Flag<'boolean', boolean> | Flag<'boolean', boolean[], true>\ntype NumberFlag = Flag<'number', number> | Flag<'number', number[], true>\ntype AnyFlag = StringFlag | BooleanFlag | NumberFlag\n\n// Note: we use this description in getFlagListOutput, meow doesn't care\nexport type MeowFlags = Record<string, AnyFlag & { description: string }>\n\nexport const commonFlags: MeowFlags = {\n  help: {\n    type: 'boolean',\n    default: false,\n    shortFlag: 'h',\n    description: 'Print this help.'\n  },\n  dryRun: {\n    type: 'boolean',\n    default: false,\n    description: 'Do input validation for a command and exit 0 when input is ok'\n  }\n}\n\nexport const outputFlags: MeowFlags = {\n  json: {\n    type: 'boolean',\n    shortFlag: 'j',\n    default: false,\n    description: 'Output result as json'\n  },\n  markdown: {\n    type: 'boolean',\n    shortFlag: 'm',\n    default: false,\n    description: 'Output result as markdown'\n  }\n}\n\nexport const validationFlags: MeowFlags = {\n  all: {\n    type: 'boolean',\n    default: false,\n    description: 'Include all issues'\n  },\n  strict: {\n    type: 'boolean',\n    default: false,\n    description: 'Exits with an error code if any matching issues are found'\n  }\n}\n","type HelpListOptions = {\n  keyPrefix: string\n  padName: number\n}\n\ntype ListDescription = string | { description: string }\n\nexport function getFlagListOutput(\n  list: Record<string, ListDescription>,\n  indent: number,\n  { keyPrefix = '--', padName } = {} as HelpListOptions\n): string {\n  return getHelpListOutput(\n    {\n      ...list\n    },\n    indent,\n    { keyPrefix, padName }\n  )\n}\n\nexport function getHelpListOutput(\n  list: Record<string, ListDescription>,\n  indent: number,\n  { keyPrefix = '', padName = 18 } = {} as HelpListOptions\n): string {\n  let result = ''\n  const names = Object.keys(list).sort()\n  for (const name of names) {\n    const rawDescription = list[name]\n    const description =\n      (typeof rawDescription === 'object'\n        ? rawDescription.description\n        : rawDescription) || ''\n    result +=\n      ''.padEnd(indent) +\n      (keyPrefix + name).padEnd(padName) +\n      description +\n      '\\n'\n  }\n  return result.trim()\n}\n","import path from 'node:path'\n\nimport meow from 'meow'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\nimport { toSortedObject } from '@socketsecurity/registry/lib/objects'\nimport { normalizePath } from '@socketsecurity/registry/lib/path'\nimport { escapeRegExp } from '@socketsecurity/registry/lib/regexps'\n\nimport { getLastFiveOfApiToken } from './api'\nimport { getFlagListOutput, getHelpListOutput } from './output-formatting'\nimport { getSetting } from './settings'\nimport constants from '../constants'\nimport { MeowFlags, commonFlags } from '../flags'\n\nimport type { Options } from 'meow'\n\nconst { DRY_RUN_LABEL, REDACTED } = constants\n\ninterface CliAlias {\n  description: string\n  argv: readonly string[]\n  hidden?: boolean | undefined\n}\n\ntype CliAliases = Record<string, CliAlias>\n\ntype CliSubcommandRun = (\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  context: { parentName: string }\n) => Promise<void> | void\n\nexport interface CliSubcommand {\n  description: string\n  hidden?: boolean | undefined\n  run: CliSubcommandRun\n}\n\n// Property names are picked such that the name is at the top when the props\n// get ordered by alphabet while flags is near the bottom and the help text\n// at the bottom, because they tend ot occupy the most lines of code.\nexport interface CliCommandConfig {\n  commandName: string // tmp optional while we migrate\n  description: string\n  hidden: boolean\n  flags: MeowFlags // tmp optional while we migrate\n  help: (command: string, config: CliCommandConfig) => string\n}\n\ninterface MeowOptions extends Options<any> {\n  aliases?: CliAliases | undefined\n  argv: readonly string[]\n  name: string\n  // When no sub-command is given, default to this sub-command\n  defaultSub?: string\n}\n\n// For debugging. Whenever you call meowOrExit it will store the command here\n// This module exports a getter that returns the current value.\nlet lastSeenCommand = ''\n\nexport function getLastSeenCommand(): string {\n  return lastSeenCommand\n}\n\nexport async function meowWithSubcommands(\n  subcommands: Record<string, CliSubcommand>,\n  options: MeowOptions\n): Promise<void> {\n  const {\n    aliases = {},\n    argv,\n    defaultSub,\n    importMeta,\n    name,\n    ...additionalOptions\n  } = { __proto__: null, ...options }\n  const [commandOrAliasNamex, ...rawCommandArgv] = argv\n  let commandOrAliasName = commandOrAliasNamex\n  if (!commandOrAliasName && defaultSub) {\n    commandOrAliasName = defaultSub\n  }\n  // If we got at least some args, then lets find out if we can find a command.\n  if (commandOrAliasName) {\n    const alias = aliases[commandOrAliasName]\n    // First: Resolve argv data from alias if its an alias that's been given.\n    const [commandName, ...commandArgv] = alias\n      ? [...alias.argv, ...rawCommandArgv]\n      : [commandOrAliasName, ...rawCommandArgv]\n    // Second: Find a command definition using that data.\n    const commandDefinition = commandName ? subcommands[commandName] : undefined\n    // Third: If a valid command has been found, then we run it...\n    if (commandDefinition) {\n      return await commandDefinition.run(commandArgv, importMeta, {\n        parentName: name\n      })\n    }\n  }\n  const flags = {\n    ...commonFlags,\n    ...additionalOptions.flags\n  }\n  // ...else we provide basic instructions and help.\n\n  emitBanner(name)\n\n  const cli = meow(\n    `\n    Usage\n      $ ${name} <command>\n\n    Commands\n      ${getHelpListOutput(\n        {\n          ...toSortedObject(\n            Object.fromEntries(\n              Object.entries(subcommands).filter(\n                ({ 1: subcommand }) => !subcommand.hidden\n              )\n            )\n          ),\n          ...toSortedObject(\n            Object.fromEntries(\n              Object.entries(aliases).filter(({ 1: alias }) => {\n                const { hidden } = alias\n                const cmdName = hidden ? '' : alias.argv[0]\n                const subcommand = cmdName ? subcommands[cmdName] : undefined\n                return subcommand && !subcommand.hidden\n              })\n            )\n          )\n        },\n        6\n      )}\n\n    Options\n      ${getFlagListOutput(flags, 6)}\n\n    Examples\n      $ ${name} --help\n  `,\n    {\n      argv,\n      importMeta,\n      ...additionalOptions,\n      flags,\n      autoHelp: false // otherwise we can't exit(0)\n    }\n  )\n  if (!cli.flags['help'] && cli.flags['dryRun']) {\n    process.exitCode = 0\n    logger.log(`${DRY_RUN_LABEL}: No-op, call a sub-command; ok`)\n  } else {\n    cli.showHelp()\n  }\n}\n\n/**\n * Note: meow will exit immediately if it calls its .showHelp()\n */\nexport function meowOrExit({\n  allowUnknownFlags, // commands that pass-through args need to allow this\n  argv,\n  config,\n  importMeta,\n  parentName\n}: {\n  allowUnknownFlags?: boolean | undefined\n  argv: readonly string[]\n  config: CliCommandConfig\n  parentName: string\n  importMeta: ImportMeta\n}) {\n  const command = `${parentName} ${config.commandName}`\n  lastSeenCommand = command\n\n  emitBanner(command)\n\n  // This exits if .printHelp() is called either by meow itself or by us.\n  const cli = meow({\n    argv,\n    description: config.description,\n    help: config.help(command, config),\n    importMeta,\n    flags: config.flags,\n    allowUnknownFlags: Boolean(allowUnknownFlags),\n    autoHelp: false // otherwise we can't exit(0)\n  })\n  if (cli.flags['help']) {\n    cli.showHelp()\n  }\n  return cli\n}\n\nexport function emitBanner(name: string) {\n  // Print a banner at the top of each command.\n  // This helps with brand recognition and marketing.\n  // It also helps with debugging since it contains version and command details.\n  // Note: print over stderr to preserve stdout for flags like --json and\n  //       --markdown. If we don't do this, you can't use --json in particular\n  //       and pipe the result to other tools. By emitting the banner over stderr\n  //       you can do something like `socket scan view xyz | jq | process`.\n  //       The spinner also emits over stderr for example.\n  logger.error(getAsciiHeader(name))\n}\n\nfunction getAsciiHeader(command: string) {\n  // Note: In tests we return <redacted> because otherwise snapshots will fail.\n  // The '@rollup/plugin-replace' will replace \"process.env['VITEST']\".\n  const redacting = process.env['VITEST']\n  const cliVersion = redacting\n    ? REDACTED\n    : // The '@rollup/plugin-replace' will replace \"process.env['INLINED_SOCKET_CLI_VERSION_HASH']\".\n      process.env['INLINED_SOCKET_CLI_VERSION_HASH']\n  const nodeVersion = redacting ? REDACTED : process.version\n  const apiToken = getSetting('apiToken')\n  const shownToken = redacting\n    ? REDACTED\n    : apiToken\n      ? getLastFiveOfApiToken(apiToken)\n      : 'no'\n  const relCwd = redacting\n    ? REDACTED\n    : normalizePath(\n        process\n          .cwd()\n          .replace(\n            new RegExp(\n              `^${escapeRegExp(constants.homePath)}(?:${path.sep}|$)`,\n              'i'\n            ),\n            '~/'\n          )\n      )\n  const body = `\n   _____         _       _        /---------------\n  |   __|___ ___| |_ ___| |_      | Socket.dev CLI ver ${cliVersion}\n  |__   | . |  _| '_| -_|  _|     | Node: ${nodeVersion}, API token set: ${shownToken}\n  |_____|___|___|_,_|___|_|.dev   | Command: \\`${command}\\`, cwd: ${relCwd}`.trimStart()\n  return `   ${body}\\n`\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { displayAnalytics } from './display-analytics'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'analytics',\n  description: `Look up analytics data`,\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags,\n    file: {\n      type: 'string',\n      shortFlag: 'f',\n      default: '-',\n      description:\n        'Path to a local file to save the output. Only valid with --json/--markdown. Defaults to stdout.'\n    },\n    repo: {\n      type: 'string',\n      shortFlag: 'r',\n      default: '',\n      description: 'Name of the repository. Only valid when scope=repo'\n    },\n    scope: {\n      type: 'string',\n      shortFlag: 's',\n      default: 'org',\n      description:\n        \"Scope of the analytics data - either 'org' or 'repo', default: org\"\n    },\n    time: {\n      type: 'number',\n      shortFlag: 't',\n      default: 7,\n      description: 'Time filter - either 7, 30 or 90, default: 7'\n    }\n  },\n  help: (command, { flags }) => `\n    Usage\n      $ ${command} --scope=<scope> --time=<time filter>\n\n    Default parameters are set to show the organization-level analytics over the\n    last 7 days.\n\n    Options\n      ${getFlagListOutput(flags, 6)}\n\n    Examples\n      $ ${command} --scope=org --time=7\n      $ ${command} --scope=org --time=30\n      $ ${command} --scope=repo --repo=test-repo --time=30\n  `\n}\n\nexport const cmdAnalytics = {\n  description: config.description,\n  hidden: config.hidden,\n  run: run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const { file, json, markdown, repo, scope, time } = cli.flags\n\n  const badScope = scope !== 'org' && scope !== 'repo'\n  const badTime = time !== 7 && time !== 30 && time !== 90\n  const badRepo = scope === 'repo' && !repo\n  const badFile = file !== '-' && !json && !markdown\n  const badFlags = json && markdown\n\n  if (badScope || badTime || badRepo || badFile || badFlags) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Scope must be \"repo\" or \"org\" ${badScope ? colors.red('(bad!)') : colors.green('(ok)')}\n\n      - The time filter must either be 7, 30 or 90 ${badTime ? colors.red('(bad!)') : colors.green('(ok)')}\n\n      ${scope === 'repo' ? `- Repository name using --repo when scope is \"repo\" ${badRepo ? colors.red('(bad!)') : colors.green('(ok)')}` : ''}\n\n      ${badFlags ? `- The \\`--json\\` and \\`--markdown\\` flags can not be used at the same time ${badFlags ? colors.red('(bad!)') : colors.green('(ok)')}` : ''}\n\n      ${badFile ? `- The \\`--file\\` flag is only valid when using \\`--json\\` or \\`--markdown\\` ${badFile ? colors.red('(bad!)') : colors.green('(ok)')}` : ''}\n    `\n        .split('\\n')\n        .filter(s => !!s.trim())\n        .join('\\n')\n    )\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  return await displayAnalytics({\n    scope,\n    time,\n    repo: String(repo || ''),\n    outputKind: json ? 'json' : markdown ? 'markdown' : 'print',\n    filePath: String(file || '')\n  })\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchAuditLog({\n  logType,\n  orgSlug,\n  outputKind,\n  page,\n  perPage\n}: {\n  outputKind: 'json' | 'markdown' | 'print'\n  orgSlug: string\n  page: number\n  perPage: number\n  logType: string\n}): Promise<SocketSdkReturnType<'getAuditLogEvents'>['data'] | void> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  return await fetchAuditLogWithToken(apiToken, {\n    logType,\n    orgSlug,\n    outputKind,\n    page,\n    perPage\n  })\n}\n\nexport async function fetchAuditLogWithToken(\n  apiToken: string,\n  {\n    logType,\n    orgSlug,\n    outputKind,\n    page,\n    perPage\n  }: {\n    outputKind: 'json' | 'markdown' | 'print'\n    orgSlug: string\n    page: number\n    perPage: number\n    logType: string\n  }\n): Promise<SocketSdkReturnType<'getAuditLogEvents'>['data'] | void> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start(`Looking up audit log for ${orgSlug}`)\n\n  const socketSdk = await setupSdk(apiToken)\n  const result = await handleApiCall(\n    socketSdk.getAuditLogEvents(orgSlug, {\n      // I'm not sure this is used at all.\n      outputJson: String(outputKind === 'json'),\n      // I'm not sure this is used at all.\n      outputMarkdown: String(outputKind === 'markdown'),\n      orgSlug,\n      type: logType,\n      page: String(page),\n      per_page: String(perPage)\n    }),\n    `Looking up audit log for ${orgSlug}\\n`\n  )\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('getAuditLogEvents', result)\n    return\n  }\n\n  spinner.stop()\n\n  return result.data\n}\n","import { stripIndents } from 'common-tags'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\nimport { Separator, select } from '@socketsecurity/registry/lib/prompts'\n\nimport { mdTable } from '../../utils/markdown'\n\nimport type { Choice } from '@socketsecurity/registry/lib/prompts'\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\ntype AuditChoice = Choice<string>\n\ntype AuditChoices = Array<Separator | AuditChoice>\n\nexport async function outputAuditLog(\n  auditLogs: SocketSdkReturnType<'getAuditLogEvents'>['data'],\n  {\n    logType,\n    orgSlug,\n    outputKind,\n    page,\n    perPage\n  }: {\n    outputKind: 'json' | 'markdown' | 'print'\n    orgSlug: string\n    page: number\n    perPage: number\n    logType: string\n  }\n): Promise<void> {\n  if (outputKind === 'json') {\n    await outputAsJson(auditLogs.results, orgSlug, logType, page, perPage)\n  } else if (outputKind === 'markdown') {\n    await outputAsMarkdown(auditLogs.results, orgSlug, logType, page, perPage)\n  } else {\n    await outputAsPrint(auditLogs.results, orgSlug, logType)\n  }\n}\n\nasync function outputAsJson(\n  auditLogs: SocketSdkReturnType<'getAuditLogEvents'>['data']['results'],\n  orgSlug: string,\n  logType: string,\n  page: number,\n  perPage: number\n): Promise<void> {\n  let json\n  try {\n    json = JSON.stringify(\n      {\n        desc: 'Audit logs for given query',\n        generated: new Date().toISOString(),\n        org: orgSlug,\n        logType,\n        page,\n        perPage,\n        logs: auditLogs.map(log => {\n          // Note: The subset is pretty arbitrary\n          const {\n            created_at,\n            event_id,\n            ip_address,\n            type,\n            user_agent,\n            user_email\n          } = log\n          return {\n            event_id,\n            created_at,\n            ip_address,\n            type,\n            user_agent,\n            user_email\n          }\n        })\n      },\n      null,\n      2\n    )\n  } catch (e) {\n    process.exitCode = 1\n    logger.fail(\n      'There was a problem converting the logs to JSON, please try without the `--json` flag'\n    )\n    return\n  }\n\n  logger.log(json)\n}\n\nasync function outputAsMarkdown(\n  auditLogs: SocketSdkReturnType<'getAuditLogEvents'>['data']['results'],\n  orgSlug: string,\n  logType: string,\n  page: number,\n  perPage: number\n): Promise<void> {\n  try {\n    const table = mdTable<any>(auditLogs, [\n      'event_id',\n      'created_at',\n      'type',\n      'user_email',\n      'ip_address',\n      'user_agent'\n    ])\n\n    logger.log(\n      stripIndents`\n# Socket Audit Logs\n\nThese are the Socket.dev audit logs as per requested query.\n- org: ${orgSlug}\n- type filter: ${logType || '(none)'}\n- page: ${page}\n- per page: ${perPage}\n- generated: ${new Date().toISOString()}\n\n${table}\n`\n    )\n  } catch (e) {\n    process.exitCode = 1\n    logger.fail(\n      'There was a problem converting the logs to JSON, please try without the `--json` flag'\n    )\n    logger.error(e)\n    return\n  }\n}\n\nasync function outputAsPrint(\n  auditLogs: SocketSdkReturnType<'getAuditLogEvents'>['data']['results'],\n  orgSlug: string,\n  logType: string\n): Promise<void> {\n  const data: AuditChoices = []\n  const logDetails: { [key: string]: string } = {}\n\n  for (const d of auditLogs) {\n    const { created_at } = d\n    if (created_at) {\n      const name = `${new Date(created_at).toLocaleDateString('en-us', { year: 'numeric', month: 'numeric', day: 'numeric' })} - ${d.user_email} - ${d.type} - ${d.ip_address} - ${d.user_agent}`\n      data.push({ name } as AuditChoice, new Separator())\n      logDetails[name] = JSON.stringify(d.payload)\n    }\n  }\n\n  logger.log(\n    logDetails[\n      (await select({\n        message: logType\n          ? `\\n Audit log for: ${orgSlug} with type: ${logType}\\n`\n          : `\\n Audit log for: ${orgSlug}\\n`,\n        choices: data,\n        pageSize: 30\n      })) as any\n    ]\n  )\n}\n","import { fetchAuditLog } from './fetch-audit-log'\nimport { outputAuditLog } from './output-audit-log'\n\nexport async function handleAuditLog({\n  logType,\n  orgSlug,\n  outputKind,\n  page,\n  perPage\n}: {\n  outputKind: 'json' | 'markdown' | 'print'\n  orgSlug: string\n  page: number\n  perPage: number\n  logType: string\n}): Promise<void> {\n  const auditLogs = await fetchAuditLog({\n    orgSlug,\n    outputKind,\n    page,\n    perPage,\n    logType\n  })\n  if (!auditLogs) return\n\n  await outputAuditLog(auditLogs, {\n    logType,\n    orgSlug,\n    outputKind,\n    page,\n    perPage\n  })\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleAuditLog } from './handle-audit-log'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'audit-log',\n  description: 'Look up the audit log for an organization',\n  hidden: false,\n  flags: {\n    type: {\n      type: 'string',\n      shortFlag: 't',\n      default: '',\n      description: 'Type of log event'\n    },\n    perPage: {\n      type: 'number',\n      shortFlag: 'pp',\n      default: 30,\n      description: 'Results per page - default is 30'\n    },\n    page: {\n      type: 'number',\n      shortFlag: 'p',\n      default: 1,\n      description: 'Page number - default is 1'\n    },\n    ...commonFlags,\n    ...outputFlags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug>\n\n    This feature requires an Enterprise Plan. To learn more about getting access\n    to this feature and many more, please visit https://socket.dev/pricing\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeOrg\n  `\n}\n\nexport const cmdAuditLog = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const { json, markdown, page, perPage, type } = cli.flags\n\n  const logType = String(type || '')\n  const [orgSlug = ''] = cli.input\n\n  if (!orgSlug) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`\n      ${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n    `\n    )\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleAuditLog({\n    orgSlug,\n    outputKind: json ? 'json' : markdown ? 'markdown' : 'print',\n    page: Number(page || 0),\n    perPage: Number(perPage || 0),\n    logType: logType.charAt(0).toUpperCase() + logType.slice(1)\n  })\n}\n","import { existsSync, promises as fs } from 'node:fs'\nimport path from 'node:path'\nimport process from 'node:process'\n\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport constants from '../../constants'\nimport shadowBin from '../../shadow/npm/bin'\n\nconst { NPM, NPX, PACKAGE_LOCK_JSON, PNPM, YARN, YARN_LOCK } = constants\n\nconst nodejsPlatformTypes = new Set([\n  'javascript',\n  'js',\n  'nodejs',\n  NPM,\n  PNPM,\n  'ts',\n  'tsx',\n  'typescript'\n])\n\nexport async function runCycloneDX(yargvWithYes: any) {\n  let cleanupPackageLock = false\n  const { yes, ...yargv } = { __proto__: null, ...yargvWithYes } as any\n  const yesArgs = yes ? ['--yes'] : []\n  if (\n    yargv.type !== YARN &&\n    nodejsPlatformTypes.has(yargv.type) &&\n    existsSync(`./${YARN_LOCK}`)\n  ) {\n    if (existsSync(`./${PACKAGE_LOCK_JSON}`)) {\n      yargv.type = NPM\n    } else {\n      // Use synp to create a package-lock.json from the yarn.lock,\n      // based on the node_modules folder, for a more accurate SBOM.\n      try {\n        await shadowBin(NPX, [\n          ...yesArgs,\n          // The '@rollup/plugin-replace' will replace \"process.env['INLINED_SYNP_VERSION']\".\n          `synp@${process.env['INLINED_SYNP_VERSION']}`,\n          '--source-file',\n          `./${YARN_LOCK}`\n        ])\n        yargv.type = NPM\n        cleanupPackageLock = true\n      } catch {}\n    }\n  }\n  await shadowBin(NPX, [\n    ...yesArgs,\n    // The '@rollup/plugin-replace' will replace \"process.env['INLINED_CYCLONEDX_CDXGEN_VERSION']\".\n    `@cyclonedx/cdxgen@${process.env['INLINED_CYCLONEDX_CDXGEN_VERSION']}`,\n    ...argvToArray(yargv)\n  ])\n  if (cleanupPackageLock) {\n    try {\n      await fs.rm(`./${PACKAGE_LOCK_JSON}`)\n    } catch {}\n  }\n  const fullOutputPath = path.join(process.cwd(), yargv.output)\n  if (existsSync(fullOutputPath)) {\n    logger.log(colors.cyanBright(`${yargv.output} created!`))\n  }\n}\n\nfunction argvToArray(argv: {\n  [key: string]: boolean | null | number | string | Array<string | number>\n}): string[] {\n  if (argv['help']) {\n    return ['--help']\n  }\n  const result = []\n  for (const { 0: key, 1: value } of Object.entries(argv)) {\n    if (key === '_' || key === '--') {\n      continue\n    }\n    if (key === 'babel' || key === 'install-deps' || key === 'validate') {\n      // cdxgen documents no-babel, no-install-deps, and no-validate flags so\n      // use them when relevant.\n      result.push(`--${value ? key : `no-${key}`}`)\n    } else if (value === true) {\n      result.push(`--${key}`)\n    } else if (typeof value === 'string') {\n      result.push(`--${key}`, String(value))\n    } else if (Array.isArray(value)) {\n      result.push(`--${key}`, ...value.map(String))\n    }\n  }\n  if (argv['--']) {\n    result.push('--', ...(argv as any)['--'])\n  }\n  return result\n}\n","const helpFlags = new Set(['--help', '-h'])\n\nexport function cmdFlagsToString(args: string[]) {\n  const result = []\n  for (let i = 0, { length } = args; i < length; i += 1) {\n    if (args[i]!.startsWith('--')) {\n      // Check if the next item exists and is NOT another flag.\n      if (i + 1 < length && !args[i + 1]!.startsWith('--')) {\n        result.push(`${args[i]}=${args[i + 1]}`)\n        i += 1\n      } else {\n        result.push(args[i])\n      }\n    }\n  }\n  return result.join(' ')\n}\n\nexport function cmdPrefixMessage(cmdName: string, text: string): string {\n  const cmdPrefix = cmdName ? `${cmdName}: ` : ''\n  return `${cmdPrefix}${text}`\n}\n\nexport function isHelpFlag(cmdArg: string) {\n  return helpFlags.has(cmdArg)\n}\n","// import { meowOrExit } from '../../utils/meow-with-subcommands'\nimport process from 'node:process'\n\nimport yargsParse from 'yargs-parser'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\nimport { pluralize } from '@socketsecurity/registry/lib/words'\n\nimport { runCycloneDX } from './run-cyclonedx'\nimport constants from '../../constants'\nimport { isHelpFlag } from '../../utils/cmd'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\n// TODO: convert yargs to meow. Or convert all the other things to yargs.\nconst toLower = (arg: string) => arg.toLowerCase()\nconst arrayToLower = (arg: string[]) => arg.map(toLower)\n\nconst yargsConfig = {\n  configuration: {\n    'camel-case-expansion': false,\n    'strip-aliased': true,\n    'parse-numbers': false,\n    'populate--': true,\n    'unknown-options-as-args': true\n  },\n  coerce: {\n    author: arrayToLower,\n    filter: arrayToLower,\n    only: arrayToLower,\n    profile: toLower,\n    standard: arrayToLower,\n    type: toLower\n  },\n  default: {\n    //author: ['OWASP Foundation'],\n    //'auto-compositions': true,\n    //babel: true,\n    //evidence: false,\n    //'include-crypto': false,\n    //'include-formulation': false,\n\n    // Default 'install-deps' to `false` and 'lifecycle' to 'pre-build' to\n    // sidestep arbitrary code execution during a cdxgen scan.\n    // https://github.com/CycloneDX/cdxgen/issues/1328\n    'install-deps': false,\n    lifecycle: 'pre-build',\n\n    //output: 'bom.json',\n    //profile: 'generic',\n    //'project-version': '',\n    //recurse: true,\n    //'server-host': '127.0.0.1',\n    //'server-port': '9090',\n    //'spec-version': '1.5',\n    type: 'js'\n    //validate: true,\n  },\n  alias: {\n    help: ['h'],\n    output: ['o'],\n    print: ['p'],\n    recurse: ['r'],\n    'resolve-class': ['c'],\n    type: ['t'],\n    version: ['v'],\n    yes: ['y']\n  },\n  array: [\n    { key: 'author', type: 'string' },\n    { key: 'exclude', type: 'string' },\n    { key: 'filter', type: 'string' },\n    { key: 'only', type: 'string' },\n    { key: 'standard', type: 'string' }\n  ],\n  boolean: [\n    'auto-compositions',\n    'babel',\n    'deep',\n    'evidence',\n    'fail-on-error',\n    'generate-key-and-sign',\n    'help',\n    'include-formulation',\n    'include-crypto',\n    'install-deps',\n    'print',\n    'required-only',\n    'server',\n    'validate',\n    'version',\n    // The --yes flag and -y alias map to the corresponding flag and alias of npx.\n    // https://docs.npmjs.com/cli/v7/commands/npx#compatibility-with-older-npx-versions\n    'yes'\n  ],\n  string: [\n    'api-key',\n    'lifecycle',\n    'output',\n    'parent-project-id',\n    'profile',\n    'project-group',\n    'project-name',\n    'project-version',\n    'project-id',\n    'server-host',\n    'server-port',\n    'server-url',\n    'spec-version'\n  ]\n}\n\nconst config: CliCommandConfig = {\n  commandName: 'cdxgen',\n  description: 'Create an SBOM with CycloneDX generator (cdxgen)',\n  hidden: false,\n  flags: {\n    // TODO: convert from yargsConfig\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} [options]\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n  `\n}\n\nexport const cmdCdxgen = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    allowUnknownFlags: true,\n    // Don't let meow take over --help.\n    argv: argv.filter(a => !isHelpFlag(a)),\n    config,\n    importMeta,\n    parentName\n  })\n  // if (cli.input.length)\n  //   logger.fail(\n  //     stripIndents`\n  //       ${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n  //\n  //       - Unexpected arguments\n  //   `)\n  //   config.help(parentName, config)\n  //   return\n  // }\n\n  // TODO: Convert to meow.\n  const yargv = {\n    ...yargsParse(argv as string[], yargsConfig)\n  } as any\n\n  const unknown: string[] = yargv._\n  const { length: unknownLength } = unknown\n  if (unknownLength) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      `Unknown ${pluralize('argument', unknownLength)}: ${yargv._.join(', ')}`\n    )\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  if (yargv.output === undefined) {\n    yargv.output = 'socket-cdx.json'\n  }\n\n  await runCycloneDX(yargv)\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchDependencies({\n  limit,\n  offset\n}: {\n  limit: number\n  offset: number\n}): Promise<SocketSdkReturnType<'searchDependencies'>['data'] | undefined> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  return await fetchDependenciesWithToken(apiToken, {\n    limit,\n    offset\n  })\n}\n\nasync function fetchDependenciesWithToken(\n  apiToken: string,\n  {\n    limit,\n    offset\n  }: {\n    limit: number\n    offset: number\n  }\n): Promise<SocketSdkReturnType<'searchDependencies'>['data'] | undefined> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Fetching organization dependencies...')\n\n  const socketSdk = await setupSdk(apiToken)\n\n  const result = await handleApiCall(\n    socketSdk.searchDependencies({ limit, offset }),\n    'Searching dependencies'\n  )\n\n  spinner?.successAndStop('Received organization dependencies response.')\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('searchDependencies', result)\n    return\n  }\n\n  return result.data\n}\n","// @ts-ignore\nimport chalkTable from 'chalk-table'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function outputDependencies(\n  data: SocketSdkReturnType<'searchDependencies'>['data'],\n  {\n    limit,\n    offset,\n    outputKind\n  }: {\n    limit: number\n    offset: number\n    outputKind: 'json' | 'markdown' | 'text'\n  }\n): Promise<void> {\n  if (outputKind === 'json') {\n    let json\n    try {\n      json = JSON.stringify(data, null, 2)\n    } catch (e) {\n      process.exitCode = 1\n      logger.fail(\n        'There was a problem converting the data to JSON, please try without the `--json` flag'\n      )\n      return\n    }\n\n    logger.log(json)\n    return\n  }\n\n  logger.log(\n    'Request details: Offset:',\n    offset,\n    ', limit:',\n    limit,\n    ', is there more data after this?',\n    data.end ? 'no' : 'yes'\n  )\n\n  const options = {\n    columns: [\n      { field: 'namespace', name: colors.cyan('Namespace') },\n      { field: 'name', name: colors.cyan('Name') },\n      { field: 'version', name: colors.cyan('Version') },\n      { field: 'repository', name: colors.cyan('Repository') },\n      { field: 'branch', name: colors.cyan('Branch') },\n      { field: 'type', name: colors.cyan('Type') },\n      { field: 'direct', name: colors.cyan('Direct') }\n    ]\n  }\n\n  logger.log(chalkTable(options, data.rows))\n}\n","import { fetchDependencies } from './fetch-dependencies'\nimport { outputDependencies } from './output-dependencies'\n\nexport async function handleDependencies({\n  limit,\n  offset,\n  outputKind\n}: {\n  limit: number\n  offset: number\n  outputKind: 'json' | 'markdown' | 'text'\n}): Promise<void> {\n  const data = await fetchDependencies({ limit, offset })\n  if (!data) return\n\n  await outputDependencies(data, { limit, offset, outputKind })\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleDependencies } from './handle-dependencies'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'dependencies',\n  description:\n    'Search for any dependency that is being used in your organization',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    limit: {\n      type: 'number',\n      shortFlag: 'l',\n      default: 50,\n      description: 'Maximum number of dependencies returned'\n    },\n    offset: {\n      type: 'number',\n      shortFlag: 'o',\n      default: 0,\n      description: 'Page number'\n    },\n    ...outputFlags\n  },\n  help: (command, config) => `\n    Usage\n      ${command}\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      ${command} --limit 20 --offset 10\n  `\n}\n\nexport const cmdScanCreate = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const { json, limit, markdown, offset } = cli.flags\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleDependencies({\n    limit: Number(limit || 0) || 0,\n    offset: Number(offset || 0) || 0,\n    outputKind: json ? 'json' : markdown ? 'markdown' : 'text'\n  })\n}\n","import colors from 'yoctocolors-cjs'\n\nimport constants from '../../constants'\nimport { handleAPIError, handleApiCall, queryAPI } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchDiffScan({\n  after,\n  before,\n  orgSlug\n}: {\n  after: string\n  before: string\n  orgSlug: string\n}): Promise<SocketSdkReturnType<'GetOrgDiffScan'>['data'] | undefined> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  return await fetchDiffScanWithToken(apiToken, {\n    after,\n    before,\n    orgSlug\n  })\n}\n\nexport async function fetchDiffScanWithToken(\n  apiToken: string,\n  {\n    after,\n    before,\n    orgSlug\n  }: {\n    after: string\n    before: string\n    orgSlug: string\n  }\n): Promise<SocketSdkReturnType<'GetOrgDiffScan'>['data'] | undefined> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Fetching diff-scan...')\n\n  const response = await queryAPI(\n    `orgs/${orgSlug}/full-scans/diff?before=${encodeURIComponent(before)}&after=${encodeURIComponent(after)}`,\n    apiToken\n  )\n\n  spinner?.successAndStop('Received diff-scan response')\n\n  if (!response.ok) {\n    const err = await handleAPIError(response.status)\n    spinner.errorAndStop(\n      `${colors.bgRed(colors.white(response.statusText))}: ${err}`\n    )\n    return\n  }\n\n  const result = await handleApiCall(\n    (await response.json()) as Promise<\n      SocketSdkReturnType<'GetOrgDiffScan'>['data']\n    >,\n    'Deserializing json'\n  )\n\n  return result\n}\n","import fs from 'node:fs'\nimport util from 'node:util'\n\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function outputDiffScan(\n  result: SocketSdkReturnType<'GetOrgDiffScan'>['data'],\n  {\n    depth,\n    file,\n    outputKind\n  }: {\n    depth: number\n    file: string\n    outputKind: 'json' | 'markdown' | 'text'\n  }\n): Promise<void> {\n  const dashboardUrl = result.diff_report_url\n  const dashboardMessage = dashboardUrl\n    ? `\\n View this diff scan in the Socket dashboard: ${colors.cyan(dashboardUrl)}`\n    : ''\n\n  // When forcing json, or dumping to file, serialize to string such that it\n  // won't get truncated. The only way to dump the full raw JSON to stdout is\n  // to use `--json --file -` (the dash is a standard notation for stdout)\n  if (outputKind === 'json' || file) {\n    let json\n    try {\n      json = JSON.stringify(result, null, 2)\n    } catch (e) {\n      process.exitCode = 1\n      // Most likely caused by a circular reference (or OOM)\n      logger.fail('There was a problem converting the data to JSON')\n      logger.error(e)\n      return\n    }\n\n    if (file && file !== '-') {\n      logger.log(`Writing json to \\`${file}\\``)\n      fs.writeFile(file, JSON.stringify(result, null, 2), err => {\n        if (err) {\n          logger.fail(`Writing to \\`${file}\\` failed...`)\n          logger.error(err)\n        } else {\n          logger.log(`Data successfully written to \\`${file}\\``)\n        }\n        logger.error(dashboardMessage)\n      })\n    } else {\n      // TODO: expose different method for writing to stderr when simply dodging stdout\n      logger.error(`\\n Diff scan result: \\n`)\n      logger.log(json)\n      logger.error(dashboardMessage)\n    }\n\n    return\n  }\n\n  // In this case neither the --json nor the --file flag was passed\n  // Dump the JSON to CLI and let NodeJS deal with truncation\n\n  logger.log('Diff scan result:')\n  logger.log(\n    util.inspect(result, {\n      showHidden: false,\n      depth: depth > 0 ? depth : null,\n      colors: true,\n      maxArrayLength: null\n    })\n  )\n  logger.log(\n    `\\n 📝 To display the detailed report in the terminal, use the --json flag \\n`\n  )\n  logger.log(dashboardMessage)\n}\n","import { fetchDiffScan } from './fetch-diff-scan'\nimport { outputDiffScan } from './output-diff-scan'\n\nexport async function handleDiffScan({\n  after,\n  before,\n  depth,\n  file,\n  orgSlug,\n  outputKind\n}: {\n  after: string\n  before: string\n  depth: number\n  file: string\n  orgSlug: string\n  outputKind: 'json' | 'markdown' | 'text'\n}): Promise<void> {\n  const data = await fetchDiffScan({\n    after,\n    before,\n    orgSlug\n  })\n  if (!data) return\n\n  await outputDiffScan(data, {\n    depth,\n    file,\n    outputKind\n  })\n}\n","import colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleDiffScan } from './handle-diff-scan'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'get',\n  description: 'Get a diff scan for an organization',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    after: {\n      type: 'string',\n      shortFlag: 'a',\n      default: '',\n      description: 'The full scan ID of the head scan'\n    },\n    before: {\n      type: 'string',\n      shortFlag: 'b',\n      default: '',\n      description: 'The full scan ID of the base scan'\n    },\n    depth: {\n      type: 'number',\n      default: 2,\n      description:\n        'Max depth of JSON to display before truncating, use zero for no limit (without --json/--file)'\n    },\n    json: {\n      type: 'boolean',\n      shortFlag: 'j',\n      default: false,\n      description:\n        'Output result as json. This can be big. Use --file to store it to disk without truncation.'\n    },\n    file: {\n      type: 'string',\n      shortFlag: 'f',\n      default: '',\n      description:\n        'Path to a local file where the output should be saved. Use `-` to force stdout.'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug> --before=<before> --after=<after>\n\n    This command displays the package changes between two scans. The full output\n    can be pretty large depending on the size of your repo and time range. It is\n    best stored to disk to be further analyzed by other tools.\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeCorp --before=aaa0aa0a-aaaa-0000-0a0a-0000000a00a0 --after=aaa1aa1a-aaaa-1111-1a1a-1111111a11a1\n  `\n}\n\nexport const cmdDiffScanGet = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const { after, before, depth, file, json, markdown } = cli.flags\n\n  const [orgSlug = ''] = cli.input\n\n  if (!before || !after || cli.input.length < 1) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\\n\n      - Specify a before and after full scan ID ${!before && !after ? colors.red('(missing before and after!)') : !before ? colors.red('(missing before!)') : !after ? colors.red('(missing after!)') : colors.green('(ok)')}\\n\n          - To get full scans IDs, you can run the command \"socket scan list <your org slug>\".\n            The args are expecting a full \\`aaa0aa0a-aaaa-0000-0a0a-0000000a00a0\\` ID.\\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\\n`)\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleDiffScan({\n    before: String(before || ''),\n    after: String(after || ''),\n    depth: Number(depth),\n    orgSlug,\n    outputKind: json ? 'json' : markdown ? 'markdown' : 'text',\n    file: String(file || '')\n  })\n}\n","import { cmdDiffScanGet } from './cmd-diff-scan-get'\nimport { meowWithSubcommands } from '../../utils/meow-with-subcommands'\n\nimport type { CliSubcommand } from '../../utils/meow-with-subcommands'\n\nconst description = 'Diff scans related commands'\n\nexport const cmdDiffScan: CliSubcommand = {\n  description,\n  // Hidden because it was broken all this time (nobody could be using it)\n  // and we're not sure if it's useful to anyone in its current state.\n  // Until we do, we'll hide this to keep the help tidier.\n  // And later, we may simply move this under `scan`, anyways.\n  hidden: true,\n  async run(argv, importMeta, { parentName }) {\n    await meowWithSubcommands(\n      {\n        get: cmdDiffScanGet\n      },\n      {\n        argv,\n        description,\n        importMeta,\n        name: parentName + ' diff-scan'\n      }\n    )\n  }\n}\n","import { getManifestData } from '@socketsecurity/registry'\nimport { runScript } from '@socketsecurity/registry/lib/npm'\nimport {\n  fetchPackagePackument,\n  readPackageJson\n} from '@socketsecurity/registry/lib/packages'\n\nimport constants from '../../constants'\nimport {\n  Arborist,\n  SAFE_ARBORIST_REIFY_OPTIONS_OVERRIDES,\n  SafeArborist\n} from '../../shadow/npm/arborist/lib/arborist'\nimport {\n  findPackageNodes,\n  getAlertsMapFromArborist,\n  updateNode\n} from '../../utils/lockfile/package-lock-json'\nimport { getCveInfoByAlertsMap } from '../../utils/socket-package-alert'\n\nimport type { SafeNode } from '../../shadow/npm/arborist/lib/node'\nimport type { EnvDetails } from '../../utils/package-environment'\nimport type { Spinner } from '@socketsecurity/registry/lib/spinner'\n\nconst { NPM } = constants\n\nfunction isTopLevel(tree: SafeNode, node: SafeNode): boolean {\n  return tree.children.get(node.name) === node\n}\n\ntype NpmFixOptions = {\n  spinner?: Spinner | undefined\n}\n\nexport async function npmFix(\n  _pkgEnvDetails: EnvDetails,\n  cwd: string,\n  options?: NpmFixOptions | undefined\n) {\n  const { spinner } = { __proto__: null, ...options } as NpmFixOptions\n\n  spinner?.start()\n\n  const arb = new SafeArborist({\n    path: cwd,\n    ...SAFE_ARBORIST_REIFY_OPTIONS_OVERRIDES\n  })\n\n  await arb.reify()\n\n  const alertsMap = await getAlertsMapFromArborist(arb, {\n    consolidate: true,\n    include: {\n      existing: true,\n      unfixable: false,\n      upgrade: false\n    }\n  })\n\n  const infoByPkg = getCveInfoByAlertsMap(alertsMap)\n  if (!infoByPkg) {\n    spinner?.stop()\n    return\n  }\n\n  await arb.buildIdealTree()\n\n  const editablePkgJson = await readPackageJson(cwd, { editable: true })\n\n  for (const { 0: name, 1: infos } of infoByPkg) {\n    const revertToIdealTree = arb.idealTree!\n    arb.idealTree = null\n    // eslint-disable-next-line no-await-in-loop\n    await arb.buildIdealTree()\n\n    const tree = arb.idealTree!\n\n    const hasUpgrade = !!getManifestData(NPM, name)\n    if (hasUpgrade) {\n      spinner?.info(`Skipping ${name}. Socket Optimize package exists.`)\n      continue\n    }\n\n    const nodes = findPackageNodes(tree, name)\n\n    const packument =\n      nodes.length && infos.length\n        ? // eslint-disable-next-line no-await-in-loop\n          await fetchPackagePackument(name)\n        : null\n    if (!packument) {\n      continue\n    }\n\n    for (let i = 0, { length: nodesLength } = nodes; i < nodesLength; i += 1) {\n      const node = nodes[i]!\n      for (\n        let j = 0, { length: infosLength } = infos;\n        j < infosLength;\n        j += 1\n      ) {\n        const { firstPatchedVersionIdentifier, vulnerableVersionRange } =\n          infos[j]!\n        const { version: oldVersion } = node\n        if (\n          updateNode(\n            node,\n            packument,\n            vulnerableVersionRange,\n            firstPatchedVersionIdentifier\n          )\n        ) {\n          try {\n            // eslint-disable-next-line no-await-in-loop\n            await runScript('test', [], { spinner, stdio: 'ignore' })\n\n            spinner?.info(`Patched ${name} ${oldVersion} -> ${node.version}`)\n\n            if (isTopLevel(tree, node)) {\n              for (const depField of [\n                'dependencies',\n                'optionalDependencies',\n                'peerDependencies'\n              ]) {\n                const { content: pkgJson } = editablePkgJson\n                const oldVersion = (pkgJson[depField] as any)?.[name]\n                if (oldVersion) {\n                  const decorator = /^[~^]/.exec(oldVersion)?.[0] ?? ''\n                  ;(pkgJson as any)[depField][name] =\n                    `${decorator}${node.version}`\n                }\n              }\n            }\n            // eslint-disable-next-line no-await-in-loop\n            await editablePkgJson.save()\n          } catch {\n            spinner?.error(`Reverting ${name} to ${oldVersion}`)\n            arb.idealTree = revertToIdealTree\n          }\n        } else {\n          spinner?.error(`Could not patch ${name} ${oldVersion}`)\n        }\n      }\n    }\n  }\n\n  const arb2 = new Arborist({ path: cwd })\n  arb2.idealTree = arb.idealTree\n  await arb2.reify()\n\n  spinner?.stop()\n}\n","import { detectDepTypes } from '@pnpm/lockfile.detect-dep-types'\n\nimport { getPublicToken, setupSdk } from '../sdk'\nimport { addArtifactToAlertsMap } from '../socket-package-alert'\n\nimport type { CompactSocketArtifact } from '../alert/artifact'\nimport type { AlertsByPkgId } from '../socket-package-alert'\nimport type { Lockfile } from '@pnpm/lockfile-file'\nimport type { Spinner } from '@socketsecurity/registry/lib/spinner'\n\ntype AlertIncludeFilter = {\n  critical?: boolean | undefined\n  cve?: boolean | undefined\n  existing?: boolean | undefined\n  unfixable?: boolean | undefined\n  upgrade?: boolean | undefined\n}\n\ntype GetAlertsMapFromPnpmLockfileOptions = {\n  consolidate?: boolean | undefined\n  include?: AlertIncludeFilter | undefined\n  spinner?: Spinner | undefined\n}\n\nexport async function getAlertsMapFromPnpmLockfile(\n  lockfile: Lockfile,\n  options?: GetAlertsMapFromPnpmLockfileOptions | undefined\n): Promise<AlertsByPkgId> {\n  const { include: _include, spinner } = {\n    __proto__: null,\n    consolidate: false,\n    ...options\n  } as GetAlertsMapFromPnpmLockfileOptions\n\n  const include = {\n    __proto__: null,\n    critical: true,\n    cve: true,\n    existing: false,\n    unfixable: true,\n    upgrade: false,\n    ..._include\n  } as AlertIncludeFilter\n\n  const depTypes = detectDepTypes(lockfile)\n  const pkgIds = Object.keys(depTypes)\n\n  let { length: remaining } = pkgIds\n  const alertsByPkgId: AlertsByPkgId = new Map()\n  if (!remaining) {\n    return alertsByPkgId\n  }\n  const getText = () => `Looking up data for ${remaining} packages`\n\n  spinner?.start(getText())\n\n  const socketSdk = await setupSdk(getPublicToken())\n\n  const toAlertsMapOptions = {\n    overrides: lockfile.overrides,\n    ...options\n  }\n\n  for await (const batchPackageFetchResult of socketSdk.batchPackageStream(\n    {\n      alerts: 'true',\n      compact: 'true',\n      fixable: include.unfixable ? 'false' : 'true'\n    },\n    {\n      components: pkgIds.map(id => ({ purl: `pkg:npm/${id}` }))\n    }\n  )) {\n    if (batchPackageFetchResult.success) {\n      await addArtifactToAlertsMap(\n        batchPackageFetchResult.data as CompactSocketArtifact,\n        alertsByPkgId,\n        toAlertsMapOptions\n      )\n    }\n    remaining -= 1\n    if (spinner && remaining > 0) {\n      spinner.start()\n      spinner.setText(getText())\n    }\n  }\n\n  spinner?.stop()\n\n  return alertsByPkgId\n}\n","import process from 'node:process'\n\nimport { isDebug } from '@socketsecurity/registry/lib/debug'\nimport {\n  isAuditFlag,\n  isFundFlag,\n  isLoglevelFlag,\n  isProgressFlag\n} from '@socketsecurity/registry/lib/npm'\nimport { isObject } from '@socketsecurity/registry/lib/objects'\nimport { spawn } from '@socketsecurity/registry/lib/spawn'\n\nimport constants from '../constants'\nimport { getNpmBinPath } from '../shadow/npm/paths'\n\nimport type { Spinner } from '@socketsecurity/registry/lib/spinner'\n\nconst { SOCKET_IPC_HANDSHAKE } = constants\n\ntype SpawnOption = Exclude<Parameters<typeof spawn>[2], undefined>\n\ntype SafeNpmInstallOptions = SpawnOption & {\n  agentExecPath?: string | undefined\n  args?: string[] | readonly string[] | undefined\n  ipc?: object | undefined\n  spinner?: Spinner | undefined\n}\n\nexport function safeNpmInstall(options?: SafeNpmInstallOptions) {\n  const {\n    agentExecPath = getNpmBinPath(),\n    args = [],\n    ipc,\n    spinner,\n    ...spawnOptions\n  } = { __proto__: null, ...options } as SafeNpmInstallOptions\n  const useIpc = isObject(ipc)\n  const useDebug = isDebug()\n  const terminatorPos = args.indexOf('--')\n  const binArgs = (\n    terminatorPos === -1 ? args : args.slice(0, terminatorPos)\n  ).filter(a => !isAuditFlag(a) && !isFundFlag(a) && !isProgressFlag(a))\n  const otherArgs = terminatorPos === -1 ? [] : args.slice(terminatorPos)\n  const isSilent = !useDebug && !binArgs.some(isLoglevelFlag)\n  const logLevelArgs = isSilent ? ['--loglevel', 'silent'] : []\n  const spawnPromise = spawn(\n    // Lazily access constants.execPath.\n    constants.execPath,\n    [\n      // Lazily access constants.nodeHardenFlags.\n      ...constants.nodeHardenFlags,\n      // Lazily access constants.nodeNoWarningsFlags.\n      ...constants.nodeNoWarningsFlags,\n      // Lazily access process.env['INLINED_SOCKET_CLI_SENTRY_BUILD'].\n      ...(process.env['INLINED_SOCKET_CLI_SENTRY_BUILD']\n        ? [\n            '--require',\n            // Lazily access constants.distInstrumentWithSentryPath.\n            constants.distInstrumentWithSentryPath\n          ]\n        : []),\n      '--require',\n      // Lazily access constants.distShadowNpmInjectPath.\n      constants.distShadowNpmInjectPath,\n      agentExecPath,\n      'install',\n      // Avoid code paths for 'audit' and 'fund'.\n      '--no-audit',\n      '--no-fund',\n      // Add '--no-progress' to fix input being swallowed by the npm spinner.\n      '--no-progress',\n      // Add '--loglevel=silent' if a loglevel flag is not provided and the\n      // SOCKET_CLI_DEBUG environment variable is not truthy.\n      ...logLevelArgs,\n      ...binArgs,\n      ...otherArgs\n    ],\n    {\n      spinner,\n      // Set stdio to include 'ipc'.\n      // See https://github.com/nodejs/node/blob/v23.6.0/lib/child_process.js#L161-L166\n      // and https://github.com/nodejs/node/blob/v23.6.0/lib/internal/child_process.js#L238.\n      stdio: useIpc ? [0, 1, 2, 'ipc'] : 'inherit',\n      ...spawnOptions,\n      env: {\n        ...process.env,\n        ...spawnOptions.env\n      }\n    }\n  )\n  if (useIpc) {\n    spawnPromise.process.send({ [SOCKET_IPC_HANDSHAKE]: ipc })\n  }\n  return spawnPromise\n}\n","import { isDebug } from '@socketsecurity/registry/lib/debug'\nimport { spawn } from '@socketsecurity/registry/lib/spawn'\nimport { Spinner } from '@socketsecurity/registry/lib/spinner'\n\nimport constants from '../../constants'\nimport { cmdFlagsToString } from '../../utils/cmd'\nimport { safeNpmInstall } from '../../utils/npm'\n\nimport type { EnvDetails } from '../../utils/package-environment'\n\nconst { NPM } = constants\n\ntype SpawnOption = Exclude<Parameters<typeof spawn>[2], undefined>\ntype SpawnResult = ReturnType<typeof spawn>\n\nexport type AgentInstallOptions = SpawnOption & {\n  args?: string[] | readonly string[] | undefined\n  spinner?: Spinner | undefined\n}\n\nexport function runAgentInstall(\n  pkgEnvDetails: EnvDetails,\n  options?: AgentInstallOptions | undefined\n): SpawnResult {\n  const { agent, agentExecPath } = pkgEnvDetails\n  // All package managers support the \"install\" command.\n  if (agent === NPM) {\n    return safeNpmInstall({\n      agentExecPath,\n      ...options\n    })\n  }\n  const {\n    args = [],\n    spinner,\n    ...spawnOptions\n  } = { __proto__: null, ...options } as AgentInstallOptions\n  return spawn(agentExecPath, ['install', ...args], {\n    spinner,\n    stdio: isDebug() ? 'inherit' : 'ignore',\n    ...spawnOptions,\n    env: {\n      ...process.env,\n      NODE_OPTIONS: cmdFlagsToString([\n        // Lazily access constants.nodeHardenFlags.\n        ...constants.nodeHardenFlags,\n        // Lazily access constants.nodeNoWarningsFlags.\n        ...constants.nodeNoWarningsFlags\n      ]),\n      ...spawnOptions.env\n    }\n  })\n}\n","import { readWantedLockfile } from '@pnpm/lockfile-file'\n\nimport { getManifestData } from '@socketsecurity/registry'\nimport {\n  fetchPackagePackument,\n  readPackageJson\n} from '@socketsecurity/registry/lib/packages'\n\nimport constants from '../../constants'\nimport {\n  SAFE_ARBORIST_REIFY_OPTIONS_OVERRIDES,\n  SafeArborist\n} from '../../shadow/npm/arborist/lib/arborist'\nimport {\n  findBestPatchVersion,\n  findPackageNodes\n} from '../../utils/lockfile/package-lock-json'\nimport { getAlertsMapFromPnpmLockfile } from '../../utils/lockfile/pnpm-lock-yaml'\nimport { getCveInfoByAlertsMap } from '../../utils/socket-package-alert'\nimport { runAgentInstall } from '../optimize/run-agent'\n\nimport type { EnvDetails } from '../../utils/package-environment'\nimport type { Spinner } from '@socketsecurity/registry/lib/spinner'\n\nconst { NPM, OVERRIDES, PNPM } = constants\n\ntype PnpmFixOptions = {\n  spinner?: Spinner | undefined\n}\n\nexport async function pnpmFix(\n  pkgEnvDetails: EnvDetails,\n  cwd: string,\n  options?: PnpmFixOptions | undefined\n) {\n  const { spinner } = { __proto__: null, ...options } as PnpmFixOptions\n\n  spinner?.start()\n\n  const lockfile = await readWantedLockfile(cwd, { ignoreIncompatible: false })\n  if (!lockfile) {\n    spinner?.stop()\n    return\n  }\n\n  const alertsMap = await getAlertsMapFromPnpmLockfile(lockfile, {\n    consolidate: true,\n    include: {\n      existing: true,\n      unfixable: false,\n      upgrade: false\n    }\n  })\n\n  const infoByPkg = getCveInfoByAlertsMap(alertsMap)\n  if (!infoByPkg) {\n    spinner?.stop()\n    return\n  }\n\n  const arb = new SafeArborist({\n    path: cwd,\n    ...SAFE_ARBORIST_REIFY_OPTIONS_OVERRIDES\n  })\n\n  await arb.loadActual()\n\n  const editablePkgJson = await readPackageJson(cwd, { editable: true })\n  const { content: pkgJson } = editablePkgJson\n\n  for (const { 0: name, 1: infos } of infoByPkg) {\n    const tree = arb.actualTree!\n\n    const hasUpgrade = !!getManifestData(NPM, name)\n    if (hasUpgrade) {\n      spinner?.info(`Skipping ${name}. Socket Optimize package exists.`)\n      continue\n    }\n\n    const nodes = findPackageNodes(tree, name)\n\n    const packument =\n      nodes.length && infos.length\n        ? // eslint-disable-next-line no-await-in-loop\n          await fetchPackagePackument(name)\n        : null\n    if (!packument) {\n      continue\n    }\n\n    for (let i = 0, { length: nodesLength } = nodes; i < nodesLength; i += 1) {\n      const node = nodes[i]!\n      for (\n        let j = 0, { length: infosLength } = infos;\n        j < infosLength;\n        j += 1\n      ) {\n        const { firstPatchedVersionIdentifier, vulnerableVersionRange } =\n          infos[j]!\n        const { version: oldVersion } = node\n        const availableVersions = Object.keys(packument.versions)\n        // Find the highest non-vulnerable version within the same major range\n        const targetVersion = findBestPatchVersion(\n          node,\n          availableVersions,\n          vulnerableVersionRange,\n          firstPatchedVersionIdentifier\n        )\n        const targetPackument = targetVersion\n          ? packument.versions[targetVersion]\n          : undefined\n        if (targetPackument) {\n          const oldPnpm = (pkgJson as any)[PNPM]\n          const oldOverrides = oldPnpm?.[OVERRIDES] as\n            | { [key: string]: string }\n            | undefined\n          try {\n            editablePkgJson.update({\n              [PNPM]: {\n                ...oldPnpm,\n                [OVERRIDES]: {\n                  [`${node.name}@${vulnerableVersionRange}`]: `^${targetVersion}`,\n                  ...oldOverrides\n                }\n              }\n            })\n\n            spinner?.info(`Patched ${name} ${oldVersion} -> ${node.version}`)\n\n            // eslint-disable-next-line no-await-in-loop\n            await editablePkgJson.save()\n            // eslint-disable-next-line no-await-in-loop\n            await runAgentInstall(pkgEnvDetails, { spinner })\n          } catch {\n            spinner?.error(`Reverting ${name} to ${oldVersion}`)\n          }\n        } else {\n          spinner?.error(`Could not patch ${name} ${oldVersion}`)\n        }\n      }\n    }\n  }\n\n  spinner?.stop()\n}\n","import { existsSync } from 'node:fs'\nimport path from 'node:path'\nimport process from 'node:process'\n\nimport browserslist from 'browserslist'\nimport semver from 'semver'\nimport which from 'which'\n\nimport { parse as parseBunLockb } from '@socketregistry/hyrious__bun.lockb/index.cjs'\nimport { Logger } from '@socketsecurity/registry/lib/logger'\nimport { readPackageJson } from '@socketsecurity/registry/lib/packages'\nimport { naturalCompare } from '@socketsecurity/registry/lib/sorts'\nimport { spawn } from '@socketsecurity/registry/lib/spawn'\nimport { isNonEmptyString } from '@socketsecurity/registry/lib/strings'\n\nimport { cmdPrefixMessage } from './cmd'\nimport { findUp, readFileBinary, readFileUtf8 } from './fs'\nimport constants from '../constants'\n\nimport type { Remap } from '@socketsecurity/registry/lib/objects'\nimport type { EditablePackageJson } from '@socketsecurity/registry/lib/packages'\nimport type { SemVer } from 'semver'\n\nconst {\n  BINARY_LOCK_EXT,\n  BUN,\n  HIDDEN_PACKAGE_LOCK_JSON,\n  LOCK_EXT,\n  NPM,\n  NPM_BUGGY_OVERRIDES_PATCHED_VERSION,\n  PACKAGE_JSON,\n  PNPM,\n  VLT,\n  YARN,\n  YARN_BERRY,\n  YARN_CLASSIC\n} = constants\n\nexport const AGENTS = [BUN, NPM, PNPM, YARN_BERRY, YARN_CLASSIC, VLT] as const\nexport type Agent = (typeof AGENTS)[number]\nexport type StringKeyValueObject = { [key: string]: string }\n\nconst binByAgent = new Map<Agent, string>([\n  [BUN, BUN],\n  [NPM, NPM],\n  [PNPM, PNPM],\n  [YARN_BERRY, YARN],\n  [YARN_CLASSIC, YARN],\n  [VLT, VLT]\n])\n\nasync function getAgentExecPath(agent: Agent): Promise<string> {\n  const binName = binByAgent.get(agent)!\n  return (await which(binName, { nothrow: true })) ?? binName\n}\n\nasync function getAgentVersion(\n  agentExecPath: string,\n  cwd: string\n): Promise<SemVer | undefined> {\n  let result\n  try {\n    result =\n      // Coerce version output into a valid semver version by passing it through\n      // semver.coerce which strips leading v's, carets (^), comparators (<,<=,>,>=,=),\n      // and tildes (~).\n      semver.coerce(\n        // All package managers support the \"--version\" flag.\n        (await spawn(agentExecPath, ['--version'], { cwd })).stdout\n      ) ?? undefined\n  } catch {}\n  return result\n}\n\n// The order of LOCKS properties IS significant as it affects iteration order.\nconst LOCKS: Record<string, Agent> = {\n  [`bun${LOCK_EXT}`]: BUN,\n  [`bun${BINARY_LOCK_EXT}`]: BUN,\n  // If both package-lock.json and npm-shrinkwrap.json are present in the root\n  // of a project, npm-shrinkwrap.json will take precedence and package-lock.json\n  // will be ignored.\n  // https://docs.npmjs.com/cli/v10/configuring-npm/package-lock-json#package-lockjson-vs-npm-shrinkwrapjson\n  'npm-shrinkwrap.json': NPM,\n  'package-lock.json': NPM,\n  'pnpm-lock.yaml': PNPM,\n  'pnpm-lock.yml': PNPM,\n  [`yarn${LOCK_EXT}`]: YARN_CLASSIC,\n  'vlt-lock.json': VLT,\n  // Lastly, look for a hidden lock file which is present if .npmrc has package-lock=false:\n  // https://docs.npmjs.com/cli/v10/configuring-npm/package-lock-json#hidden-lockfiles\n  //\n  // Unlike the other LOCKS keys this key contains a directory AND filename so\n  // it has to be handled differently.\n  'node_modules/.package-lock.json': NPM\n}\n\ntype ReadLockFile =\n  | ((lockPath: string) => Promise<string | undefined>)\n  | ((lockPath: string, agentExecPath: string) => Promise<string | undefined>)\n\nconst readLockFileByAgent: Map<Agent, ReadLockFile> = (() => {\n  function wrapReader<T extends (...args: any[]) => Promise<any>>(\n    reader: T\n  ): (...args: Parameters<T>) => Promise<Awaited<ReturnType<T>> | undefined> {\n    return async (...args: any[]): Promise<any> => {\n      try {\n        return await reader(...args)\n      } catch {}\n      return undefined\n    }\n  }\n\n  const binaryReader = wrapReader(readFileBinary)\n\n  const defaultReader = wrapReader(\n    async (lockPath: string) => await readFileUtf8(lockPath)\n  )\n\n  return new Map([\n    [\n      BUN,\n      wrapReader(async (lockPath: string, agentExecPath: string) => {\n        const ext = path.extname(lockPath)\n        if (ext === LOCK_EXT) {\n          return await defaultReader(lockPath)\n        }\n        if (ext === BINARY_LOCK_EXT) {\n          const lockBuffer = await binaryReader(lockPath)\n          if (lockBuffer) {\n            try {\n              return parseBunLockb(lockBuffer)\n            } catch {}\n          }\n          // To print a Yarn lockfile to your console without writing it to disk\n          // use `bun bun.lockb`.\n          // https://bun.sh/guides/install/yarnlock\n          return (await spawn(agentExecPath, [lockPath])).stdout.trim()\n        }\n        return undefined\n      })\n    ],\n    [NPM, defaultReader],\n    [PNPM, defaultReader],\n    [VLT, defaultReader],\n    [YARN_BERRY, defaultReader],\n    [YARN_CLASSIC, defaultReader]\n  ])\n})()\n\nexport type DetectOptions = {\n  cwd?: string | undefined\n  onUnknown?: (pkgManager: string | undefined) => void\n}\n\ntype EnvBase = {\n  agent: Agent\n  agentExecPath: string\n  agentSupported: boolean\n  features: {\n    // Fixed by https://github.com/npm/cli/pull/8089.\n    // Landed in npm v11.2.0.\n    npmBuggyOverrides: boolean\n  }\n  nodeSupported: boolean\n  nodeVersion: SemVer\n  npmExecPath: string\n  pkgRequirements: {\n    agent: string\n    node: string\n  }\n  pkgSupports: {\n    agent: boolean\n    node: boolean\n  }\n}\n\nexport type EnvDetails = Readonly<\n  Remap<\n    EnvBase & {\n      agentVersion: SemVer\n      lockName: string\n      lockPath: string\n      lockSrc: string\n      pkgJson: EditablePackageJson\n      pkgPath: string\n    }\n  >\n>\n\nexport type PartialEnvDetails = Readonly<\n  Remap<\n    EnvBase & {\n      agentVersion: SemVer | undefined\n      lockName: string | undefined\n      lockPath: string | undefined\n      lockSrc: string | undefined\n      pkgJson: EditablePackageJson | undefined\n      pkgPath: string | undefined\n    }\n  >\n>\n\nexport async function detectPackageEnvironment({\n  cwd = process.cwd(),\n  onUnknown\n}: DetectOptions = {}): Promise<EnvDetails | PartialEnvDetails> {\n  let lockPath = await findUp(Object.keys(LOCKS), { cwd })\n  let lockName = lockPath ? path.basename(lockPath) : undefined\n  const isHiddenLockFile = lockName === HIDDEN_PACKAGE_LOCK_JSON\n  const pkgJsonPath = lockPath\n    ? path.resolve(\n        lockPath,\n        `${isHiddenLockFile ? '../' : ''}../${PACKAGE_JSON}`\n      )\n    : await findUp(PACKAGE_JSON, { cwd })\n  const pkgPath =\n    pkgJsonPath && existsSync(pkgJsonPath)\n      ? path.dirname(pkgJsonPath)\n      : undefined\n  const editablePkgJson = pkgPath\n    ? await readPackageJson(pkgPath, { editable: true })\n    : undefined\n  const pkgJson = editablePkgJson?.content\n  // Read Corepack `packageManager` field in package.json:\n  // https://nodejs.org/api/packages.html#packagemanager\n  const pkgManager = isNonEmptyString(pkgJson?.packageManager)\n    ? pkgJson.packageManager\n    : undefined\n\n  let agent: Agent | undefined\n  let agentVersion: SemVer | undefined\n  if (pkgManager) {\n    // A valid \"packageManager\" field value is \"<package manager name>@<version>\".\n    // https://nodejs.org/api/packages.html#packagemanager\n    const atSignIndex = pkgManager.lastIndexOf('@')\n    if (atSignIndex !== -1) {\n      const name = pkgManager.slice(0, atSignIndex) as Agent\n      const version = pkgManager.slice(atSignIndex + 1)\n      if (version && AGENTS.includes(name)) {\n        agent = name\n      }\n    }\n  }\n  if (\n    agent === undefined &&\n    !isHiddenLockFile &&\n    typeof pkgJsonPath === 'string' &&\n    typeof lockName === 'string'\n  ) {\n    agent = LOCKS[lockName] as Agent\n  }\n  if (agent === undefined) {\n    agent = NPM\n    onUnknown?.(pkgManager)\n  }\n  const agentExecPath = await getAgentExecPath(agent)\n  const npmExecPath =\n    agent === NPM ? agentExecPath : await getAgentExecPath(NPM)\n  if (agentVersion === undefined) {\n    agentVersion = await getAgentVersion(agentExecPath, cwd)\n  }\n  if (agent === YARN_CLASSIC && (agentVersion?.major ?? 0) > 1) {\n    agent = YARN_BERRY\n  }\n  // Lazily access constants.maintainedNodeVersions.\n  const { maintainedNodeVersions } = constants\n  // Lazily access constants.minimumVersionByAgent.\n  const minSupportedAgentVersion = constants.minimumVersionByAgent.get(agent)!\n  const minSupportedNodeVersion = maintainedNodeVersions.last\n  const nodeVersion = semver.coerce(process.version)!\n  let lockSrc: string | undefined\n  let pkgAgentRange: string | undefined\n  let pkgNodeRange: string | undefined\n  let pkgMinAgentVersion = minSupportedAgentVersion\n  let pkgMinNodeVersion = minSupportedNodeVersion\n  if (pkgJson) {\n    const { engines } = pkgJson\n    const engineAgentRange = engines?.[agent]\n    const engineNodeRange = engines?.['node']\n    if (isNonEmptyString(engineAgentRange)) {\n      pkgAgentRange = engineAgentRange\n      // Roughly check agent range as semver.coerce will strip leading\n      // v's, carets (^), comparators (<,<=,>,>=,=), and tildes (~).\n      const coerced = semver.coerce(pkgAgentRange)\n      if (coerced && semver.lt(coerced, pkgMinAgentVersion)) {\n        pkgMinAgentVersion = coerced.version\n      }\n    }\n    if (isNonEmptyString(engineNodeRange)) {\n      pkgNodeRange = engineNodeRange\n      // Roughly check Node range as semver.coerce will strip leading\n      // v's, carets (^), comparators (<,<=,>,>=,=), and tildes (~).\n      const coerced = semver.coerce(pkgNodeRange)\n      if (coerced && semver.lt(coerced, pkgMinNodeVersion)) {\n        pkgMinNodeVersion = coerced.version\n      }\n    }\n    const browserslistQuery = pkgJson['browserslist'] as string[] | undefined\n    if (Array.isArray(browserslistQuery)) {\n      // List Node targets in ascending version order.\n      const browserslistNodeTargets = browserslist(browserslistQuery)\n        .filter(v => /^node /i.test(v))\n        .map(v => v.slice(5 /*'node '.length*/))\n        .sort(naturalCompare)\n      if (browserslistNodeTargets.length) {\n        // browserslistNodeTargets[0] is the lowest Node target version.\n        const coerced = semver.coerce(browserslistNodeTargets[0])\n        if (coerced && semver.lt(coerced, pkgMinNodeVersion)) {\n          pkgMinNodeVersion = coerced.version\n        }\n      }\n    }\n    lockSrc =\n      typeof lockPath === 'string'\n        ? await readLockFileByAgent.get(agent)!(lockPath, agentExecPath)\n        : undefined\n  } else {\n    lockName = undefined\n    lockPath = undefined\n  }\n  // Does the system agent version meet our minimum supported agent version?\n  const agentSupported =\n    !!agentVersion &&\n    semver.satisfies(agentVersion, `>=${minSupportedAgentVersion}`)\n\n  // Does the system Node version meet our minimum supported Node version?\n  const nodeSupported = semver.satisfies(\n    nodeVersion,\n    `>=${minSupportedNodeVersion}`\n  )\n\n  const npmBuggyOverrides =\n    agent === NPM &&\n    !!agentVersion &&\n    semver.lt(agentVersion, NPM_BUGGY_OVERRIDES_PATCHED_VERSION)\n\n  return {\n    agent,\n    agentExecPath,\n    agentSupported,\n    agentVersion,\n    features: { npmBuggyOverrides },\n    lockName,\n    lockPath,\n    lockSrc,\n    nodeSupported,\n    nodeVersion,\n    npmExecPath,\n    pkgJson: editablePkgJson,\n    pkgPath,\n    pkgRequirements: {\n      agent: pkgAgentRange ?? `>=${pkgMinAgentVersion}`,\n      node: pkgNodeRange ?? `>=${pkgMinNodeVersion}`\n    },\n    pkgSupports: {\n      // Does our minimum supported agent version meet the package's requirements?\n      agent: semver.satisfies(\n        minSupportedAgentVersion,\n        `>=${pkgMinAgentVersion}`\n      ),\n      // Does our supported Node versions meet the package's requirements?\n      node: maintainedNodeVersions.some(v =>\n        semver.satisfies(v, `>=${pkgMinNodeVersion}`)\n      )\n    }\n  }\n}\n\nexport type DetectAndValidateOptions = {\n  cmdName?: string | undefined\n  logger?: Logger | undefined\n  prod?: boolean | undefined\n}\nexport async function detectAndValidatePackageEnvironment(\n  cwd: string,\n  options?: DetectAndValidateOptions | undefined\n): Promise<void | EnvDetails> {\n  const {\n    cmdName = '',\n    logger,\n    prod\n  } = {\n    __proto__: null,\n    ...options\n  } as DetectAndValidateOptions\n  const details = await detectPackageEnvironment({\n    cwd,\n    onUnknown(pkgManager: string | undefined) {\n      logger?.warn(\n        cmdPrefixMessage(\n          cmdName,\n          `Unknown package manager${pkgManager ? ` ${pkgManager}` : ''}, defaulting to npm`\n        )\n      )\n    }\n  })\n  const { agent, nodeVersion, pkgRequirements } = details\n  const agentVersion = details.agentVersion ?? 'unknown'\n  if (!details.agentSupported) {\n    const minVersion = constants.minimumVersionByAgent.get(agent)!\n    logger?.fail(\n      cmdPrefixMessage(\n        cmdName,\n        `Requires ${agent} >=${minVersion}. Current version: ${agentVersion}.`\n      )\n    )\n    return\n  }\n  if (!details.nodeSupported) {\n    const minVersion = constants.maintainedNodeVersions.last\n    logger?.fail(\n      cmdPrefixMessage(\n        cmdName,\n        `Requires Node >=${minVersion}. Current version: ${nodeVersion}.`\n      )\n    )\n    return\n  }\n  if (!details.pkgSupports.agent) {\n    logger?.fail(\n      cmdPrefixMessage(\n        cmdName,\n        `Package engine \"${agent}\" requires ${pkgRequirements.agent}. Current version: ${agentVersion}`\n      )\n    )\n    return\n  }\n  if (!details.pkgSupports.node) {\n    logger?.fail(\n      cmdPrefixMessage(\n        cmdName,\n        `Package engine \"node\" requires ${pkgRequirements.node}. Current version: ${nodeVersion}`\n      )\n    )\n    return\n  }\n  if (agent === VLT) {\n    logger?.fail(\n      cmdPrefixMessage(\n        cmdName,\n        `${agent} does not support overrides. Soon, though ⚡`\n      )\n    )\n    return\n  }\n  const lockName = details.lockName ?? 'lock file'\n  if (details.lockName === undefined || details.lockSrc === undefined) {\n    logger?.fail(cmdPrefixMessage(cmdName, `No ${lockName} found`))\n    return\n  }\n  if (details.lockSrc.trim() === '') {\n    logger?.fail(cmdPrefixMessage(cmdName, `${lockName} is empty`))\n    return\n  }\n  if (details.pkgPath === undefined) {\n    logger?.fail(cmdPrefixMessage(cmdName, `No ${PACKAGE_JSON} found`))\n    return\n  }\n  if (prod && (agent === BUN || agent === YARN_BERRY)) {\n    logger?.fail(\n      cmdPrefixMessage(\n        cmdName,\n        `--prod not supported for ${agent}${agentVersion ? `@${agentVersion}` : ''}`\n      )\n    )\n    return\n  }\n  if (\n    details.lockPath &&\n    path.relative(cwd, details.lockPath).startsWith('.')\n  ) {\n    logger?.warn(\n      cmdPrefixMessage(\n        cmdName,\n        `Package ${lockName} found at ${details.lockPath}`\n      )\n    )\n  }\n  return details as EnvDetails\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { npmFix } from './npm-fix'\nimport { pnpmFix } from './pnpm-fix'\nimport constants from '../../constants'\nimport { detectAndValidatePackageEnvironment } from '../../utils/package-environment'\n\nconst { NPM, PNPM } = constants\n\nconst CMD_NAME = 'socket fix'\n\nexport async function runFix() {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start()\n\n  const cwd = process.cwd()\n\n  const pkgEnvDetails = await detectAndValidatePackageEnvironment(cwd, {\n    cmdName: CMD_NAME,\n    logger\n  })\n  if (!pkgEnvDetails) {\n    spinner.stop()\n    return\n  }\n\n  switch (pkgEnvDetails.agent) {\n    case NPM: {\n      await npmFix(pkgEnvDetails, cwd)\n      break\n    }\n    case PNPM: {\n      await pnpmFix(pkgEnvDetails, cwd)\n      break\n    }\n  }\n  spinner.successAndStop('Socket.dev fix successful')\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { runFix } from './run-fix'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'fix',\n  description: 'Fix \"fixable\" Socket alerts',\n  hidden: true,\n  flags: {\n    ...commonFlags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command}\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n  `\n}\n\nexport const cmdFix = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await runFix()\n}\n","import constants from '../../constants'\nimport { getSeverityCount } from '../../utils/alert/severity'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { getPublicToken, setupSdk } from '../../utils/sdk'\n\nimport type { PackageData } from './handle-package-info'\n\nexport async function fetchPackageInfo(\n  pkgName: string,\n  pkgVersion: string,\n  includeAllIssues: boolean\n): Promise<void | PackageData> {\n  const socketSdk = await setupSdk(getPublicToken())\n\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start(\n    pkgVersion === 'latest'\n      ? `Looking up data for the latest version of ${pkgName}`\n      : `Looking up data for version ${pkgVersion} of ${pkgName}`\n  )\n\n  const result = await handleApiCall(\n    socketSdk.getIssuesByNPMPackage(pkgName, pkgVersion),\n    'looking up package'\n  )\n  const scoreResult = await handleApiCall(\n    socketSdk.getScoreByNPMPackage(pkgName, pkgVersion),\n    'looking up package score'\n  )\n\n  spinner.successAndStop('Data fetched')\n\n  if (result.success === false) {\n    return handleUnsuccessfulApiResponse('getIssuesByNPMPackage', result)\n  }\n\n  if (scoreResult.success === false) {\n    return handleUnsuccessfulApiResponse('getScoreByNPMPackage', scoreResult)\n  }\n\n  const severityCount = getSeverityCount(\n    result.data,\n    includeAllIssues ? undefined : 'high'\n  )\n\n  return {\n    data: result.data,\n    severityCount,\n    score: scoreResult.data\n  }\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport constants from '@socketsecurity/registry/lib/constants'\nimport { logger } from '@socketsecurity/registry/lib/logger'\nimport { hasKeys } from '@socketsecurity/registry/lib/objects'\n\nimport { SEVERITY, formatSeverityCount } from '../../utils/alert/severity'\nimport { ColorOrMarkdown } from '../../utils/color-or-markdown'\nimport {\n  getSocketDevAlertUrl,\n  getSocketDevPackageOverviewUrl\n} from '../../utils/socket-url'\n\nimport type { PackageData } from './handle-package-info'\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nconst { NPM } = constants\n\nfunction formatScore(score: number): string {\n  if (score > 80) {\n    return colors.green(`${score}`)\n  } else if (score < 80 && score > 60) {\n    return colors.yellow(`${score}`)\n  }\n  return colors.red(`${score}`)\n}\n\nfunction outputPackageIssuesDetails(\n  packageData: SocketSdkReturnType<'getIssuesByNPMPackage'>['data'],\n  outputMarkdown: boolean\n) {\n  const issueDetails = packageData.filter(\n    d =>\n      d.value?.severity === SEVERITY.critical ||\n      d.value?.severity === SEVERITY.high\n  )\n  const uniqueIssueDetails = issueDetails.reduce((acc, issue) => {\n    const { type } = issue\n    if (type) {\n      const details = acc.get(type)\n      if (details) {\n        details.count += 1\n      } else {\n        acc.set(type, {\n          label: issue.value?.label ?? '',\n          count: 1\n        })\n      }\n    }\n    return acc\n  }, new Map<string, { count: number; label: string }>())\n  const format = new ColorOrMarkdown(outputMarkdown)\n  for (const [type, details] of uniqueIssueDetails.entries()) {\n    const issueWithLink = format.hyperlink(\n      details.label,\n      getSocketDevAlertUrl(type),\n      { fallbackToUrl: true }\n    )\n    if (details.count === 1) {\n      logger.log(`- ${issueWithLink}`)\n    } else {\n      logger.log(`- ${issueWithLink}: ${details.count}`)\n    }\n  }\n}\n\nexport function outputPackageInfo(\n  { data, score, severityCount }: PackageData,\n  {\n    name,\n    outputKind,\n    pkgName,\n    pkgVersion\n  }: {\n    includeAllIssues: boolean\n    name: string\n    outputKind: 'json' | 'markdown' | 'print'\n    pkgName: string\n    pkgVersion: string\n  }\n): void {\n  if (outputKind === 'json') {\n    logger.log(JSON.stringify(data, undefined, 2))\n    return\n  }\n  if (outputKind === 'markdown') {\n    logger.log(stripIndents`\n      # Package report for ${pkgName}\n\n      Package report card:\n    `)\n  } else {\n    logger.log(`Package report card for ${pkgName}:`)\n  }\n  const scoreResult = {\n    'Supply Chain Risk': Math.floor(score.supplyChainRisk.score * 100),\n    Maintenance: Math.floor(score.maintenance.score * 100),\n    Quality: Math.floor(score.quality.score * 100),\n    Vulnerabilities: Math.floor(score.vulnerability.score * 100),\n    License: Math.floor(score.license.score * 100)\n  }\n  logger.log('\\n')\n  Object.entries(scoreResult).map(score =>\n    logger.log(`- ${score[0]}: ${formatScore(score[1])}`)\n  )\n  logger.log('\\n')\n  if (hasKeys(severityCount)) {\n    if (outputKind === 'markdown') {\n      logger.log('# Issues\\n')\n    }\n    logger.log(\n      `Package has these issues: ${formatSeverityCount(severityCount)}\\n`\n    )\n    outputPackageIssuesDetails(data, outputKind === 'markdown')\n  } else {\n    logger.log('Package has no issues')\n  }\n\n  const format = new ColorOrMarkdown(outputKind === 'markdown')\n  const url = getSocketDevPackageOverviewUrl(NPM, pkgName, pkgVersion)\n\n  logger.log('\\n')\n  if (pkgVersion === 'latest') {\n    logger.log(\n      `Detailed info on socket.dev: ${format.hyperlink(`${pkgName}`, url, { fallbackToUrl: true })}`\n    )\n  } else {\n    logger.log(\n      `Detailed info on socket.dev: ${format.hyperlink(`${pkgName} v${pkgVersion}`, url, { fallbackToUrl: true })}`\n    )\n  }\n  if (outputKind !== 'markdown') {\n    logger.log(\n      colors.dim(\n        `\\nOr rerun ${colors.italic(name)} using the ${colors.italic('--json')} flag to get full JSON output`\n      )\n    )\n  } else {\n    logger.log('')\n  }\n}\n","import process from 'node:process'\n\nimport { hasKeys } from '@socketsecurity/registry/lib/objects'\n\nimport { fetchPackageInfo } from './fetch-package-info'\nimport { outputPackageInfo } from './output-package-info'\n\nimport type { SocketSdkAlert } from '../../utils/alert/severity'\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport interface PackageData {\n  data: SocketSdkReturnType<'getIssuesByNPMPackage'>['data']\n  severityCount: Record<SocketSdkAlert['severity'], number>\n  score: SocketSdkReturnType<'getScoreByNPMPackage'>['data']\n}\n\nexport async function handlePackageInfo({\n  commandName,\n  includeAllIssues,\n  outputKind,\n  pkgName,\n  pkgVersion,\n  strict\n}: {\n  commandName: string\n  includeAllIssues: boolean\n  outputKind: 'json' | 'markdown' | 'print'\n  pkgName: string\n  pkgVersion: string\n  strict: boolean\n}) {\n  const packageData = await fetchPackageInfo(\n    pkgName,\n    pkgVersion,\n    includeAllIssues\n  )\n\n  if (packageData) {\n    outputPackageInfo(packageData, {\n      name: commandName,\n      includeAllIssues,\n      outputKind,\n      pkgName,\n      pkgVersion\n    })\n\n    if (strict && hasKeys(packageData.severityCount)) {\n      // Let NodeJS exit gracefully but with exit(1)\n      process.exitCode = 1\n    }\n  }\n}\n","import colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handlePackageInfo } from './handle-package-info'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags, validationFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'info',\n  description: 'Look up info regarding a package',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags,\n    ...validationFlags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <name>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} webtorrent\n      $ ${command} webtorrent@1.9.1\n  `\n}\n\nexport const cmdInfo = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const { all, json, markdown, strict } = cli.flags\n  const [rawPkgName = ''] = cli.input\n\n  if (!rawPkgName || cli.input.length > 1) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\\n\n      - Expecting a package name ${!rawPkgName ? colors.red('(missing!)') : colors.green('(ok)')}\\n\n      - Can only accept one package at a time ${cli.input.length > 1 ? colors.red('(got ' + cli.input.length + '!)') : colors.green('(ok)')}\\n`)\n    return\n  }\n\n  const versionSeparator = rawPkgName.lastIndexOf('@')\n  const pkgName =\n    versionSeparator < 1 ? rawPkgName : rawPkgName.slice(0, versionSeparator)\n  const pkgVersion =\n    versionSeparator < 1 ? 'latest' : rawPkgName.slice(versionSeparator + 1)\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handlePackageInfo({\n    commandName: `${parentName} ${config.commandName}`,\n    includeAllIssues: Boolean(all),\n    outputKind: json ? 'json' : markdown ? 'markdown' : 'print',\n    pkgName,\n    pkgVersion,\n    strict: Boolean(strict)\n  })\n}\n","import { updateSetting } from '../../utils/settings'\n\nexport function applyLogin(\n  apiToken: string,\n  enforcedOrgs: string[],\n  apiBaseUrl: string | undefined,\n  apiProxy: string | undefined\n) {\n  updateSetting('enforcedOrgs', enforcedOrgs)\n  updateSetting('apiToken', apiToken)\n  updateSetting('apiBaseUrl', apiBaseUrl)\n  updateSetting('apiProxy', apiProxy)\n}\n","import terminalLink from 'terminal-link'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\nimport { confirm, password, select } from '@socketsecurity/registry/lib/prompts'\n\nimport { applyLogin } from './apply-login'\nimport constants from '../../constants'\nimport { AuthError } from '../../utils/errors'\nimport { setupSdk } from '../../utils/sdk'\nimport { getSetting } from '../../utils/settings'\n\nimport type { Choice, Separator } from '@socketsecurity/registry/lib/prompts'\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\ntype OrgChoice = Choice<string>\ntype OrgChoices = Array<Separator | OrgChoice>\nconst { SOCKET_PUBLIC_API_TOKEN } = constants\n\nexport async function attemptLogin(\n  apiBaseUrl: string | undefined,\n  apiProxy: string | undefined\n) {\n  apiBaseUrl ??= getSetting('apiBaseUrl') ?? undefined\n  apiProxy ??= getSetting('apiProxy') ?? undefined\n  const apiToken =\n    (await password({\n      message: `Enter your ${terminalLink(\n        'Socket.dev API key',\n        'https://docs.socket.dev/docs/api-keys'\n      )} (leave blank for a public key)`\n    })) || SOCKET_PUBLIC_API_TOKEN\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Verifying API key...')\n\n  let orgs: SocketSdkReturnType<'getOrganizations'>['data']\n  try {\n    const sdk = await setupSdk(apiToken, apiBaseUrl, apiProxy)\n    const result = await sdk.getOrganizations()\n    if (!result.success) {\n      throw new AuthError()\n    }\n    orgs = result.data\n    spinner.success('API key verified')\n  } catch {\n    spinner.errorAndStop('Invalid API key')\n    return\n  }\n\n  const enforcedChoices: OrgChoices = Object.values(orgs.organizations)\n    .filter(org => org?.plan === 'enterprise')\n    .map(org => ({\n      name: org.name,\n      value: org.id\n    }))\n\n  let enforcedOrgs: string[] = []\n  if (enforcedChoices.length > 1) {\n    const id = (await select(\n      {\n        message:\n          \"Which organization's policies should Socket enforce system-wide?\",\n        choices: enforcedChoices.concat({\n          name: 'None',\n          value: '',\n          description: 'Pick \"None\" if this is a personal device'\n        })\n      },\n      {\n        spinner\n      }\n    )) as string | null\n    if (id) {\n      enforcedOrgs = [id]\n    }\n  } else if (enforcedChoices.length) {\n    const confirmOrg = await confirm(\n      {\n        message: `Should Socket enforce ${(enforcedChoices[0] as OrgChoice)?.name}'s security policies system-wide?`,\n        default: true\n      },\n      {\n        spinner\n      }\n    )\n    if (confirmOrg) {\n      const existing = enforcedChoices[0] as OrgChoice\n      if (existing) {\n        enforcedOrgs = [existing.value]\n      }\n    }\n  }\n\n  spinner.stop()\n\n  const oldToken = getSetting('apiToken')\n  try {\n    applyLogin(apiToken, enforcedOrgs, apiBaseUrl, apiProxy)\n    logger.success(`API credentials ${oldToken ? 'updated' : 'set'}`)\n  } catch {\n    logger.fail(`API login failed`)\n  }\n}\n","import isInteractive from '@socketregistry/is-interactive/index.cjs'\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { attemptLogin } from './attempt-login'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { InputError } from '../../utils/errors'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'login',\n  description: 'Socket API login',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    apiBaseUrl: {\n      type: 'string',\n      description: 'API server to connect to for login'\n    },\n    apiProxy: {\n      type: 'string',\n      description: 'Proxy to use when making connection to API server'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command}\n\n    Logs into the Socket API by prompting for an API key\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command}\n      $ ${command} --api-proxy=http://localhost:1234\n  `\n}\n\nexport const cmdLogin = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const apiBaseUrl = cli.flags['apiBaseUrl'] as string | undefined\n  const apiProxy = cli.flags['apiProxy'] as string | undefined\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  if (!isInteractive()) {\n    throw new InputError(\n      'Cannot prompt for credentials in a non-interactive shell'\n    )\n  }\n\n  await attemptLogin(apiBaseUrl, apiProxy)\n}\n","import { updateSetting } from '../../utils/settings'\n\nexport function applyLogout() {\n  updateSetting('apiToken', null)\n  updateSetting('apiBaseUrl', null)\n  updateSetting('apiProxy', null)\n  updateSetting('enforcedOrgs', null)\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { applyLogout } from './apply-logout'\n\nexport function attemptLogout() {\n  try {\n    applyLogout()\n    logger.success('Successfully logged out')\n  } catch {\n    logger.fail('Failed to complete logout steps')\n  }\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { attemptLogout } from './attempt-logout'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'logout',\n  description: 'Socket API logout',\n  hidden: false,\n  flags: {\n    ...commonFlags\n  },\n  help: (command, _config) => `\n    Usage\n      $ ${command}\n\n    Logs out of the Socket API and clears all Socket credentials from disk\n  `\n}\n\nexport const cmdLogout = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  attemptLogout()\n}\n","import path from 'node:path'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\nimport { spawn } from '@socketsecurity/registry/lib/spawn'\n\nimport constants from '../../constants'\n\nexport async function convertGradleToMaven(\n  target: string,\n  bin: string,\n  _out: string,\n  verbose: boolean,\n  gradleOpts: string[]\n) {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  const rbin = path.resolve(bin)\n  const rtarget = path.resolve(target)\n\n  if (verbose) {\n    logger.group('gradle2maven:')\n    logger.log(`[VERBOSE] - Absolute bin path: \\`${rbin}\\``)\n    logger.log(`[VERBOSE] - Absolute target path: \\`${rtarget}\\``)\n    logger.groupEnd()\n  } else {\n    logger.group('gradle2maven:')\n    logger.log(`- executing: \\`${bin}\\``)\n    logger.log(`- src dir: \\`${target}\\``)\n    logger.groupEnd()\n  }\n\n  try {\n    // Run sbt with the init script we provide which should yield zero or more\n    // pom files. We have to figure out where to store those pom files such that\n    // we can upload them and predict them through the GitHub API. We could do a\n    // .socket folder. We could do a socket.pom.gz with all the poms, although\n    // I'd prefer something plain-text if it is to be committed.\n\n    // Note: init.gradle will be exported by .config/rollup.dist.config.mjs\n    const initLocation = path.join(constants.rootDistPath, 'init.gradle')\n    const commandArgs = ['--init-script', initLocation, ...gradleOpts, 'pom']\n\n    if (verbose) {\n      logger.log('[VERBOSE] Executing:', bin, commandArgs)\n    }\n\n    spinner.start(\n      `Converting gradle to maven from \\`${bin}\\` on \\`${target}\\`...`\n    )\n\n    const output = await spawn(bin, commandArgs, {\n      cwd: target || '.'\n    })\n\n    spinner.stop()\n\n    if (verbose) {\n      logger.group('[VERBOSE] gradle stdout:')\n      logger.log(output)\n      logger.groupEnd()\n    }\n    if (output.stderr) {\n      process.exitCode = 1\n      logger.fail('There were errors while running gradle')\n      // (In verbose mode, stderr was printed above, no need to repeat it)\n      if (!verbose) {\n        logger.group('[VERBOSE] stderr:')\n        logger.error(output.stderr)\n        logger.groupEnd()\n      }\n      return\n    }\n    logger.success('Executed gradle successfully')\n    logger.log('Reported exports:')\n    output.stdout.replace(\n      /^POM file copied to: (.*)/gm,\n      (_all: string, fn: string) => {\n        logger.log('- ', fn)\n        return fn\n      }\n    )\n\n    // const loc = output.stdout?.match(/Wrote (.*?.pom)\\n/)?.[1]?.trim()\n    // if (!loc) {\n    //   logger.fail(\n    //     'There were no errors from sbt but could not find the location of resulting .pom file either'\n    //   )\n    //   process.exit(1)\n    // }\n    //\n    // // Move the pom file to ...? initial cwd? loc will be an absolute path, or dump to stdout\n    // if (out === '-') {\n    //   spinner.start('Result:\\n```')\n    //   spinner.log(await safeReadFile(loc))\n    //   spinner.log('```')\n    //   spinner.successAndStop(`OK`)\n    // } else {\n    //   spinner.start()\n    //   if (verbose) {\n    //     spinner.log(\n    //       `Moving manifest file from \\`${loc.replace(/^\\/home\\/[^/]*?\\//, '~/')}\\` to \\`${out}\\``\n    //     )\n    //   } else {\n    //     spinner.log('Moving output pom file')\n    //   }\n    //   // TODO: do we prefer fs-extra? renaming can be gnarly on windows and fs-extra's version is better\n    //   await renamep(loc, out)\n    //   spinner.successAndStop(`OK. File should be available in \\`${out}\\``)\n    // }\n  } catch (e) {\n    process.exitCode = 1\n    spinner.stop()\n    logger.fail(\n      'There was an unexpected error while running this' +\n        (verbose ? '' : ' (use --verbose for details)')\n    )\n    if (verbose) {\n      logger.group('[VERBOSE] error:')\n      logger.log(e)\n      logger.groupEnd()\n    }\n  }\n}\n","import path from 'node:path'\n\nimport { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { convertGradleToMaven } from './convert_gradle_to_maven'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'gradle',\n  description:\n    '[beta] Use Gradle to generate a manifest file (`pom.xml`) for a Gradle/Java/Kotlin/etc project',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    bin: {\n      type: 'string',\n      description: 'Location of gradlew binary to use, default: CWD/gradlew'\n    },\n    cwd: {\n      type: 'string',\n      description: 'Set the cwd, defaults to process.cwd()'\n    },\n    gradleOpts: {\n      type: 'string',\n      default: '',\n      description:\n        'Additional options to pass on to ./gradlew, see `./gradlew --help`'\n    },\n    out: {\n      type: 'string',\n      default: './socket.pom.xml',\n      description:\n        'Path of output file; where to store the resulting manifest, see also --stdout'\n    },\n    stdout: {\n      type: 'boolean',\n      description: 'Print resulting pom.xml to stdout (supersedes --out)'\n    },\n    task: {\n      type: 'string',\n      default: 'all',\n      description: 'Task to target. By default targets all.'\n    },\n    verbose: {\n      type: 'boolean',\n      description: 'Print debug messages'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} [--gradle=path/to/gradle/binary] [--out=path/to/result] DIR\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Uses gradle, preferably through your local project \\`gradlew\\`, to generate a\n    \\`pom.xml\\` file for each task. If you have no \\`gradlew\\` you can try the\n    global \\`gradle\\` binary but that may not work (hard to predict).\n\n    The \\`pom.xml\\` is a manifest file similar to \\`package.json\\` for npm or\n    or requirements.txt for PyPi), but specifically for Maven, which is Java's\n    dependency repository. Languages like Kotlin and Scala piggy back on it too.\n\n    There are some caveats with the gradle to \\`pom.xml\\` conversion:\n\n    - each task will generate its own xml file and by default it generates one xml\n      for every task.\n\n    - it's possible certain features don't translate well into the xml. If you\n      think something is missing that could be supported please reach out.\n\n    - it works with your \\`gradlew\\` from your repo and local settings and config\n\n    Support is beta. Please report issues or give us feedback on what's missing.\n\n    Examples\n\n      $ ${command} .\n      $ ${command} --gradlew=../gradlew .\n  `\n}\n\nexport const cmdManifestGradle = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const verbose = Boolean(cli.flags['verbose'])\n\n  if (verbose) {\n    logger.group('- ', parentName, config.commandName, ':')\n    logger.group('- flags:', cli.flags)\n    logger.groupEnd()\n    logger.log('- input:', cli.input)\n    logger.groupEnd()\n  }\n\n  const target = cli.input[0]\n\n  // TODO: I'm not sure it's feasible to parse source file from stdin. We could\n  // try, store contents in a file in some folder, target that folder... what\n  // would the file name be?\n  if (!target || target === '-' || cli.input.length > 1) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - The DIR arg is required ${!target ? colors.red('(missing!)') : target === '-' ? colors.red('(stdin is not supported)') : colors.green('(ok)')}\n\n      - Can only accept one DIR (make sure to escape spaces!) ${cli.input.length > 1 ? colors.red(`(received ${cli.input.length}!)`) : colors.green('(ok)')}`)\n    return\n  }\n\n  let bin: string\n  if (cli.flags['bin']) {\n    bin = cli.flags['bin'] as string\n  } else {\n    bin = path.join(target, 'gradlew')\n  }\n\n  let out: string = './socket.pom.xml'\n  if (cli.flags['out']) {\n    out = cli.flags['out'] as string\n  }\n  if (cli.flags['stdout']) {\n    out = '-'\n  }\n\n  if (verbose) {\n    logger.group()\n    logger.log('- target:', target)\n    logger.log('- gradle bin:', bin)\n    logger.log('- out:', out)\n    logger.groupEnd()\n  }\n\n  let gradleOpts: string[] = []\n  if (cli.flags['gradleOpts']) {\n    gradleOpts = (cli.flags['gradleOpts'] as string)\n      .split(' ')\n      .map(s => s.trim())\n      .filter(Boolean)\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await convertGradleToMaven(target, bin, out, verbose, gradleOpts)\n}\n","import path from 'node:path'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\nimport { spawn } from '@socketsecurity/registry/lib/spawn'\n\nimport constants from '../../constants'\nimport { safeReadFile } from '../../utils/fs'\n\nexport async function convertSbtToMaven(\n  target: string,\n  bin: string,\n  out: string,\n  verbose: boolean,\n  sbtOpts: string[]\n) {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n  const rbin = path.resolve(bin)\n  const rtarget = path.resolve(target)\n\n  if (verbose) {\n    logger.group('sbt2maven:')\n    logger.log(`[VERBOSE] - Absolute bin path: \\`${rbin}\\``)\n    logger.log(`[VERBOSE] - Absolute target path: \\`${rtarget}\\``)\n    // logger.log(`[VERBOSE] - Absolute out path: \\`${rout}\\``)\n    logger.groupEnd()\n  } else {\n    logger.group('sbt2maven:')\n    logger.log(`- executing: \\`${bin}\\``)\n    logger.log(`- src dir: \\`${target}\\``)\n    // logger.log(`- dst dir: \\`${out}\\``)\n    logger.groupEnd()\n  }\n\n  try {\n    spinner.start(`Converting sbt to maven from \\`${bin}\\` on \\`${target}\\`...`)\n\n    // Run sbt with the init script we provide which should yield zero or more\n    // pom files. We have to figure out where to store those pom files such that\n    // we can upload them and predict them through the GitHub API. We could do a\n    // .socket folder. We could do a socket.pom.gz with all the poms, although\n    // I'd prefer something plain-text if it is to be committed.\n    const output = await spawn(bin, ['makePom'].concat(sbtOpts), {\n      cwd: target || '.'\n    })\n\n    spinner.stop()\n\n    if (verbose) {\n      logger.group('[VERBOSE] sbt stdout:')\n      logger.log(output)\n      logger.groupEnd()\n    }\n    if (output.stderr) {\n      process.exitCode = 1\n      logger.fail('There were errors while running sbt')\n      // (In verbose mode, stderr was printed above, no need to repeat it)\n      if (!verbose) {\n        logger.group('[VERBOSE] stderr:')\n        logger.error(output.stderr)\n        logger.groupEnd()\n      }\n      return\n    }\n    const poms: string[] = []\n    output.stdout.replace(/Wrote (.*?.pom)\\n/g, (_all: string, fn: string) => {\n      poms.push(fn)\n      return fn\n    })\n    if (!poms.length) {\n      process.exitCode = 1\n      logger.fail(\n        'There were no errors from sbt but it seems to not have generated any poms either'\n      )\n      return\n    }\n    // Move the pom file to ...? initial cwd? loc will be an absolute path, or dump to stdout\n    // TODO: what to do with multiple output files? Do we want to dump them to stdout? Raw or with separators or ?\n    // TODO: maybe we can add an option to target a specific file to dump to stdout\n    if (out === '-' && poms.length === 1) {\n      logger.log('Result:\\n```')\n      logger.log(await safeReadFile(poms[0]!))\n      logger.log('```')\n      logger.success(`OK`)\n    } else if (out === '-') {\n      process.exitCode = 1\n      logger.fail(\n        'Requested out target was stdout but there are multiple generated files'\n      )\n      poms.forEach(fn => logger.error('-', fn))\n      logger.error('Exiting now...')\n      return\n    } else {\n      // if (verbose) {\n      //   logger.log(\n      //     `Moving manifest file from \\`${loc.replace(/^\\/home\\/[^/]*?\\//, '~/')}\\` to \\`${out}\\``\n      //   )\n      // } else {\n      //   logger.log('Moving output pom file')\n      // }\n      // TODO: do we prefer fs-extra? renaming can be gnarly on windows and fs-extra's version is better\n      // await renamep(loc, out)\n      logger.success(`Generated ${poms.length} pom files`)\n      poms.forEach(fn => logger.log('-', fn))\n      logger.success(`OK`)\n    }\n  } catch (e) {\n    process.exitCode = 1\n    spinner.stop()\n    logger.fail(\n      'There was an unexpected error while running this' +\n        (verbose ? '' : ' (use --verbose for details)')\n    )\n    if (verbose) {\n      logger.group('[VERBOSE] error:')\n      logger.log(e)\n      logger.groupEnd()\n    }\n  }\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { convertSbtToMaven } from './convert_sbt_to_maven'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'scala',\n  description:\n    \"[beta] Generate a manifest file (`pom.xml`) from Scala's `build.sbt` file\",\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    bin: {\n      type: 'string',\n      default: 'sbt',\n      description: 'Location of sbt binary to use'\n    },\n    cwd: {\n      type: 'string',\n      description: 'Set the cwd, defaults to process.cwd()'\n    },\n    out: {\n      type: 'string',\n      default: './socket.pom.xml',\n      description:\n        'Path of output file; where to store the resulting manifest, see also --stdout'\n    },\n    stdout: {\n      type: 'boolean',\n      description: 'Print resulting pom.xml to stdout (supersedes --out)'\n    },\n    sbtOpts: {\n      type: 'string',\n      default: '',\n      description: 'Additional options to pass on to sbt, as per `sbt --help`'\n    },\n    verbose: {\n      type: 'boolean',\n      description: 'Print debug messages'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} [--sbt=path/to/sbt/binary] [--out=path/to/result] FILE|DIR\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Uses \\`sbt makePom\\` to generate a \\`pom.xml\\` from your \\`build.sbt\\` file.\n    This xml file is the dependency manifest (like a package.json\n    for Node.js or requirements.txt for PyPi), but specifically for Scala.\n\n    There are some caveats with \\`build.sbt\\` to \\`pom.xml\\` conversion:\n\n    - the xml is exported as socket.pom.xml as to not confuse existing build tools\n      but it will first hit your /target/sbt<version> folder (as a different name)\n\n    - the pom.xml format (standard by Scala) does not support certain sbt features\n      - \\`excludeAll()\\`, \\`dependencyOverrides\\`, \\`force()\\`, \\`relativePath\\`\n      - For details: https://www.scala-sbt.org/1.x/docs/Library-Management.html\n\n    - it uses your sbt settings and local configuration verbatim\n\n    - it can only export one target per run, so if you have multiple targets like\n      development and production, you must run them separately.\n\n    You can optionally configure the path to the \\`sbt\\` bin to invoke.\n\n    Support is beta. Please report issues or give us feedback on what's missing.\n\n    This is only for SBT. If your Scala setup uses gradle, please see the help\n    sections for \\`socket manifest gradle\\` or \\`socket cdxgen\\`.\n\n    Examples\n\n      $ ${command} ./build.sbt\n      $ ${command} --bin=/usr/bin/sbt ./build.sbt\n  `\n}\n\nexport const cmdManifestScala = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const verbose = Boolean(cli.flags['verbose'])\n\n  if (verbose) {\n    logger.group('- ', parentName, config.commandName, ':')\n    logger.group('- flags:', cli.flags)\n    logger.groupEnd()\n    logger.log('- input:', cli.input)\n    logger.groupEnd()\n  }\n\n  const target = cli.input[0]\n\n  // TODO: I'm not sure it's feasible to parse source file from stdin. We could\n  // try, store contents in a file in some folder, target that folder... what\n  // would the file name be?\n  if (!target || target === '-' || cli.input.length > 1) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - The DIR or FILE arg is required ${!target ? colors.red('(missing!)') : target === '-' ? colors.red('(stdin is not supported)') : colors.green('(ok)')}\n\n      - Can only accept one DIR or FILE (make sure to escape spaces!) ${cli.input.length > 1 ? colors.red(`(received ${cli.input.length}!)`) : colors.green('(ok)')}`\n    )\n    return\n  }\n\n  let bin: string = 'sbt'\n  if (cli.flags['bin']) {\n    bin = cli.flags['bin'] as string\n  }\n\n  let out: string = './socket.pom.xml'\n  if (cli.flags['out']) {\n    out = cli.flags['out'] as string\n  }\n  if (cli.flags['stdout']) {\n    out = '-'\n  }\n\n  if (verbose) {\n    logger.group()\n    logger.log('- target:', target)\n    logger.log('- gradle bin:', bin)\n    logger.log('- out:', out)\n    logger.groupEnd()\n  }\n\n  let sbtOpts: string[] = []\n  if (cli.flags['sbtOpts']) {\n    sbtOpts = (cli.flags['sbtOpts'] as string)\n      .split(' ')\n      .map(s => s.trim())\n      .filter(Boolean)\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await convertSbtToMaven(target, bin, out, verbose, sbtOpts)\n}\n","import { existsSync } from 'node:fs'\nimport path from 'node:path'\n\nimport meow from 'meow'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { cmdManifestGradle } from './cmd-manifest-gradle'\nimport { cmdManifestScala } from './cmd-manifest-scala'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'auto',\n  description: 'Auto-detect build and attempt to generate manifest file',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    cwd: {\n      type: 'string',\n      description: 'Set the cwd, defaults to process.cwd()'\n    },\n    verbose: {\n      type: 'boolean',\n      default: false,\n      description: 'Enable debug output, may help when running into errors'\n    }\n    // TODO: support output flags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command}\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Tries to figure out what language your current repo uses. If it finds a\n    supported case then it will try to generate the manifest file for that\n    language with the default or detected settings.\n  `\n}\n\nexport const cmdManifestAuto = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n  const verbose = !!cli.flags['verbose']\n  const cwd = (cli.flags['cwd'] as string) ?? process.cwd()\n\n  if (verbose) {\n    logger.group('- ', parentName, config.commandName, ':')\n    logger.group('- flags:', cli.flags)\n    logger.groupEnd()\n    logger.log('- input:', cli.input)\n    logger.log('- cwd:', cwd)\n    logger.groupEnd()\n  }\n\n  const subArgs = []\n  if (verbose) {\n    subArgs.push('--verbose')\n  }\n\n  const dir = cwd\n\n  if (existsSync(path.join(dir, 'build.sbt'))) {\n    logger.log('Detected a Scala sbt build, running default Scala generator...')\n    if (cwd) {\n      subArgs.push('--cwd', cwd)\n    }\n    subArgs.push(dir)\n    if (cli.flags['dryRun']) {\n      logger.log(DRY_RUN_BAIL_TEXT)\n      return\n    }\n    await cmdManifestScala.run(subArgs, importMeta, { parentName })\n    return\n  }\n\n  if (existsSync(path.join(dir, 'gradlew'))) {\n    logger.log('Detected a gradle build, running default gradle generator...')\n    if (cwd) {\n      // This command takes the cwd as first arg.\n      subArgs.push(cwd)\n    }\n    if (cli.flags['dryRun']) {\n      logger.log(DRY_RUN_BAIL_TEXT)\n      return\n    }\n    await cmdManifestGradle.run(subArgs, importMeta, { parentName })\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  // Show new help screen and exit.\n  meow(\n    `\n    $ ${parentName} ${config.commandName}\n\n    Unfortunately this script did not discover a supported language in the\n    current folder.\n\n    - Make sure this script would work with your target build\n    - Make sure to run it from the correct folder\n    - Make sure the necessary build tools are available (\\`PATH\\`)\n\n    If that doesn't work, see \\`${parentName} <lang> --help\\` for config details for\n    your target language.\n  `,\n    {\n      argv: [],\n      description: config.description,\n      importMeta\n    }\n  ).showHelp()\n}\n","import path from 'node:path'\n\nimport { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { convertGradleToMaven } from './convert_gradle_to_maven'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\n// TODO: we may want to dedupe some pieces for all gradle languages. I think it\n//       makes sense to have separate commands for them and I think it makes\n//       sense for the help panels to note the requested language, rather than\n//       `socket manifest kotlin` to print help screens with `gradle` as the\n//       command. Room for improvement.\nconst config: CliCommandConfig = {\n  commandName: 'kotlin',\n  description:\n    '[beta] Use Gradle to generate a manifest file (`pom.xml`) for a Kotlin project',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    bin: {\n      type: 'string',\n      description: 'Location of gradlew binary to use, default: CWD/gradlew'\n    },\n    cwd: {\n      type: 'string',\n      description: 'Set the cwd, defaults to process.cwd()'\n    },\n    gradleOpts: {\n      type: 'string',\n      default: '',\n      description:\n        'Additional options to pass on to ./gradlew, see `./gradlew --help`'\n    },\n    out: {\n      type: 'string',\n      default: './socket.pom.xml',\n      description:\n        'Path of output file; where to store the resulting manifest, see also --stdout'\n    },\n    stdout: {\n      type: 'boolean',\n      description: 'Print resulting pom.xml to stdout (supersedes --out)'\n    },\n    task: {\n      type: 'string',\n      default: 'all',\n      description: 'Task to target. By default targets all.'\n    },\n    verbose: {\n      type: 'boolean',\n      description: 'Print debug messages'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} [--gradle=path/to/gradle/binary] [--out=path/to/result] DIR\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Uses gradle, preferably through your local project \\`gradlew\\`, to generate a\n    \\`pom.xml\\` file for each task. If you have no \\`gradlew\\` you can try the\n    global \\`gradle\\` binary but that may not work (hard to predict).\n\n    The \\`pom.xml\\` is a manifest file similar to \\`package.json\\` for npm or\n    or requirements.txt for PyPi), but specifically for Maven, which is Java's\n    dependency repository. Languages like Kotlin and Scala piggy back on it too.\n\n    There are some caveats with the gradle to \\`pom.xml\\` conversion:\n\n    - each task will generate its own xml file and by default it generates one xml\n      for every task. (This may be a good thing!)\n\n    - it's possible certain features don't translate well into the xml. If you\n      think something is missing that could be supported please reach out.\n\n    - it works with your \\`gradlew\\` from your repo and local settings and config\n\n    Support is beta. Please report issues or give us feedback on what's missing.\n\n    Examples\n\n      $ ${command} .\n      $ ${command} --gradlew=../gradlew .\n  `\n}\n\nexport const cmdManifestKotlin = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const verbose = Boolean(cli.flags['verbose'])\n\n  if (verbose) {\n    logger.group('- ', parentName, config.commandName, ':')\n    logger.group('- flags:', cli.flags)\n    logger.groupEnd()\n    logger.log('- input:', cli.input)\n    logger.groupEnd()\n  }\n\n  const target = cli.input[0]\n\n  // TODO: I'm not sure it's feasible to parse source file from stdin. We could\n  // try, store contents in a file in some folder, target that folder... what\n  // would the file name be?\n  if (!target || target === '-' || cli.input.length > 1) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - The DIR arg is required ${!target ? colors.red('(missing!)') : target === '-' ? colors.red('(stdin is not supported)') : colors.green('(ok)')}\n\n      - Can only accept one DIR (make sure to escape spaces!) ${cli.input.length > 1 ? colors.red(`(received ${cli.input.length}!)`) : colors.green('(ok)')}`\n    )\n    return\n  }\n\n  let bin: string\n  if (cli.flags['bin']) {\n    bin = cli.flags['bin'] as string\n  } else {\n    bin = path.join(target, 'gradlew')\n  }\n\n  let out: string = './socket.pom.xml'\n  if (cli.flags['out']) {\n    out = cli.flags['out'] as string\n  }\n  if (cli.flags['stdout']) {\n    out = '-'\n  }\n\n  if (verbose) {\n    logger.group()\n    logger.log('- target:', target)\n    logger.log('- gradle bin:', bin)\n    logger.log('- out:', out)\n    logger.groupEnd()\n  }\n\n  let gradleOpts: string[] = []\n  if (cli.flags['gradleOpts']) {\n    gradleOpts = (cli.flags['gradleOpts'] as string)\n      .split(' ')\n      .map(s => s.trim())\n      .filter(Boolean)\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await convertGradleToMaven(target, bin, out, verbose, gradleOpts)\n}\n","import { cmdManifestAuto } from './cmd-manifest-auto'\nimport { cmdManifestGradle } from './cmd-manifest-gradle'\nimport { cmdManifestKotlin } from './cmd-manifest-kotlin'\nimport { cmdManifestScala } from './cmd-manifest-scala'\nimport { commonFlags } from '../../flags'\nimport { meowWithSubcommands } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst config: CliCommandConfig = {\n  commandName: 'manifest',\n  description: 'Generate a dependency manifest for given file or dir',\n  hidden: false,\n  flags: {\n    ...commonFlags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <language> <target>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Generates a declarative dependency manifest (like a package.json for Node.JS\n    or requirements.txt for PyPi), but for certain supported ecosystems\n    where it's common to use a dynamic manifest, like Scala's sbt.\n\n    Only certain languages are supported and there may be language specific\n    configurations available. See \\`manifest <language> --help\\` for usage details\n    per language.\n\n    Currently supported language: scala [beta], gradle [beta], kotlin (through\n    gradle) [beta].\n\n    Examples\n\n      $ ${command} scala .\n\n    To have it auto-detect and attempt to run:\n\n      $ ${command} yolo\n  `\n}\n\nexport const cmdManifest = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  await meowWithSubcommands(\n    {\n      auto: cmdManifestAuto,\n      scala: cmdManifestScala,\n      gradle: cmdManifestGradle,\n      kotlin: cmdManifestKotlin\n    },\n    {\n      argv,\n      aliases: {\n        yolo: {\n          description: config.description,\n          hidden: true,\n          argv: ['auto']\n        }\n      },\n      description: config.description,\n      importMeta,\n      flags: config.flags,\n      name: `${parentName} ${config.commandName}`\n    }\n  )\n}\n","import constants from '../../constants'\n\nconst { NPM } = constants\n\nexport async function wrapNpm(argv: readonly string[]) {\n  // Lazily access constants.distShadowNpmBinPath.\n  const shadowBin = require(constants.distShadowNpmBinPath)\n  await shadowBin(NPM, argv)\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { wrapNpm } from './wrap-npm'\nimport constants from '../../constants'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT, NPM } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'npm',\n  description: `${NPM} wrapper functionality`,\n  hidden: false,\n  flags: {},\n  help: (command, _config) => `\n    Usage\n      $ ${command}\n  `\n}\n\nexport const cmdNpm = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    allowUnknownFlags: true,\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await wrapNpm(argv)\n}\n","import constants from '../../constants'\n\nconst { NPX } = constants\n\nexport async function wrapNpx(argv: readonly string[]) {\n  // Lazily access constants.distShadowNpmBinPath.\n  const shadowBin = require(constants.distShadowNpmBinPath)\n  await shadowBin(NPX, argv)\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { wrapNpx } from './wrap-npx'\nimport constants from '../../constants'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT, NPX } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'npx',\n  description: `${NPX} wrapper functionality`,\n  hidden: false,\n  flags: {},\n  help: (command, _config) => `\n    Usage\n      $ ${command}\n  `\n}\n\nexport const cmdNpx = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    allowUnknownFlags: true,\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await wrapNpx(argv)\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'oops',\n  description: 'Trigger an intentional error (for development)',\n  hidden: true,\n  flags: {\n    ...commonFlags\n  },\n  help: (parentName, config) => `\n    Usage\n      $ ${parentName} ${config.commandName}\n\n    Don't run me.\n  `\n}\n\nexport const cmdOops = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  throw new Error('This error was intentionally left blank')\n}\n","import constants from '../../constants'\n\nimport type { Agent } from '../../utils/package-environment'\n\ntype AgentDepsIncludesFn = (stdout: string, name: string) => boolean\n\nconst { BUN, NPM, PNPM, VLT, YARN_BERRY, YARN_CLASSIC } = constants\n\nfunction matchLsCmdViewHumanStdout(stdout: string, name: string) {\n  return stdout.includes(` ${name}@`)\n}\n\nfunction matchQueryCmdStdout(stdout: string, name: string) {\n  return stdout.includes(`\"${name}\"`)\n}\n\nexport const depsIncludesByAgent = new Map<Agent, AgentDepsIncludesFn>([\n  [BUN, matchLsCmdViewHumanStdout],\n  [NPM, matchQueryCmdStdout],\n  [PNPM, matchQueryCmdStdout],\n  [VLT, matchQueryCmdStdout],\n  [YARN_BERRY, matchLsCmdViewHumanStdout],\n  [YARN_CLASSIC, matchLsCmdViewHumanStdout]\n])\n","import { readPackageJson } from '@socketsecurity/registry/lib/packages'\n\ntype PackageJson = Awaited<ReturnType<typeof readPackageJson>>\n\nexport function getDependencyEntries(pkgJson: PackageJson) {\n  const {\n    dependencies,\n    devDependencies,\n    optionalDependencies,\n    peerDependencies\n  } = pkgJson\n  return [\n    [\n      'dependencies',\n      dependencies ? { __proto__: null, ...dependencies } : undefined\n    ],\n    [\n      'devDependencies',\n      devDependencies ? { __proto__: null, ...devDependencies } : undefined\n    ],\n    [\n      'peerDependencies',\n      peerDependencies ? { __proto__: null, ...peerDependencies } : undefined\n    ],\n    [\n      'optionalDependencies',\n      optionalDependencies\n        ? { __proto__: null, ...optionalDependencies }\n        : undefined\n    ]\n  ].filter(({ 1: o }) => o) as Array<[string, NonNullable<typeof dependencies>]>\n}\n","import { readPackageJson } from '@socketsecurity/registry/lib/packages'\n\nimport constants from '../../constants'\n\nimport type {\n  Agent,\n  StringKeyValueObject\n} from '../../utils/package-environment'\n\ntype PackageJson = Awaited<ReturnType<typeof readPackageJson>>\ntype NpmOverrides = { [key: string]: string | StringKeyValueObject }\ntype PnpmOrYarnOverrides = { [key: string]: string }\ntype Overrides = NpmOverrides | PnpmOrYarnOverrides\ntype GetOverrides = (pkgJson: PackageJson) => GetOverridesResult\ntype GetOverridesResult = { type: Agent; overrides: Overrides }\n\nconst {\n  BUN,\n  NPM,\n  OVERRIDES,\n  PNPM,\n  RESOLUTIONS,\n  VLT,\n  YARN_BERRY,\n  YARN_CLASSIC\n} = constants\n\nfunction getOverridesDataBun(pkgJson: PackageJson) {\n  const overrides = (pkgJson as any)?.[RESOLUTIONS] ?? {}\n  return { type: YARN_BERRY, overrides }\n}\n\n// npm overrides documentation:\n// https://docs.npmjs.com/cli/v10/configuring-npm/package-json#overrides\nfunction getOverridesDataNpm(pkgJson: PackageJson) {\n  const overrides = (pkgJson as any)?.[OVERRIDES] ?? {}\n  return { type: NPM, overrides }\n}\n\n// pnpm overrides documentation:\n// https://pnpm.io/package_json#pnpmoverrides\nfunction getOverridesDataPnpm(pkgJson: PackageJson) {\n  const overrides = (pkgJson as any)?.pnpm?.[OVERRIDES] ?? {}\n  return { type: PNPM, overrides }\n}\n\nfunction getOverridesDataVlt(pkgJson: PackageJson) {\n  const overrides = (pkgJson as any)?.[OVERRIDES] ?? {}\n  return { type: VLT, overrides }\n}\n\n// Yarn resolutions documentation:\n// https://yarnpkg.com/configuration/manifest#resolutions\nfunction getOverridesDataYarn(pkgJson: PackageJson) {\n  const overrides = (pkgJson as any)?.[RESOLUTIONS] ?? {}\n  return { type: YARN_BERRY, overrides }\n}\n\n// Yarn resolutions documentation:\n// https://classic.yarnpkg.com/en/docs/selective-version-resolutions\nfunction getOverridesDataClassic(pkgJson: PackageJson) {\n  const overrides = (pkgJson as any)?.[RESOLUTIONS] ?? {}\n  return { type: YARN_CLASSIC, overrides }\n}\n\nexport const overridesDataByAgent = new Map<Agent, GetOverrides>([\n  [BUN, getOverridesDataBun],\n  [NPM, getOverridesDataNpm],\n  [PNPM, getOverridesDataPnpm],\n  [VLT, getOverridesDataVlt],\n  [YARN_BERRY, getOverridesDataYarn],\n  [YARN_CLASSIC, getOverridesDataClassic]\n])\n","import path from 'node:path'\n\nimport { parse as yamlParse } from 'yaml'\n\nimport { readPackageJson } from '@socketsecurity/registry/lib/packages'\nimport { isNonEmptyString } from '@socketsecurity/registry/lib/strings'\n\nimport constants from '../../constants'\nimport { safeReadFile } from '../../utils/fs'\n\nimport type { Agent } from '../../utils/package-environment'\n\ntype PackageJson = Awaited<ReturnType<typeof readPackageJson>>\n\nconst { PNPM } = constants\n\nconst PNPM_WORKSPACE = `${PNPM}-workspace`\n\nexport async function getWorkspaceGlobs(\n  agent: Agent,\n  pkgPath: string,\n  pkgJson: PackageJson\n): Promise<string[] | undefined> {\n  let workspacePatterns\n  if (agent === PNPM) {\n    for (const workspacePath of [\n      path.join(pkgPath, `${PNPM_WORKSPACE}.yaml`),\n      path.join(pkgPath, `${PNPM_WORKSPACE}.yml`)\n    ]) {\n      // eslint-disable-next-line no-await-in-loop\n      const yml = await safeReadFile(workspacePath)\n      if (yml) {\n        try {\n          workspacePatterns = yamlParse(yml)?.packages\n        } catch {}\n        if (workspacePatterns) {\n          break\n        }\n      }\n    }\n  } else {\n    workspacePatterns = pkgJson['workspaces']\n  }\n  return Array.isArray(workspacePatterns)\n    ? workspacePatterns\n        .filter(isNonEmptyString)\n        .map(workspacePatternToGlobPattern)\n    : undefined\n}\n\nfunction workspacePatternToGlobPattern(workspace: string): string {\n  const { length } = workspace\n  if (!length) {\n    return ''\n  }\n  // If the workspace ends with \"/\"\n  if (workspace.charCodeAt(length - 1) === 47 /*'/'*/) {\n    return `${workspace}/*/package.json`\n  }\n  // If the workspace ends with \"/**\"\n  if (\n    workspace.charCodeAt(length - 1) === 42 /*'*'*/ &&\n    workspace.charCodeAt(length - 2) === 42 /*'*'*/ &&\n    workspace.charCodeAt(length - 3) === 47 /*'/'*/\n  ) {\n    return `${workspace}/*/**/package.json`\n  }\n  // Things like \"packages/a\" or \"packages/*\"\n  return `${workspace}/package.json`\n}\n","import { escapeRegExp } from '@socketsecurity/registry/lib/regexps'\n\nimport constants from '../../constants'\n\nimport type { Agent } from '../../utils/package-environment'\n\nexport type AgentLockIncludesFn = (\n  lockSrc: string,\n  name: string,\n  ext?: string | undefined\n) => boolean\n\nconst { BUN, LOCK_EXT, NPM, PNPM, VLT, YARN_BERRY, YARN_CLASSIC } = constants\n\nfunction includesNpm(lockSrc: string, name: string) {\n  // Detects the package name in the following cases:\n  //   \"name\":\n  return lockSrc.includes(`\"${name}\":`)\n}\n\nfunction includesBun(lockSrc: string, name: string, lockName?: string) {\n  // This is a bit counterintuitive. When lockName ends with a .lockb\n  // we treat it as a yarn.lock. When lockName ends with a .lock we\n  // treat it as a package-lock.json. The bun.lock format is not identical\n  // package-lock.json, however it close enough for npmLockIncludes to work.\n  const lockfileScanner = lockName?.endsWith(LOCK_EXT)\n    ? includesNpm\n    : includesYarn\n  return lockfileScanner(lockSrc, name)\n}\n\nfunction includesPnpm(lockSrc: string, name: string) {\n  const escapedName = escapeRegExp(name)\n  return new RegExp(\n    // Detects the package name in the following cases:\n    //   /name/\n    //   'name'\n    //   name:\n    //   name@\n    `(?<=^\\\\s*)(?:(['/])${escapedName}\\\\1|${escapedName}(?=[:@]))`,\n    'm'\n  ).test(lockSrc)\n}\n\nfunction includesVlt(lockSrc: string, name: string) {\n  // Detects the package name in the following cases:\n  //   \"name\"\n  return lockSrc.includes(`\"${name}\"`)\n}\n\nfunction includesYarn(lockSrc: string, name: string) {\n  const escapedName = escapeRegExp(name)\n  return new RegExp(\n    // Detects the package name in the following cases:\n    //   \"name@\n    //   , \"name@\n    //   name@\n    //   , name@\n    `(?<=(?:^\\\\s*|,\\\\s*)\"?)${escapedName}(?=@)`,\n    'm'\n  ).test(lockSrc)\n}\n\nexport const lockfileIncludesByAgent = new Map<Agent, AgentLockIncludesFn>([\n  [BUN, includesBun],\n  [NPM, includesNpm],\n  [PNPM, includesPnpm],\n  [VLT, includesVlt],\n  [YARN_BERRY, includesYarn],\n  [YARN_CLASSIC, includesYarn]\n])\n","import { spawn } from '@socketsecurity/registry/lib/spawn'\n\nimport constants from '../../constants'\n\nimport type { Agent } from '../../utils/package-environment'\n\ntype AgentListDepsOptions = { npmExecPath?: string }\n\ntype AgentListDepsFn = (\n  agentExecPath: string,\n  cwd: string,\n  options?: AgentListDepsOptions | undefined\n) => Promise<string>\n\nconst { BUN, NPM, PNPM, VLT, YARN_BERRY, YARN_CLASSIC } = constants\n\nfunction cleanupQueryStdout(stdout: string): string {\n  if (stdout === '') {\n    return ''\n  }\n  let pkgs\n  try {\n    pkgs = JSON.parse(stdout)\n  } catch {}\n  if (!Array.isArray(pkgs)) {\n    return ''\n  }\n  const names = new Set<string>()\n  for (const { _id, name, pkgid } of pkgs) {\n    // `npm query` results may not have a \"name\" property, in which case we\n    // fallback to \"_id\" and then \"pkgid\".\n    // `vlt ls --view json` results always have a \"name\" property.\n    const fallback = _id ?? pkgid ?? ''\n    const resolvedName = name ?? fallback.slice(0, fallback.indexOf('@', 1))\n    // Add package names, except for those under the `@types` scope as those\n    // are known to only be dev dependencies.\n    if (resolvedName && !resolvedName.startsWith('@types/')) {\n      names.add(resolvedName)\n    }\n  }\n  return JSON.stringify([...names], null, 2)\n}\n\nfunction parsableToQueryStdout(stdout: string) {\n  if (stdout === '') {\n    return ''\n  }\n  // Convert the parsable stdout into a json array of unique names.\n  // The matchAll regexp looks for a forward (posix) or backward (win32) slash\n  // and matches one or more non-slashes until the newline.\n  const names = new Set(stdout.matchAll(/(?<=[/\\\\])[^/\\\\]+(?=\\n)/g))\n  return JSON.stringify([...names], null, 2)\n}\n\nasync function npmQuery(npmExecPath: string, cwd: string): Promise<string> {\n  let stdout = ''\n  try {\n    stdout = (await spawn(npmExecPath, ['query', ':not(.dev)'], { cwd })).stdout\n  } catch {}\n  return cleanupQueryStdout(stdout)\n}\n\nasync function lsBun(agentExecPath: string, cwd: string): Promise<string> {\n  try {\n    // Bun does not support filtering by production packages yet.\n    // https://github.com/oven-sh/bun/issues/8283\n    return (await spawn(agentExecPath!, ['pm', 'ls', '--all'], { cwd })).stdout\n  } catch {}\n  return ''\n}\n\nasync function lsNpm(agentExecPath: string, cwd: string): Promise<string> {\n  return await npmQuery(agentExecPath, cwd)\n}\n\nasync function lsPnpm(\n  agentExecPath: string,\n  cwd: string,\n  options?: AgentListDepsOptions | undefined\n): Promise<string> {\n  const npmExecPath = options?.npmExecPath\n  if (npmExecPath && npmExecPath !== NPM) {\n    const result = await npmQuery(npmExecPath, cwd)\n    if (result) {\n      return result\n    }\n  }\n  let stdout = ''\n  try {\n    stdout = (\n      await spawn(\n        agentExecPath,\n        // Pnpm uses the alternative spelling of parsable.\n        // https://en.wiktionary.org/wiki/parsable\n        ['ls', '--parseable', '--prod', '--depth', 'Infinity'],\n        { cwd }\n      )\n    ).stdout\n  } catch {}\n  return parsableToQueryStdout(stdout)\n}\n\nasync function lsVlt(agentExecPath: string, cwd: string): Promise<string> {\n  let stdout = ''\n  try {\n    // See https://docs.vlt.sh/cli/commands/list#options.\n    stdout = (\n      await spawn(agentExecPath, ['ls', '--view', 'human', ':not(.dev)'], {\n        cwd\n      })\n    ).stdout\n  } catch {}\n  return cleanupQueryStdout(stdout)\n}\n\nasync function lsYarnBerry(\n  agentExecPath: string,\n  cwd: string\n): Promise<string> {\n  try {\n    return (\n      // Yarn Berry does not support filtering by production packages yet.\n      // https://github.com/yarnpkg/berry/issues/5117\n      (\n        await spawn(agentExecPath, ['info', '--recursive', '--name-only'], {\n          cwd\n        })\n      ).stdout.trim()\n    )\n  } catch {}\n  return ''\n}\n\nasync function lsYarnClassic(\n  agentExecPath: string,\n  cwd: string\n): Promise<string> {\n  try {\n    // However, Yarn Classic does support it.\n    // https://github.com/yarnpkg/yarn/releases/tag/v1.0.0\n    // > Fix: Excludes dev dependencies from the yarn list output when the\n    //   environment is production\n    return (\n      await spawn(agentExecPath, ['list', '--prod'], { cwd })\n    ).stdout.trim()\n  } catch {}\n  return ''\n}\n\nexport const lsByAgent = new Map<Agent, AgentListDepsFn>([\n  [BUN, lsBun],\n  [NPM, lsNpm],\n  [PNPM, lsPnpm],\n  [VLT, lsVlt],\n  [YARN_BERRY, lsYarnBerry],\n  [YARN_CLASSIC, lsYarnClassic]\n])\n","import { hasKeys, isObject } from '@socketsecurity/registry/lib/objects'\n\nimport constants from '../../constants'\n\nimport type {\n  Agent,\n  StringKeyValueObject\n} from '../../utils/package-environment'\nimport type { EditablePackageJson } from '@socketsecurity/registry/lib/packages'\n\ntype NpmOverrides = { [key: string]: string | StringKeyValueObject }\ntype PnpmOrYarnOverrides = { [key: string]: string }\ntype Overrides = NpmOverrides | PnpmOrYarnOverrides\ntype AgentModifyManifestFn = (\n  pkgJson: EditablePackageJson,\n  overrides: Overrides\n) => void\n\nconst {\n  BUN,\n  NPM,\n  OVERRIDES,\n  PNPM,\n  RESOLUTIONS,\n  VLT,\n  YARN_BERRY,\n  YARN_CLASSIC\n} = constants\n\nconst depFields = [\n  'dependencies',\n  'devDependencies',\n  'peerDependencies',\n  'peerDependenciesMeta',\n  'optionalDependencies',\n  'bundleDependencies'\n]\n\nfunction getEntryIndexes(\n  entries: Array<[string | symbol, any]>,\n  keys: Array<string | symbol>\n): number[] {\n  return keys\n    .map(n => entries.findIndex(p => p[0] === n))\n    .filter(n => n !== -1)\n    .sort((a, b) => a - b)\n}\n\nfunction getLowestEntryIndex(\n  entries: Array<[string | symbol, any]>,\n  keys: Array<string | symbol>\n) {\n  return getEntryIndexes(entries, keys)?.[0] ?? -1\n}\n\nfunction getHighestEntryIndex(\n  entries: Array<[string | symbol, any]>,\n  keys: Array<string | symbol>\n) {\n  return getEntryIndexes(entries, keys).at(-1) ?? -1\n}\n\nfunction updatePkgJsonField(\n  editablePkgJson: EditablePackageJson,\n  field: string,\n  value: any\n) {\n  const { content: pkgJson } = editablePkgJson\n  const oldValue = pkgJson[field]\n  if (oldValue) {\n    // The field already exists so we simply update the field value.\n    if (field === PNPM) {\n      const isPnpmObj = isObject(oldValue)\n      if (hasKeys(value)) {\n        editablePkgJson.update({\n          [field]: {\n            ...(isPnpmObj ? oldValue : {}),\n            overrides: {\n              ...(isPnpmObj ? (oldValue as any)[OVERRIDES] : {}),\n              ...value\n            }\n          }\n        })\n      } else {\n        // Properties with undefined values are omitted when saved as JSON.\n        editablePkgJson.update(\n          (hasKeys(oldValue)\n            ? {\n                [field]: {\n                  ...(isPnpmObj ? oldValue : {}),\n                  overrides: undefined\n                }\n              }\n            : { [field]: undefined }) as typeof pkgJson\n        )\n      }\n    } else if (field === OVERRIDES || field === RESOLUTIONS) {\n      // Properties with undefined values are omitted when saved as JSON.\n      editablePkgJson.update({\n        [field]: hasKeys(value) ? value : undefined\n      } as typeof pkgJson)\n    } else {\n      editablePkgJson.update({ [field]: value })\n    }\n    return\n  }\n  if (\n    (field === OVERRIDES || field === PNPM || field === RESOLUTIONS) &&\n    !hasKeys(value)\n  ) {\n    return\n  }\n  // Since the field doesn't exist we want to insert it into the package.json\n  // in a place that makes sense, e.g. close to the \"dependencies\" field. If\n  // we can't find a place to insert the field we'll add it to the bottom.\n  const entries = Object.entries(pkgJson)\n  let insertIndex = -1\n  let isPlacingHigher = false\n  if (field === OVERRIDES) {\n    insertIndex = getLowestEntryIndex(entries, [RESOLUTIONS])\n    if (insertIndex === -1) {\n      isPlacingHigher = true\n      insertIndex = getHighestEntryIndex(entries, [...depFields, PNPM])\n    }\n  } else if (field === RESOLUTIONS) {\n    isPlacingHigher = true\n    insertIndex = getHighestEntryIndex(entries, [...depFields, OVERRIDES, PNPM])\n  } else if (field === PNPM) {\n    insertIndex = getLowestEntryIndex(entries, [OVERRIDES, RESOLUTIONS])\n    if (insertIndex === -1) {\n      isPlacingHigher = true\n      insertIndex = getHighestEntryIndex(entries, depFields)\n    }\n  }\n  if (insertIndex === -1) {\n    insertIndex = getLowestEntryIndex(entries, ['engines', 'files'])\n  }\n  if (insertIndex === -1) {\n    isPlacingHigher = true\n    insertIndex = getHighestEntryIndex(entries, ['exports', 'imports', 'main'])\n  }\n  if (insertIndex === -1) {\n    insertIndex = entries.length\n  } else if (isPlacingHigher) {\n    insertIndex += 1\n  }\n  entries.splice(insertIndex, 0, [\n    field,\n    field === PNPM ? { [OVERRIDES]: value } : value\n  ])\n  editablePkgJson.fromJSON(\n    `${JSON.stringify(Object.fromEntries(entries), null, 2)}\\n`\n  )\n}\n\nfunction updateOverridesField(\n  editablePkgJson: EditablePackageJson,\n  overrides: Overrides\n) {\n  updatePkgJsonField(editablePkgJson, OVERRIDES, overrides)\n}\n\nfunction updateResolutionsField(\n  editablePkgJson: EditablePackageJson,\n  overrides: Overrides\n) {\n  updatePkgJsonField(editablePkgJson, RESOLUTIONS, overrides)\n}\n\nfunction updatePnpmField(\n  editablePkgJson: EditablePackageJson,\n  overrides: Overrides\n) {\n  updatePkgJsonField(editablePkgJson, PNPM, overrides)\n}\n\nexport const updateManifestByAgent = new Map<Agent, AgentModifyManifestFn>([\n  [BUN, updateResolutionsField],\n  [NPM, updateOverridesField],\n  [PNPM, updatePnpmField],\n  [VLT, updateOverridesField],\n  [YARN_BERRY, updateResolutionsField],\n  [YARN_CLASSIC, updateResolutionsField]\n])\n","import path from 'node:path'\n\nimport npa from 'npm-package-arg'\nimport semver from 'semver'\nimport { glob as tinyGlob } from 'tinyglobby'\n\nimport { getManifestData } from '@socketsecurity/registry'\nimport { hasOwn, toSortedObject } from '@socketsecurity/registry/lib/objects'\nimport {\n  fetchPackageManifest,\n  readPackageJson\n} from '@socketsecurity/registry/lib/packages'\nimport { pEach } from '@socketsecurity/registry/lib/promises'\nimport { Spinner } from '@socketsecurity/registry/lib/spinner'\n\nimport { depsIncludesByAgent } from './deps-includes-by-agent'\nimport { getDependencyEntries } from './get-dependency-entries'\nimport { overridesDataByAgent } from './get-overrides-by-agent'\nimport { getWorkspaceGlobs } from './get-workspace-globs'\nimport { lockfileIncludesByAgent } from './lockfile-includes-by-agent'\nimport { lsByAgent } from './ls-by-agent'\nimport { updateManifestByAgent } from './update-manifest-by-agent'\nimport constants from '../../constants'\nimport { cmdPrefixMessage } from '../../utils/cmd'\n\nimport type { AgentLockIncludesFn } from './lockfile-includes-by-agent'\nimport type {\n  Agent,\n  EnvDetails,\n  StringKeyValueObject\n} from '../../utils/package-environment'\nimport type { Logger } from '@socketsecurity/registry/lib/logger'\n\ntype AddOverridesOptions = {\n  logger?: Logger | undefined\n  pin?: boolean | undefined\n  prod?: boolean | undefined\n  spinner?: Spinner | undefined\n  state?: AddOverridesState | undefined\n}\ntype AddOverridesState = {\n  added: Set<string>\n  addedInWorkspaces: Set<string>\n  updated: Set<string>\n  updatedInWorkspaces: Set<string>\n  warnedPnpmWorkspaceRequiresNpm: boolean\n}\ntype GetOverridesResult = { type: Agent; overrides: Overrides }\ntype NpmOverrides = { [key: string]: string | StringKeyValueObject }\ntype PackageJson = Awaited<ReturnType<typeof readPackageJson>>\ntype PnpmOrYarnOverrides = { [key: string]: string }\ntype Overrides = NpmOverrides | PnpmOrYarnOverrides\n\nconst { NPM, PNPM, YARN_CLASSIC } = constants\n\nconst CMD_NAME = 'socket optimize'\n\nconst manifestNpmOverrides = getManifestData(NPM)\n\nexport async function addOverrides(\n  pkgPath: string,\n  pkgEnvDetails: EnvDetails,\n  options?: AddOverridesOptions | undefined\n): Promise<AddOverridesState> {\n  const {\n    agent,\n    agentExecPath,\n    lockName,\n    lockSrc,\n    npmExecPath,\n    pkgPath: rootPath\n  } = pkgEnvDetails\n  const {\n    logger,\n    pin,\n    prod,\n    spinner,\n    state = {\n      added: new Set(),\n      addedInWorkspaces: new Set(),\n      updated: new Set(),\n      updatedInWorkspaces: new Set(),\n      warnedPnpmWorkspaceRequiresNpm: false\n    }\n  } = { __proto__: null, ...options } as AddOverridesOptions\n  let { pkgJson: editablePkgJson } = pkgEnvDetails\n  if (editablePkgJson === undefined) {\n    editablePkgJson = await readPackageJson(pkgPath, { editable: true })\n  }\n  const { content: pkgJson } = editablePkgJson\n\n  const workspaceName = path.relative(rootPath, pkgPath)\n  const workspaceGlobs = await getWorkspaceGlobs(agent, pkgPath, pkgJson)\n  const isRoot = pkgPath === rootPath\n  const isLockScanned = isRoot && !prod\n  const isWorkspace = !!workspaceGlobs\n  if (\n    isWorkspace &&\n    agent === PNPM &&\n    // npmExecPath will === the agent name IF it CANNOT be resolved.\n    npmExecPath === NPM &&\n    !state.warnedPnpmWorkspaceRequiresNpm\n  ) {\n    state.warnedPnpmWorkspaceRequiresNpm = true\n    logger?.warn(\n      cmdPrefixMessage(\n        CMD_NAME,\n        `${agent} workspace support requires \\`npm ls\\`, falling back to \\`${agent} list\\``\n      )\n    )\n  }\n\n  const overridesDataObjects = [] as GetOverridesResult[]\n  if (pkgJson['private'] || isWorkspace) {\n    overridesDataObjects.push(overridesDataByAgent.get(agent)!(pkgJson))\n  } else {\n    overridesDataObjects.push(\n      overridesDataByAgent.get(NPM)!(pkgJson),\n      overridesDataByAgent.get(YARN_CLASSIC)!(pkgJson)\n    )\n  }\n\n  spinner?.setText(\n    `Adding overrides${workspaceName ? ` to ${workspaceName}` : ''}...`\n  )\n\n  const depAliasMap = new Map<string, string>()\n  const depEntries = getDependencyEntries(pkgJson)\n\n  const manifestEntries = manifestNpmOverrides.filter(({ 1: data }) =>\n    semver.satisfies(\n      // Roughly check Node range as semver.coerce will strip leading\n      // v's, carets (^), comparators (<,<=,>,>=,=), and tildes (~).\n      semver.coerce(data.engines.node)!,\n      pkgEnvDetails.pkgRequirements.node\n    )\n  )\n\n  // Chunk package names to process them in parallel 3 at a time.\n  await pEach(manifestEntries, 3, async ({ 1: data }) => {\n    const { name: sockRegPkgName, package: origPkgName, version } = data\n    const major = semver.major(version)\n    const sockOverridePrefix = `${NPM}:${sockRegPkgName}@`\n    const sockOverrideSpec = `${sockOverridePrefix}${pin ? version : `^${major}`}`\n    for (const { 1: depObj } of depEntries) {\n      const sockSpec = hasOwn(depObj, sockRegPkgName)\n        ? depObj[sockRegPkgName]\n        : undefined\n      if (sockSpec) {\n        depAliasMap.set(sockRegPkgName, sockSpec)\n      }\n      const origSpec = hasOwn(depObj, origPkgName)\n        ? depObj[origPkgName]\n        : undefined\n      if (origSpec) {\n        let thisSpec = origSpec\n        // Add package aliases for direct dependencies to avoid npm EOVERRIDE\n        // errors...\n        // https://docs.npmjs.com/cli/v8/using-npm/package-spec#aliases\n        if (\n          // ...if the spec doesn't start with a valid Socket override.\n          !(\n            thisSpec.startsWith(sockOverridePrefix) &&\n            // Check the validity of the spec by passing it through npa and\n            // seeing if it will coerce to a version.\n            semver.coerce(npa(thisSpec).rawSpec)?.version\n          )\n        ) {\n          thisSpec = sockOverrideSpec\n          depObj[origPkgName] = thisSpec\n          state.added.add(sockRegPkgName)\n          if (workspaceName) {\n            state.addedInWorkspaces.add(workspaceName)\n          }\n        }\n        depAliasMap.set(origPkgName, thisSpec)\n      }\n    }\n    if (isRoot) {\n      // The AgentDepsIncludesFn and AgentLockIncludesFn types overlap in their\n      // first two parameters. AgentLockIncludesFn accepts an optional third\n      // parameter which AgentDepsIncludesFn will ignore so we cast thingScanner\n      // as an AgentLockIncludesFn type.\n      const thingScanner = (\n        isLockScanned\n          ? lockfileIncludesByAgent.get(agent)\n          : depsIncludesByAgent.get(agent)\n      ) as AgentLockIncludesFn\n      const thingToScan = isLockScanned\n        ? lockSrc\n        : await lsByAgent.get(agent)!(agentExecPath, pkgPath, { npmExecPath })\n      // Chunk package names to process them in parallel 3 at a time.\n      await pEach(overridesDataObjects, 3, async ({ overrides, type }) => {\n        const overrideExists = hasOwn(overrides, origPkgName)\n        if (\n          overrideExists ||\n          thingScanner(thingToScan, origPkgName, lockName)\n        ) {\n          const oldSpec = overrideExists ? overrides[origPkgName]! : undefined\n          const origDepAlias = depAliasMap.get(origPkgName)\n          const sockRegDepAlias = depAliasMap.get(sockRegPkgName)\n          const depAlias = sockRegDepAlias ?? origDepAlias\n          let newSpec = sockOverrideSpec\n          if (type === NPM && depAlias) {\n            // With npm one may not set an override for a package that one directly\n            // depends on unless both the dependency and the override itself share\n            // the exact same spec. To make this limitation easier to deal with,\n            // overrides may also be defined as a reference to a spec for a direct\n            // dependency by prefixing the name of the package to match the version\n            // of with a $.\n            // https://docs.npmjs.com/cli/v8/configuring-npm/package-json#overrides\n            newSpec = `$${sockRegDepAlias ? sockRegPkgName : origPkgName}`\n          } else if (typeof oldSpec === 'string') {\n            const thisSpec = oldSpec.startsWith('$')\n              ? depAlias || newSpec\n              : oldSpec || newSpec\n            if (thisSpec.startsWith(sockOverridePrefix)) {\n              if (\n                pin &&\n                semver.major(\n                  // Check the validity of the spec by passing it through npa\n                  // and seeing if it will coerce to a version. semver.coerce\n                  // will strip leading v's, carets (^), comparators (<,<=,>,>=,=),\n                  // and tildes (~). If not coerced to a valid version then\n                  // default to the manifest entry version.\n                  semver.coerce(npa(thisSpec).rawSpec)?.version ?? version\n                ) !== major\n              ) {\n                const otherVersion = (await fetchPackageManifest(thisSpec))\n                  ?.version\n                if (otherVersion && otherVersion !== version) {\n                  newSpec = `${sockOverridePrefix}${pin ? otherVersion : `^${semver.major(otherVersion)}`}`\n                }\n              }\n            } else {\n              newSpec = oldSpec\n            }\n          }\n          if (newSpec !== oldSpec) {\n            overrides[origPkgName] = newSpec\n            const addedOrUpdated = overrideExists ? 'updated' : 'added'\n            state[addedOrUpdated].add(sockRegPkgName)\n          }\n        }\n      })\n    }\n  })\n\n  if (workspaceGlobs) {\n    const workspacePkgJsonPaths = await tinyGlob(workspaceGlobs, {\n      absolute: true,\n      cwd: pkgPath!,\n      ignore: ['**/node_modules/**', '**/bower_components/**']\n    })\n    // Chunk package names to process them in parallel 3 at a time.\n    await pEach(workspacePkgJsonPaths, 3, async workspacePkgJsonPath => {\n      const otherState = await addOverrides(\n        path.dirname(workspacePkgJsonPath),\n        pkgEnvDetails,\n        {\n          logger,\n          pin,\n          prod,\n          spinner\n        }\n      )\n      for (const key of [\n        'added',\n        'addedInWorkspaces',\n        'updated',\n        'updatedInWorkspaces'\n      ] satisfies\n        // Here we're just telling TS that we're looping over key names\n        // of the type and that they're all Set<string> props. This allows\n        // us to do the SetA.add(setB.get) pump type-safe without casts.\n        Array<\n          keyof Pick<\n            AddOverridesState,\n            'added' | 'addedInWorkspaces' | 'updated' | 'updatedInWorkspaces'\n          >\n        >) {\n        for (const value of otherState[key]) {\n          state[key].add(value)\n        }\n      }\n    })\n  }\n\n  if (state.added.size > 0 || state.updated.size > 0) {\n    editablePkgJson.update(Object.fromEntries(depEntries) as PackageJson)\n    for (const { overrides, type } of overridesDataObjects) {\n      updateManifestByAgent.get(type)!(\n        editablePkgJson,\n        toSortedObject(overrides)\n      )\n    }\n    await editablePkgJson.save()\n  }\n\n  return state\n}\n","import { Spinner } from '@socketsecurity/registry/lib/spinner'\n\nimport { runAgentInstall } from './run-agent'\nimport constants from '../../constants'\nimport { cmdPrefixMessage } from '../../utils/cmd'\n\nimport type { EnvDetails } from '../../utils/package-environment'\nimport type { Logger } from '@socketsecurity/registry/lib/logger'\n\nconst { NPM_BUGGY_OVERRIDES_PATCHED_VERSION } = constants\n\nexport type UpdateLockfileOptions = {\n  cmdName?: string | undefined\n  logger?: Logger | undefined\n  spinner?: Spinner | undefined\n}\nexport async function updateLockfile(\n  pkgEnvDetails: EnvDetails,\n  options: UpdateLockfileOptions\n) {\n  const {\n    cmdName = '',\n    logger,\n    spinner\n  } = {\n    __proto__: null,\n    ...options\n  } as UpdateLockfileOptions\n  const isSpinning = !!spinner?.['isSpinning']\n  if (!isSpinning) {\n    spinner?.start()\n  }\n  spinner?.setText(`Updating ${pkgEnvDetails.lockName}...`)\n  try {\n    await runAgentInstall(pkgEnvDetails, { spinner })\n    if (pkgEnvDetails.features.npmBuggyOverrides) {\n      logger?.log(\n        `💡 Re-run ${cmdName ? `${cmdName} ` : ''}whenever ${pkgEnvDetails.lockName} changes.\\n   This can be skipped for ${pkgEnvDetails.agent} >=${NPM_BUGGY_OVERRIDES_PATCHED_VERSION}.`\n      )\n    }\n  } catch (e) {\n    spinner?.stop()\n    logger?.fail(\n      cmdPrefixMessage(\n        cmdName,\n        `${pkgEnvDetails.agent} install failed to update ${pkgEnvDetails.lockName}`\n      )\n    )\n    logger?.error(e)\n  }\n  if (isSpinning) {\n    spinner?.start()\n  } else {\n    spinner?.stop()\n  }\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\nimport { pluralize } from '@socketsecurity/registry/lib/words'\n\nimport { addOverrides } from './add-overrides'\nimport { updateLockfile } from './update-lockfile'\nimport constants from '../../constants'\nimport { detectAndValidatePackageEnvironment } from '../../utils/package-environment'\n\nconst CMD_NAME = 'socket optimize'\n\nfunction createActionMessage(\n  verb: string,\n  overrideCount: number,\n  workspaceCount: number\n): string {\n  return `${verb} ${overrideCount} Socket.dev optimized ${pluralize('override', overrideCount)}${workspaceCount ? ` in ${workspaceCount} ${pluralize('workspace', workspaceCount)}` : ''}`\n}\n\nexport async function applyOptimization(\n  cwd: string,\n  pin: boolean,\n  prod: boolean\n) {\n  const pkgEnvDetails = await detectAndValidatePackageEnvironment(cwd, {\n    cmdName: CMD_NAME,\n    logger,\n    prod\n  })\n  if (!pkgEnvDetails) {\n    return\n  }\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Socket optimizing...')\n\n  const state = await addOverrides(pkgEnvDetails.pkgPath, pkgEnvDetails, {\n    logger,\n    pin,\n    prod,\n    spinner\n  })\n\n  const addedCount = state.added.size\n  const updatedCount = state.updated.size\n  const pkgJsonChanged = addedCount > 0 || updatedCount > 0\n\n  if (pkgJsonChanged || pkgEnvDetails.features.npmBuggyOverrides) {\n    await updateLockfile(pkgEnvDetails, { cmdName: CMD_NAME, logger, spinner })\n  }\n\n  spinner.stop()\n\n  if (pkgJsonChanged) {\n    if (updatedCount > 0) {\n      logger?.log(\n        `${createActionMessage('Updated', updatedCount, state.updatedInWorkspaces.size)}${addedCount ? '.' : '🚀'}`\n      )\n    }\n    if (addedCount > 0) {\n      logger?.log(\n        `${createActionMessage('Added', addedCount, state.addedInWorkspaces.size)} 🚀`\n      )\n    }\n  } else {\n    logger?.log('Congratulations! Already Socket.dev optimized 🎉')\n  }\n}\n","import process from 'node:process'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { applyOptimization } from './apply-optimization'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'optimize',\n  description: 'Optimize dependencies with @socketregistry overrides',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    pin: {\n      type: 'boolean',\n      default: false,\n      description: 'Pin overrides to their latest version'\n    },\n    prod: {\n      type: 'boolean',\n      default: false,\n      description: 'Only add overrides for production dependencies'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command}\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command}\n      $ ${command} --pin\n  `\n}\n\nexport const cmdOptimize = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const cwd = process.cwd()\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await applyOptimization(\n    cwd,\n    Boolean(cli.flags['pin']),\n    Boolean(cli.flags['prod'])\n  )\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchOrganization(): Promise<\n  SocketSdkReturnType<'getOrganizations'>['data'] | undefined\n> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  return await fetchOrganizationWithToken(apiToken)\n}\n\nasync function fetchOrganizationWithToken(\n  apiToken: string\n): Promise<SocketSdkReturnType<'getOrganizations'>['data'] | undefined> {\n  const socketSdk = await setupSdk(apiToken)\n\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Fetching organization list...')\n\n  const result = await handleApiCall(\n    socketSdk.getOrganizations(),\n    'looking up organizations'\n  )\n\n  spinner.successAndStop('Received organization list response.')\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('getOrganizations', result)\n    return\n  }\n\n  return result.data\n}\n","import colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { getLastFiveOfApiToken } from '../../utils/api'\nimport { getDefaultToken } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function outputOrganizationList(\n  data: SocketSdkReturnType<'getOrganizations'>['data'],\n  outputKind: 'text' | 'json' | 'markdown' = 'text'\n): Promise<void> {\n  const organizations = Object.values(data.organizations)\n  const apiToken = getDefaultToken()\n  const lastFiveOfApiToken = getLastFiveOfApiToken(apiToken ?? '?????')\n\n  switch (outputKind) {\n    case 'json': {\n      logger.log(\n        JSON.stringify(\n          organizations.map(o => ({\n            name: o.name,\n            id: o.id,\n            plan: o.plan\n          })),\n          null,\n          2\n        )\n      )\n      return\n    }\n    case 'markdown': {\n      // | Syntax      | Description |\n      // | ----------- | ----------- |\n      // | Header      | Title       |\n      // | Paragraph   | Text        |\n      let mw1 = 4\n      let mw2 = 2\n      let mw3 = 4\n      for (const o of organizations) {\n        mw1 = Math.max(mw1, o.name.length)\n        mw2 = Math.max(mw2, o.id.length)\n        mw3 = Math.max(mw3, o.plan.length)\n      }\n      logger.log('# Organizations\\n')\n      logger.log(\n        `List of organizations associated with your API key, ending with: ${colors.italic(lastFiveOfApiToken)}\\n`\n      )\n      logger.log(\n        `| Name${' '.repeat(mw1 - 4)} | ID${' '.repeat(mw2 - 2)} | Plan${' '.repeat(mw3 - 4)} |`\n      )\n      logger.log(\n        `| ${'-'.repeat(mw1)} | ${'-'.repeat(mw2)} | ${'-'.repeat(mw3)} |`\n      )\n      for (const o of organizations) {\n        logger.log(\n          `| ${(o.name || '').padEnd(mw1, ' ')} | ${(o.id || '').padEnd(mw2, ' ')} | ${(o.plan || '').padEnd(mw3, ' ')} |`\n        )\n      }\n      logger.log(\n        `| ${'-'.repeat(mw1)} | ${'-'.repeat(mw2)} | ${'-'.repeat(mw3)} |`\n      )\n      return\n    }\n    default: {\n      logger.log(\n        `List of organizations associated with your API key, ending with: ${colors.italic(lastFiveOfApiToken)}\\n`\n      )\n      // Just dump\n      for (const o of organizations) {\n        logger.log(\n          `- Name: ${colors.bold(o.name)}, ID: ${colors.bold(o.id)}, Plan: ${colors.bold(o.plan)}`\n        )\n      }\n    }\n  }\n}\n","import { fetchOrganization } from './fetch-organization-list'\nimport { outputOrganizationList } from './output-organization-list'\n\nexport async function handleOrganizationList(\n  outputKind: 'text' | 'json' | 'markdown' = 'text'\n): Promise<void> {\n  const data = await fetchOrganization()\n  if (!data) return\n\n  await outputOrganizationList(data, outputKind)\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleOrganizationList } from './handle-organization-list'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'list',\n  description: 'List organizations associated with the API key used',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags\n  },\n  help: (command, _config) => `\n    Usage\n      $ ${command}\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n  `\n}\n\nexport const cmdOrganizationList = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const json = Boolean(cli.flags['json'])\n  const markdown = Boolean(cli.flags['markdown'])\n  if (json && markdown) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(stripIndents`\n${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n  - The json and markdown flags cannot be both set, pick one\n    `)\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleOrganizationList(json ? 'json' : markdown ? 'markdown' : 'text')\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchSecurityPolicy(\n  orgSlug: string\n): Promise<SocketSdkReturnType<'getOrgSecurityPolicy'>['data'] | undefined> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  return await fetchSecurityPolicyWithToken(apiToken, orgSlug)\n}\n\nasync function fetchSecurityPolicyWithToken(\n  apiToken: string,\n  orgSlug: string\n): Promise<SocketSdkReturnType<'getOrgSecurityPolicy'>['data'] | undefined> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  const socketSdk = await setupSdk(apiToken)\n\n  spinner.start('Fetching organization quota...')\n\n  const result = await handleApiCall(\n    socketSdk.getOrgSecurityPolicy(orgSlug),\n    'looking up organization quota'\n  )\n\n  spinner?.successAndStop('Received organization quota response.')\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('getOrgSecurityPolicy', result)\n    return\n  }\n\n  return result.data\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { mdTableOfPairs } from '../../utils/markdown'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function getSecurityPolicy(\n  data: SocketSdkReturnType<'getOrgSecurityPolicy'>['data'],\n  outputKind: 'text' | 'json' | 'markdown'\n): Promise<void> {\n  if (outputKind === 'json') {\n    let json\n    try {\n      json = JSON.stringify(data, null, 2)\n    } catch {\n      console.error(\n        'Failed to convert the server response to json, try running the same command without --json'\n      )\n      return\n    }\n\n    logger.log(json)\n    logger.log('')\n    return\n  }\n\n  logger.log('# Security policy')\n  logger.log('')\n  logger.log(\n    `The default security policy setting is: \"${data.securityPolicyDefault}\"`\n  )\n  logger.log('')\n  logger.log(\n    'These are the security policies per setting for your organization:'\n  )\n  logger.log('')\n  const rules = data.securityPolicyRules\n  const entries: Array<\n    [string, { action: 'defer' | 'error' | 'warn' | 'monitor' | 'ignore' }]\n    // @ts-ignore -- not sure why TS is complaining tbh but it does not like it\n  > = Object.entries(rules)\n  const mapped: Array<[string, string]> = entries.map(([key, value]) => [\n    key,\n    value.action\n  ])\n  mapped.sort(([a], [b]) => (a < b ? -1 : a > b ? 1 : 0))\n  logger.log(mdTableOfPairs(mapped, ['name', 'action']))\n  logger.log('')\n}\n","import { fetchSecurityPolicy } from './fetch-security-policy'\nimport { getSecurityPolicy } from './output-security-policy'\n\nexport async function handleSecurityPolicy(\n  orgSlug: string,\n  outputKind: 'text' | 'json' | 'markdown'\n): Promise<void> {\n  const data = await fetchSecurityPolicy(orgSlug)\n  if (!data) return\n\n  await getSecurityPolicy(data, outputKind)\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleSecurityPolicy } from './handle-security-policy'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\n// TODO: secret toplevel alias `socket security policy`?\nconst config: CliCommandConfig = {\n  commandName: 'security',\n  description: 'Retrieve the security policy of an organization.',\n  hidden: true,\n  flags: {\n    ...commonFlags,\n    ...outputFlags\n  },\n  help: (command, _config) => `\n    Usage\n      $ ${command} <org slug>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Your API token will need the \\`security-policy:read\\` permission otherwise\n    the request will fail with an authentication error.\n\n    Examples\n      $ ${command} mycorp\n      $ ${command} mycorp --json\n  `\n}\n\nexport const cmdOrganizationPolicyPolicy = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const json = Boolean(cli.flags['json'])\n  const markdown = Boolean(cli.flags['markdown'])\n\n  const [orgSlug = ''] = cli.input\n\n  if (!orgSlug || (json && markdown)) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(stripIndents`\n${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n  - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n  - The json and markdown flags cannot be both set ${json && markdown ? colors.red('(pick one!)') : colors.green('(ok)')}\n    `)\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleSecurityPolicy(\n    orgSlug,\n    json ? 'json' : markdown ? 'markdown' : 'text'\n  )\n}\n","import { cmdOrganizationPolicyPolicy } from './cmd-organization-policy-security'\nimport { meowWithSubcommands } from '../../utils/meow-with-subcommands'\n\nimport type { CliSubcommand } from '../../utils/meow-with-subcommands'\n\nconst description = 'Organization policy details'\n\nexport const cmdOrganizationPolicy: CliSubcommand = {\n  description,\n  // Hidden because it was broken all this time (nobody could be using it)\n  // and we're not sure if it's useful to anyone in its current state.\n  // Until we do, we'll hide this to keep the help tidier.\n  // And later, we may simply move this under `scan`, anyways.\n  hidden: true,\n  async run(argv, importMeta, { parentName }) {\n    await meowWithSubcommands(\n      {\n        security: cmdOrganizationPolicyPolicy\n      },\n      {\n        argv,\n        description,\n        defaultSub: 'list', // Backwards compat\n        importMeta,\n        name: parentName + ' policy'\n      }\n    )\n  }\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchQuota(): Promise<\n  SocketSdkReturnType<'getQuota'>['data'] | undefined\n> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n  return await fetchQuotaWithToken(apiToken)\n}\n\nasync function fetchQuotaWithToken(\n  apiToken: string\n): Promise<SocketSdkReturnType<'getQuota'>['data'] | undefined> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  const socketSdk = await setupSdk(apiToken)\n\n  spinner.start('Fetching organization quota...')\n\n  const result = await handleApiCall(\n    socketSdk.getQuota(),\n    'looking up organization quota'\n  )\n\n  spinner?.successAndStop('Recieved organization quota response.')\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('getQuota', result)\n    return\n  }\n\n  return result.data\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function outputQuota(\n  data: SocketSdkReturnType<'getQuota'>['data'],\n  outputKind: 'text' | 'json' | 'markdown' = 'text'\n): Promise<void> {\n  if (outputKind === 'json') {\n    let json\n    try {\n      json = JSON.stringify(data, null, 2)\n    } catch {\n      console.error(\n        'Failed to convert the server response to json, try running the same command without --json'\n      )\n      return\n    }\n\n    logger.log(json)\n    logger.log('')\n    return\n  }\n\n  if (outputKind === 'markdown') {\n    logger.log('# Quota')\n    logger.log('')\n    logger.log(`Quota left on the current API token: ${data.quota}`)\n    logger.log('')\n    return\n  }\n\n  logger.log(`Quota left on the current API token: ${data.quota}`)\n  logger.log('')\n}\n","import { fetchQuota } from './fetch-quota'\nimport { outputQuota } from './output-quota'\n\nexport async function handleQuota(\n  outputKind: 'text' | 'json' | 'markdown' = 'text'\n): Promise<void> {\n  const data = await fetchQuota()\n  if (!data) return\n\n  await outputQuota(data, outputKind)\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleQuota } from './handle-quota'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'quota',\n  description: 'List organizations associated with the API key used',\n  hidden: true,\n  flags: {\n    ...commonFlags,\n    ...outputFlags\n  },\n  help: (command, _config) => `\n    Usage\n      $ ${command}\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n  `\n}\n\nexport const cmdOrganizationQuota = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const json = Boolean(cli.flags['json'])\n  const markdown = Boolean(cli.flags['markdown'])\n  if (json && markdown) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(stripIndents`\n${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n  - The json and markdown flags cannot be both set, pick one\n    `)\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleQuota(json ? 'json' : markdown ? 'markdown' : 'text')\n}\n","import { cmdOrganizationList } from './cmd-organization-list'\nimport { cmdOrganizationPolicy } from './cmd-organization-policy'\nimport { cmdOrganizationQuota } from './cmd-organization-quota'\nimport { meowWithSubcommands } from '../../utils/meow-with-subcommands'\n\nimport type { CliSubcommand } from '../../utils/meow-with-subcommands'\n\nconst description = 'Account details'\n\nexport const cmdOrganization: CliSubcommand = {\n  description,\n  // Hidden because it was broken all this time (nobody could be using it)\n  // and we're not sure if it's useful to anyone in its current state.\n  // Until we do, we'll hide this to keep the help tidier.\n  // And later, we may simply move this under `scan`, anyways.\n  hidden: true,\n  async run(argv, importMeta, { parentName }) {\n    await meowWithSubcommands(\n      {\n        list: cmdOrganizationList,\n        quota: cmdOrganizationQuota,\n        policy: cmdOrganizationPolicy\n      },\n      {\n        argv,\n        description,\n        defaultSub: 'list', // Backwards compat\n        importMeta,\n        name: parentName + ' organization'\n      }\n    )\n  }\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { getPublicToken, setupSdk } from '../../utils/sdk'\n\nimport type {\n  SocketSdkResultType,\n  SocketSdkReturnType\n} from '@socketsecurity/sdk'\n\nexport async function fetchPurlsShallowScore(\n  purls: string[]\n): Promise<SocketSdkReturnType<'batchPackageFetch'>> {\n  logger.error(\n    `Requesting shallow score data for ${purls.length} package urls (purl): ${purls.join(', ')}`\n  )\n\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start(`Requesting data ...`)\n\n  const socketSdk = await setupSdk(getPublicToken())\n\n  const result: Awaited<SocketSdkResultType<'batchPackageFetch'>> =\n    await handleApiCall(\n      socketSdk.batchPackageFetch(\n        {\n          alerts: 'true'\n          // compact: false,\n          // fixable: false,\n          // licenseattrib: false,\n          // licensedetails: false\n        },\n        { components: purls.map(purl => ({ purl })) }\n      ),\n      'looking up package'\n    )\n\n  spinner.successAndStop('Request completed')\n\n  if (result.success) {\n    return result\n  }\n  handleUnsuccessfulApiResponse('batchPackageFetch', result)\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport type { components } from '@socketsecurity/sdk/types/api'\n\nexport function outputPurlsShallowScore(\n  purls: string[],\n  packageData: Array<components['schemas']['SocketArtifact']>,\n  outputKind: 'json' | 'markdown' | 'text'\n): void {\n  if (outputKind === 'json') {\n    // In JSON simply return what the server responds with. Don't bother trying\n    // to match the response with the requested packages/purls.\n    logger.log(JSON.stringify(packageData, undefined, 2))\n    return\n  }\n\n  // Make some effort to match the requested data with the response\n\n  const set = new Set()\n  packageData.forEach(data => {\n    set.add('pkg:' + data.type + '/' + data.name + '@' + data.version)\n    set.add('pkg:' + data.type + '/' + data.name)\n  })\n  const missing = purls.filter(purl => {\n    if (set.has(purl)) return false\n    if (purl.endsWith('@latest') && set.has(purl.slice(0, -'@latest'.length)))\n      return false\n    return true // not found\n  })\n\n  if (outputKind === 'markdown') {\n    logger.log(stripIndents`\n      # Shallow Package Report\n\n      This report contains the response for requesting data on some package url(s).\n\n      Please note: The listed scores are ONLY for the package itself. It does NOT\n                   reflect the scores of any dependencies, transitive or otherwise.\n\n      ${missing.length ? `\\n## Missing response\\n\\nAt least one package had no response or the purl was not canonical:\\n\\n${missing.map(purl => '- ' + purl + '\\n').join('')}` : ''}\n\n      ${packageData.map(data => '## ' + formatReportCard(data, false)).join('\\n\\n\\n')}\n    `)\n    return\n  }\n\n  logger.log('\\n' + colors.bold('Shallow Package Score') + '\\n')\n  logger.log(\n    'Please note: The listed scores are ONLY for the package itself. It does NOT\\n' +\n      '             reflect the scores of any dependencies, transitive or otherwise.'\n  )\n\n  if (missing.length) {\n    logger.log(\n      `\\nAt least one package had no response or the purl was not canonical:\\n${missing.map(purl => '\\n- ' + colors.bold(purl)).join('')}`\n    )\n  }\n\n  packageData.forEach(data => {\n    logger.log('\\n')\n    logger.log(formatReportCard(data, true))\n  })\n  logger.log('')\n}\n\nfunction formatReportCard(\n  data: components['schemas']['SocketArtifact'],\n  color: boolean\n): string {\n  const scoreResult = {\n    'Supply Chain Risk': Math.floor((data.score?.supplyChain ?? 0) * 100),\n    Maintenance: Math.floor((data.score?.maintenance ?? 0) * 100),\n    Quality: Math.floor((data.score?.quality ?? 0) * 100),\n    Vulnerabilities: Math.floor((data.score?.vulnerability ?? 0) * 100),\n    License: Math.floor((data.score?.license ?? 0) * 100)\n  }\n  const alertString = getAlertString(data.alerts, !color)\n  const purl = 'pkg:' + data.type + '/' + data.name + '@' + data.version\n\n  return [\n    'Package: ' + (color ? colors.bold(purl) : purl),\n    '',\n    ...Object.entries(scoreResult).map(\n      score =>\n        `- ${score[0]}:`.padEnd(20, ' ') +\n        `  ${formatScore(score[1], !color, true)}`\n    ),\n    alertString\n  ].join('\\n')\n}\n\nfunction formatScore(score: number, noColor = false, pad = false): string {\n  const padded = String(score).padStart(pad ? 3 : 0, ' ')\n\n  if (noColor) return padded\n  else if (score >= 80) return colors.green(padded)\n  else if (score >= 60) return colors.yellow(padded)\n  else return colors.red(padded)\n}\n\nfunction getAlertString(\n  alerts: Array<components['schemas']['SocketAlert']> | undefined,\n  noColor = false\n) {\n  if (!alerts?.length) {\n    return noColor ? `- Alerts: none!` : `- Alerts: ${colors.green('none')}!`\n  } else {\n    const bad = alerts\n      .filter(alert => alert.severity !== 'low' && alert.severity !== 'middle')\n      .sort((a, b) => (a.type < b.type ? -1 : a.type > b.type ? 1 : 0))\n    const mid = alerts\n      .filter(alert => alert.severity === 'middle')\n      .sort((a, b) => (a.type < b.type ? -1 : a.type > b.type ? 1 : 0))\n    const low = alerts\n      .filter(alert => alert.severity === 'low')\n      .sort((a, b) => (a.type < b.type ? -1 : a.type > b.type ? 1 : 0))\n\n    // We need to create the no-color string regardless because the actual string\n    // contains a bunch of invisible ANSI chars which would screw up length checks.\n    const colorless = `- Alerts (${bad.length}/${mid.length.toString()}/${low.length}):`\n\n    if (noColor) {\n      return (\n        colorless +\n        ' '.repeat(Math.max(0, 20 - colorless.length)) +\n        '  ' +\n        [\n          bad.map(alert => `[${alert.severity}] ` + alert.type).join(', '),\n          mid.map(alert => `[${alert.severity}] ` + alert.type).join(', '),\n          low.map(alert => `[${alert.severity}] ` + alert.type).join(', ')\n        ]\n          .filter(Boolean)\n          .join(', ')\n      )\n    }\n\n    return (\n      `- Alerts (${colors.red(bad.length.toString())}/${colors.yellow(mid.length.toString())}/${low.length}):` +\n      ' '.repeat(Math.max(0, 20 - colorless.length)) +\n      '  ' +\n      [\n        bad\n          .map(alert =>\n            colors.red(colors.dim(`[${alert.severity}] `) + alert.type)\n          )\n          .join(', '),\n        mid\n          .map(alert =>\n            colors.yellow(colors.dim(`[${alert.severity}] `) + alert.type)\n          )\n          .join(', '),\n        low\n          .map(alert => colors.dim(`[${alert.severity}] `) + alert.type)\n          .join(', ')\n      ]\n        .filter(Boolean)\n        .join(', ')\n    )\n  }\n}\n","import { fetchPurlsShallowScore } from './fetch-purls-shallow-score'\nimport { outputPurlsShallowScore } from './output-purls-shallow-score'\n\nimport type { components } from '@socketsecurity/sdk/types/api'\n\nexport async function handlePurlsShallowScore({\n  outputKind,\n  purls\n}: {\n  outputKind: 'json' | 'markdown' | 'text'\n  purls: string[]\n}) {\n  const packageData = await fetchPurlsShallowScore(purls)\n  if (packageData) {\n    outputPurlsShallowScore(\n      purls,\n      packageData.data as Array<components['schemas']['SocketArtifact']>,\n      outputKind\n    )\n  }\n}\n","// Either an ecosystem was given or all args must be (namespaced) purls\n// The `pkg:` part is optional here. We'll scan for `eco/name@version`.\n// Not hardcoding the namespace since we don't know what the server accepts.\n// The ecosystem is considered as the first package if it is not an a-z string.\nexport function parsePackageSpecifiers(\n  ecosystem: string,\n  pkgs: string[]\n): { purls: string[]; valid: boolean } {\n  let valid = true\n  const purls = []\n  if (!ecosystem) {\n    valid = false\n  } else if (/^[a-zA-Z]+$/.test(ecosystem)) {\n    for (let i = 0; i < pkgs.length; ++i) {\n      const pkg = pkgs[i] ?? ''\n      if (!pkg) {\n        valid = false\n        break\n      } else if (pkg.startsWith('pkg:')) {\n        // keep\n        purls.push(pkg)\n      } else if (pkg.includes('/')) {\n        // Looks like this arg was already namespaced\n        purls.push('pkg:' + pkg)\n      } else {\n        purls.push('pkg:' + ecosystem + '/' + pkg)\n      }\n    }\n    if (!purls.length) {\n      valid = false\n    }\n  } else {\n    // Assume ecosystem is a purl, too\n    pkgs.unshift(ecosystem)\n\n    for (let i = 0; i < pkgs.length; ++i) {\n      const pkg = pkgs[i] ?? ''\n      if (!/^(?:pkg:)?[a-zA-Z]+\\/./.test(pkg)) {\n        // At least one purl did not start with `pkg:eco/x` or `eco/x`\n        valid = false\n        break\n      } else if (pkg.startsWith('pkg:')) {\n        purls.push(pkg)\n      } else {\n        purls.push('pkg:' + pkg)\n      }\n    }\n\n    if (!purls.length) {\n      valid = false\n    }\n  }\n\n  return { purls, valid }\n}\n","import colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handlePurlsShallowScore } from './handle-purls-shallow-score'\nimport { parsePackageSpecifiers } from './parse-package-specifiers'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'shallow',\n  description:\n    'Look up info regarding one or more packages but not their transitives',\n  hidden: true,\n  flags: {\n    ...commonFlags,\n    ...outputFlags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <<ecosystem> <name> [<name> ...] | <purl> [<purl> ...]>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Requirements\n      - quota: 100\n      - scope: \\`packages:list\\`\n\n    Show scoring details for one or more packages purely based on their own package.\n    This means that any dependency scores are not reflected by the score. You can\n    use the \\`socket package score <pkg>\\` command to get its full transitive score.\n\n    Only a few ecosystems are supported like npm, golang, and maven.\n\n    A \"purl\" is a standard package name formatting: \\`pkg:eco/name@version\\`\n    This command will automatically prepend \"pkg:\" when not present.\n\n    If the first arg is an ecosystem, remaining args that are not a purl are\n    assumed to be scoped to that ecosystem.\n\n    Examples\n      $ ${command} npm webtorrent\n      $ ${command} npm webtorrent@1.9.1\n      $ ${command} npm/webtorrent@1.9.1\n      $ ${command} pkg:npm/webtorrent@1.9.1\n      $ ${command} maven webtorrent babel\n      $ ${command} npm/webtorrent golang/babel\n      $ ${command} npm npm/webtorrent@1.0.1 babel\n  `\n}\n\nexport const cmdPackageShallow = {\n  description: config.description,\n  hidden: config.hidden,\n  alias: {\n    shallowScore: {\n      description: config.description,\n      hidden: true,\n      argv: []\n    }\n  },\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const { json, markdown } = cli.flags\n  const [ecosystem = '', ...pkgs] = cli.input\n\n  const { purls, valid } = parsePackageSpecifiers(ecosystem, pkgs)\n\n  if (!valid || !purls.length) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\\n\n      - First parameter should be an ecosystem or all args must be purls ${!valid ? colors.red('(bad!)') : colors.green('(ok)')}\\n\n      - Expecting at least one package ${!purls.length ? colors.red('(missing!)') : colors.green('(ok)')}\\n\n    `)\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handlePurlsShallowScore({\n    outputKind: json ? 'json' : markdown ? 'markdown' : 'text',\n    purls\n  })\n}\n","import { cmdPackageShallow } from './cmd-package-shallow'\nimport { meowWithSubcommands } from '../../utils/meow-with-subcommands'\n\nimport type { CliSubcommand } from '../../utils/meow-with-subcommands'\n\nconst description = 'Commands relating to looking up published packages'\n\nexport const cmdPackage: CliSubcommand = {\n  description,\n  hidden: true, // [beta]\n  async run(argv, importMeta, { parentName }) {\n    await meowWithSubcommands(\n      {\n        shallow: cmdPackageShallow\n      },\n      {\n        aliases: {\n          pkg: {\n            description,\n            hidden: true,\n            argv: []\n          }\n        },\n        argv,\n        description,\n        importMeta,\n        name: parentName + ' package'\n      }\n    )\n  }\n}\n","import process from 'node:process'\n\nimport { spawn } from '@socketsecurity/registry/lib/spawn'\n\nimport { getNpmBinPath } from '../../shadow/npm/paths'\n\nexport async function runRawNpm(\n  argv: string[] | readonly string[]\n): Promise<void> {\n  const spawnPromise = spawn(getNpmBinPath(), argv as string[], {\n    stdio: 'inherit'\n  })\n  // See https://nodejs.org/api/all.html#all_child_process_event-exit.\n  spawnPromise.process.on('exit', (code, signalName) => {\n    if (signalName) {\n      process.kill(process.pid, signalName)\n    } else if (code !== null) {\n      process.exit(code)\n    }\n  })\n  await spawnPromise\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { runRawNpm } from './run-raw-npm'\nimport constants from '../../constants'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT, NPM } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'raw-npm',\n  description: `Temporarily disable the Socket ${NPM} wrapper`,\n  hidden: false,\n  flags: {},\n  help: command => `\n    Usage\n      $ ${command} <command>\n\n    Examples\n      $ ${command} install\n  `\n}\n\nexport const cmdRawNpm = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    allowUnknownFlags: true,\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await runRawNpm(argv)\n}\n","import process from 'node:process'\n\nimport { spawn } from '@socketsecurity/registry/lib/spawn'\n\nimport { getNpxBinPath } from '../../shadow/npm/paths'\n\nexport async function runRawNpx(\n  argv: string[] | readonly string[]\n): Promise<void> {\n  const spawnPromise = spawn(getNpxBinPath(), argv as string[], {\n    stdio: 'inherit'\n  })\n  // See https://nodejs.org/api/all.html#all_child_process_event-exit.\n  spawnPromise.process.on('exit', (code, signalName) => {\n    if (signalName) {\n      process.kill(process.pid, signalName)\n    } else if (code !== null) {\n      process.exit(code)\n    }\n  })\n  await spawnPromise\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { runRawNpx } from './run-raw-npx'\nimport constants from '../../constants'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT, NPX } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'raw-npx',\n  description: `Temporarily disable the Socket ${NPX} wrapper`,\n  hidden: false,\n  flags: {},\n  help: command => `\n    Usage\n      $ ${command} <command>\n\n    Examples\n      $ ${command} install\n  `\n}\n\nexport const cmdRawNpx = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    allowUnknownFlags: true,\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await runRawNpx(argv)\n}\n","import { debugLog, isDebug } from '@socketsecurity/registry/lib/debug'\nimport { pluralize } from '@socketsecurity/registry/lib/words'\n\nimport constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { getPackageFilesFullScans } from '../../utils/path-resolve'\nimport { setupSdk } from '../../utils/sdk'\n\nimport type { SocketYml } from '@socketsecurity/config'\nimport type {\n  SocketSdkResultType,\n  SocketSdkReturnType\n} from '@socketsecurity/sdk'\n\nconst { DRY_RUN_LABEL } = constants\n\nexport async function createReport(\n  socketConfig: SocketYml | undefined,\n  inputPaths: string[],\n  {\n    cwd,\n    dryRun\n  }: {\n    cwd: string\n    dryRun: boolean\n  }\n): Promise<undefined | SocketSdkResultType<'createReport'>> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n  const socketSdk = await setupSdk()\n  const supportedFiles = await socketSdk\n    .getReportSupportedFiles()\n    .then(res => {\n      if (!res.success)\n        handleUnsuccessfulApiResponse('getReportSupportedFiles', res)\n      return (res as SocketSdkReturnType<'getReportSupportedFiles'>).data\n    })\n    .catch((cause: Error) => {\n      throw new Error('Failed getting supported files for report', {\n        cause\n      })\n    })\n  const packagePaths = await getPackageFilesFullScans(\n    cwd,\n    inputPaths,\n    supportedFiles,\n    socketConfig\n  )\n  const packagePathsCount = packagePaths.length\n  if (packagePathsCount && isDebug()) {\n    for (const pkgPath of packagePaths) {\n      debugLog(`Uploading: ${pkgPath}`)\n    }\n  }\n  if (dryRun) {\n    debugLog(`${DRY_RUN_LABEL}: Skipped actual upload`)\n    return undefined\n  }\n  spinner.start(\n    `Creating report with ${packagePathsCount} package ${pluralize('file', packagePathsCount)}`\n  )\n  const apiCall = socketSdk.createReportFromFilePaths(\n    packagePaths,\n    cwd,\n    socketConfig?.issueRules\n  )\n  const result = await handleApiCall(apiCall, 'creating report')\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('createReport', result)\n    return undefined\n  }\n  spinner.successAndStop()\n  return result\n}\n","import { betterAjvErrors } from '@apideck/better-ajv-errors'\n\nimport { SocketValidationError, readSocketConfig } from '@socketsecurity/config'\n\nimport { InputError } from '../../utils/errors'\n\nexport async function getSocketConfig(absoluteConfigPath: string) {\n  const socketConfig = await readSocketConfig(absoluteConfigPath).catch(\n    (cause: unknown) => {\n      if (\n        cause &&\n        typeof cause === 'object' &&\n        cause instanceof SocketValidationError\n      ) {\n        // Inspired by workbox-build:\n        // https://github.com/GoogleChrome/workbox/blob/95f97a207fd51efb3f8a653f6e3e58224183a778/packages/workbox-build/src/lib/validate-options.ts#L68-L71\n        const betterErrors = betterAjvErrors({\n          basePath: 'config',\n          data: cause.data,\n          errors: cause.validationErrors,\n          schema: cause.schema as Parameters<\n            typeof betterAjvErrors\n          >[0]['schema']\n        })\n        throw new InputError(\n          'The socket.yml config is not valid',\n          betterErrors\n            .map(\n              err =>\n                `[${err.path}] ${err.message}.${err.suggestion ? err.suggestion : ''}`\n            )\n            .join('\\n')\n        )\n      } else {\n        throw new Error('Failed to read socket.yml config', { cause })\n      }\n    }\n  )\n\n  return socketConfig\n}\n","import constants from '../../constants'\nimport {\n  formatSeverityCount,\n  getSeverityCount\n} from '../../utils/alert/severity'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { setupSdk } from '../../utils/sdk'\n\nimport type {\n  SocketSdkResultType,\n  SocketSdkReturnType\n} from '@socketsecurity/sdk'\n\nexport type ReportData = SocketSdkReturnType<'getReport'>['data']\n\nconst MAX_TIMEOUT_RETRY = 5\nconst HTTP_CODE_TIMEOUT = 524\n\nexport async function fetchReportData(\n  reportId: string,\n  includeAllIssues: boolean,\n  strict: boolean\n): Promise<void | ReportData> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.log('Fetching report with ID ${reportId} (this could take a while)')\n  spinner.start(`Fetch started... (this could take a while)`)\n\n  const socketSdk = await setupSdk()\n  let result: SocketSdkResultType<'getReport'> | undefined\n  for (let retry = 1; !result; ++retry) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      result = await handleApiCall(\n        socketSdk.getReport(reportId),\n        'fetching report'\n      )\n    } catch (err) {\n      if (\n        retry >= MAX_TIMEOUT_RETRY ||\n        !(err instanceof Error) ||\n        (err.cause as any)?.cause?.response?.statusCode !== HTTP_CODE_TIMEOUT\n      ) {\n        spinner.stop(`Failed to fetch report`)\n        throw err\n      }\n      spinner?.fail(`Retrying report fetch ${retry} / ${MAX_TIMEOUT_RETRY}`)\n    }\n  }\n\n  if (!result.success) {\n    return handleUnsuccessfulApiResponse('getReport', result)\n  }\n\n  // Conclude the status of the API call.\n  if (strict) {\n    if (result.data.healthy) {\n      spinner.success('Report result is healthy and great!')\n    } else {\n      spinner.error('Report result deemed unhealthy for project')\n    }\n  } else if (!result.data.healthy) {\n    const severityCount = getSeverityCount(\n      result.data.issues,\n      includeAllIssues ? undefined : 'high'\n    )\n    const issueSummary = formatSeverityCount(severityCount)\n    spinner.success(`Report has these issues: ${issueSummary}`)\n  } else {\n    spinner.success('Report has no issues')\n  }\n  spinner.stop()\n\n  return result.data\n}\n","import process from 'node:process'\n\nimport { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { ColorOrMarkdown } from '../../utils/color-or-markdown'\n\nimport type { ReportData } from './fetch-report-data'\n\nexport function formatReportDataOutput(\n  reportId: string,\n  data: ReportData,\n  commandName: string,\n  outputKind: 'json' | 'markdown' | 'print',\n  strict: boolean,\n  artifacts: any\n): void {\n  if (outputKind === 'json') {\n    logger.log(JSON.stringify(data, undefined, 2))\n  } else {\n    const format = new ColorOrMarkdown(outputKind === 'markdown')\n    logger.log(stripIndents`\n      Detailed info on socket.dev: ${format.hyperlink(reportId, data.url, {\n        fallbackToUrl: true\n      })}`)\n    if (outputKind === 'print') {\n      logger.log(data)\n      logger.log(\n        colors.dim(\n          `Or rerun ${colors.italic(commandName)} using the ${colors.italic('--json')} flag to get full JSON output`\n        )\n      )\n      logger.log('The scan:')\n      logger.log(artifacts)\n    }\n  }\n\n  if (strict && !data.healthy) {\n    process.exit(1)\n  }\n}\n","import colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport constants from '../../constants'\nimport { handleAPIError, queryAPI } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken } from '../../utils/sdk'\n\nimport type { components } from '@socketsecurity/sdk/types/api'\n\nexport async function getFullScan(\n  orgSlug: string,\n  fullScanId: string\n): Promise<Array<components['schemas']['SocketArtifact']> | undefined> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  spinner.start('Fetching full-scan...')\n\n  const response = await queryAPI(\n    `orgs/${orgSlug}/full-scans/${encodeURIComponent(fullScanId)}`,\n    apiToken\n  )\n\n  spinner.stop('Fetch complete.')\n\n  if (!response.ok) {\n    const err = await handleAPIError(response.status)\n    logger.fail(\n      `${colors.bgRed(colors.white(response.statusText))}: Fetch error: ${err}`\n    )\n    return\n  }\n\n  // This is nd-json; each line is a json object\n  const jsons = await response.text()\n  const lines = jsons.split('\\n').filter(Boolean)\n  const data = lines.map(line => {\n    try {\n      return JSON.parse(line)\n    } catch {\n      console.error(\n        'At least one line item was returned that could not be parsed as JSON...'\n      )\n      return {}\n    }\n  }) as unknown as Array<components['schemas']['SocketArtifact']>\n\n  return data\n}\n","import { fetchReportData } from './fetch-report-data'\nimport { formatReportDataOutput } from './format-report-data'\nimport { getFullScan } from '../scan/get-full-scan'\n\nimport type { components } from '@socketsecurity/sdk/types/api'\n\nexport async function viewReport(\n  reportId: string,\n  {\n    all,\n    commandName,\n    outputKind,\n    strict\n  }: {\n    commandName: string\n    all: boolean\n    outputKind: 'json' | 'markdown' | 'print'\n    strict: boolean\n  }\n) {\n  const result = await fetchReportData(reportId, all, strict)\n\n  const artifacts: Array<components['schemas']['SocketArtifact']> | undefined =\n    await getFullScan('socketdev', reportId)\n\n  if (result) {\n    formatReportDataOutput(\n      reportId,\n      result,\n      commandName,\n      outputKind,\n      strict,\n      artifacts\n    )\n  }\n}\n","import path from 'node:path'\nimport process from 'node:process'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { createReport } from './create-report'\nimport { getSocketConfig } from './get-socket-config'\nimport { viewReport } from './view-report'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags, validationFlags } from '../../flags'\nimport { ColorOrMarkdown } from '../../utils/color-or-markdown'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'create',\n  description: '[Deprecated] Create a project report',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags,\n    ...validationFlags,\n    dryRun: {\n      type: 'boolean',\n      default: false,\n      description: 'Only output what will be done without actually doing it'\n    },\n    view: {\n      type: 'boolean',\n      shortFlag: 'v',\n      default: false,\n      description: 'Will wait for and return the created report'\n    }\n  },\n  help: () => `\n    This command is deprecated in favor of \\`socket scan view\\`.\n    It will be removed in the next major release of the CLI.\n  `\n}\n\nexport const cmdReportCreate = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  // TODO: Allow setting a custom cwd and/or configFile path?\n  const cwd = process.cwd()\n  const absoluteConfigPath = path.join(cwd, 'socket.yml')\n\n  const dryRun = Boolean(cli.flags['dryRun'])\n  const json = Boolean(cli.flags['json'])\n  const markdown = Boolean(cli.flags['markdown'])\n  const strict = Boolean(cli.flags['strict'])\n  const includeAllIssues = Boolean(cli.flags['all'])\n  const view = Boolean(cli.flags['view'])\n\n  // Note exiting earlier to skirt a hidden auth requirement\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  const socketConfig = await getSocketConfig(absoluteConfigPath)\n\n  const result = await createReport(socketConfig, cli.input, { cwd, dryRun })\n\n  const commandName = `${parentName} ${config.commandName}`\n\n  if (result?.success) {\n    if (view) {\n      const reportId = result.data.id\n      await viewReport(reportId, {\n        all: includeAllIssues,\n        commandName,\n        outputKind: json ? 'json' : markdown ? 'markdown' : 'print',\n        strict\n      })\n    } else if (json) {\n      logger.log(JSON.stringify(result.data, undefined, 2))\n    } else {\n      const format = new ColorOrMarkdown(markdown)\n      logger.log(\n        `New report: ${format.hyperlink(result.data.id, result.data.url, { fallbackToUrl: true })}`\n      )\n    }\n  }\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { viewReport } from './view-report'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags, validationFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'view',\n  description: '[Deprecated] View a project report',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags,\n    ...validationFlags\n  },\n  help: () => `\n    This command is deprecated in favor of \\`socket scan view\\`.\n    It will be removed in the next major release of the CLI.\n  `\n}\n\nexport const cmdReportView = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const [reportId, ...extraInput] = cli.input\n\n  // Validate the input.\n  if (extraInput.length || !reportId) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Need at least one report ID ${!reportId ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Can only handle a single report ID ${extraInput.length < 2 ? colors.red(`(received ${extraInput.length}!)`) : colors.green('(ok)')}`)\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await viewReport(reportId, {\n    all: Boolean(cli.flags['all']),\n    commandName: `${parentName} ${config.commandName}`,\n    outputKind: cli.flags['json']\n      ? 'json'\n      : cli.flags['markdown']\n        ? 'markdown'\n        : 'print',\n    strict: Boolean(cli.flags['strict'])\n  })\n}\n","import { cmdReportCreate } from './cmd-report-create'\nimport { cmdReportView } from './cmd-report-view'\nimport { meowWithSubcommands } from '../../utils/meow-with-subcommands'\n\nimport type { CliSubcommand } from '../../utils/meow-with-subcommands'\n\nconst description = '[Deprecated] Project report related commands'\n\nexport const cmdReport: CliSubcommand = {\n  description,\n  hidden: true, // Deprecated in favor of `scan`\n  async run(argv, importMeta, { parentName }) {\n    await meowWithSubcommands(\n      {\n        create: cmdReportCreate,\n        view: cmdReportView\n      },\n      {\n        argv,\n        description,\n        importMeta,\n        name: parentName + ' report'\n      }\n    )\n  }\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchCreateRepo({\n  default_branch,\n  description,\n  homepage,\n  orgSlug,\n  repoName,\n  visibility\n}: {\n  orgSlug: string\n  repoName: string\n  description: string\n  homepage: string\n  default_branch: string\n  visibility: string\n}): Promise<SocketSdkReturnType<'createOrgRepo'>['data'] | undefined> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  return await fetchCreateRepoWithToken(apiToken, {\n    default_branch,\n    description,\n    homepage,\n    orgSlug,\n    repoName,\n    visibility\n  })\n}\n\nasync function fetchCreateRepoWithToken(\n  apiToken: string,\n  {\n    default_branch,\n    description,\n    homepage,\n    orgSlug,\n    repoName,\n    visibility\n  }: {\n    orgSlug: string\n    repoName: string\n    description: string\n    homepage: string\n    default_branch: string\n    visibility: string\n  }\n): Promise<SocketSdkReturnType<'createOrgRepo'>['data'] | undefined> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  const socketSdk = await setupSdk(apiToken)\n\n  spinner.start('Sending request ot create a repository...')\n\n  const result = await handleApiCall(\n    socketSdk.createOrgRepo(orgSlug, {\n      name: repoName,\n      description,\n      homepage,\n      default_branch,\n      visibility\n    }),\n    'creating repository'\n  )\n\n  spinner.successAndStop('Received response requesting to create a repository.')\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('createOrgRepo', result)\n    return\n  }\n\n  return result.data\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\nexport async function outputCreateRepo(\n  _data: SocketSdkReturnType<'createOrgRepo'>['data']\n): Promise<void> {\n  logger.success('Repository created successfully')\n}\n","import { fetchCreateRepo } from './fetch-create-repo'\nimport { outputCreateRepo } from './output-create-repo'\n\nexport async function handleCreateRepo({\n  default_branch,\n  description,\n  homepage,\n  orgSlug,\n  repoName,\n  visibility\n}: {\n  orgSlug: string\n  repoName: string\n  description: string\n  homepage: string\n  default_branch: string\n  visibility: string\n}): Promise<void> {\n  const data = await fetchCreateRepo({\n    default_branch,\n    description,\n    homepage,\n    orgSlug,\n    repoName,\n    visibility\n  })\n  if (!data) return\n\n  await outputCreateRepo(data)\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleCreateRepo } from './handle-create-repo'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'create',\n  description: 'Create a repository in an organization',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    repoName: {\n      type: 'string',\n      shortFlag: 'n',\n      default: '',\n      description: 'Repository name'\n    },\n    repoDescription: {\n      type: 'string',\n      shortFlag: 'd',\n      default: '',\n      description: 'Repository description'\n    },\n    homepage: {\n      type: 'string',\n      shortFlag: 'h',\n      default: '',\n      description: 'Repository url'\n    },\n    defaultBranch: {\n      type: 'string',\n      shortFlag: 'b',\n      default: 'main',\n      description: 'Repository default branch'\n    },\n    visibility: {\n      type: 'string',\n      shortFlag: 'v',\n      default: 'private',\n      description: 'Repository visibility (Default Private)'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeOrg --repoName=test-repo\n  `\n}\n\nexport const cmdReposCreate = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const repoName = cli.flags['repoName']\n  const [orgSlug = ''] = cli.input\n\n  if (!repoName || typeof repoName !== 'string' || !orgSlug) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Repository name using --repoName ${!repoName ? colors.red('(missing!)') : typeof repoName !== 'string' ? colors.red('(invalid!)') : colors.green('(ok)')}`)\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleCreateRepo({\n    orgSlug,\n    repoName,\n    description: String(cli.flags['repoDescription'] || ''),\n    homepage: String(cli.flags['homepage'] || ''),\n    default_branch: String(cli.flags['defaultBranch'] || ''),\n    visibility: String(cli.flags['visibility'] || 'private')\n  })\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nexport async function handleDeleteRepo(\n  orgSlug: string,\n  repoName: string\n): Promise<void> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  await deleteRepoWithToken(orgSlug, repoName, apiToken)\n}\n\nasync function deleteRepoWithToken(\n  orgSlug: string,\n  repoName: string,\n  apiToken: string\n): Promise<void> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Deleting repository...')\n\n  const socketSdk = await setupSdk(apiToken)\n  const result = await handleApiCall(\n    socketSdk.deleteOrgRepo(orgSlug, repoName),\n    'deleting repository'\n  )\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('deleteOrgRepo', result)\n    return\n  }\n\n  spinner.successAndStop('Repository deleted successfully')\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleDeleteRepo } from './handle-delete-repo'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'del',\n  description: 'Delete a repository in an organization',\n  hidden: false,\n  flags: {\n    ...commonFlags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug> <repo slug>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeOrg test-repo\n  `\n}\n\nexport const cmdReposDel = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const [orgSlug = '', repoName = ''] = cli.input\n\n  if (!orgSlug || !repoName) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Repository name as the second argument ${!repoName ? colors.red('(missing!)') : typeof repoName !== 'string' ? colors.red('(invalid!)') : colors.green('(ok)')}\n\n      - At least one TARGET (e.g. \\`.\\` or \\`./package.json\\``)\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleDeleteRepo(orgSlug, repoName)\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchListRepos({\n  direction,\n  orgSlug,\n  page,\n  per_page,\n  sort\n}: {\n  direction: string\n  orgSlug: string\n  page: number\n  per_page: number\n  sort: string\n}): Promise<SocketSdkReturnType<'getOrgRepoList'>['data'] | undefined> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  return await fetchListReposWithToken(apiToken, {\n    direction,\n    orgSlug,\n    page,\n    per_page,\n    sort\n  })\n}\n\nasync function fetchListReposWithToken(\n  apiToken: string,\n  {\n    direction,\n    orgSlug,\n    page,\n    per_page,\n    sort\n  }: {\n    direction: string\n    orgSlug: string\n    page: number\n    per_page: number\n    sort: string\n  }\n): Promise<SocketSdkReturnType<'getOrgRepoList'>['data'] | undefined> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  const socketSdk = await setupSdk(apiToken)\n\n  spinner.start('Fetching list of repositories...')\n\n  const result = await handleApiCall(\n    socketSdk.getOrgRepoList(orgSlug, {\n      sort,\n      direction,\n      per_page: String(per_page),\n      page: String(page)\n    }),\n    'listing repositories'\n  )\n\n  spinner.successAndStop('Received response for repository list.')\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('getOrgRepoList', result)\n    return\n  }\n\n  return result.data\n}\n","// @ts-ignore\nimport chalkTable from 'chalk-table'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function outputListRepos(\n  data: SocketSdkReturnType<'getOrgRepoList'>['data'],\n  outputKind: 'json' | 'markdown' | 'print'\n): Promise<void> {\n  if (outputKind === 'json') {\n    const json = data.results.map(o => ({\n      id: o.id,\n      name: o.name,\n      visibility: o.visibility,\n      defaultBranch: o.default_branch,\n      archived: o.archived\n    }))\n    logger.log(JSON.stringify(json, null, 2))\n    return\n  }\n\n  const options = {\n    columns: [\n      { field: 'id', name: colors.magenta('ID') },\n      { field: 'name', name: colors.magenta('Name') },\n      { field: 'visibility', name: colors.magenta('Visibility') },\n      { field: 'default_branch', name: colors.magenta('Default branch') },\n      { field: 'archived', name: colors.magenta('Archived') }\n    ]\n  }\n\n  logger.log(chalkTable(options, data.results))\n}\n","import { fetchListRepos } from './fetch-list-repos'\nimport { outputListRepos } from './output-list-repos'\n\nexport async function handleListRepos({\n  direction,\n  orgSlug,\n  outputKind,\n  page,\n  per_page,\n  sort\n}: {\n  direction: string\n  orgSlug: string\n  outputKind: 'json' | 'markdown' | 'print'\n  page: number\n  per_page: number\n  sort: string\n}): Promise<void> {\n  const data = await fetchListRepos({\n    direction,\n    orgSlug,\n    page,\n    per_page,\n    sort\n  })\n  if (!data) return\n\n  await outputListRepos(data, outputKind)\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleListRepos } from './handle-list-repos'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'list',\n  description: 'List repositories in an organization',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    sort: {\n      type: 'string',\n      shortFlag: 's',\n      default: 'created_at',\n      description: 'Sorting option'\n    },\n    direction: {\n      type: 'string',\n      default: 'desc',\n      description: 'Direction option'\n    },\n    perPage: {\n      type: 'number',\n      shortFlag: 'pp',\n      default: 30,\n      description: 'Number of results per page'\n    },\n    page: {\n      type: 'number',\n      shortFlag: 'p',\n      default: 1,\n      description: 'Page number'\n    },\n    ...outputFlags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeOrg\n  `\n}\n\nexport const cmdReposList = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const [orgSlug = ''] = cli.input\n\n  if (!orgSlug) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - At least one TARGET (e.g. \\`.\\` or \\`./package.json\\``)\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleListRepos({\n    direction: cli.flags['direction'] === 'asc' ? 'asc' : 'desc',\n    orgSlug,\n    outputKind: cli.flags['json']\n      ? 'json'\n      : cli.flags['markdown']\n        ? 'markdown'\n        : 'print',\n    page: Number(cli.flags['page']) || 1,\n    per_page: Number(cli.flags['perPage']) || 30,\n    sort: String(cli.flags['sort'] || 'created_at')\n  })\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchUpdateRepo({\n  default_branch,\n  description,\n  homepage,\n  orgSlug,\n  repoName,\n  visibility\n}: {\n  orgSlug: string\n  repoName: string\n  description: string\n  homepage: string\n  default_branch: string\n  visibility: string\n}): Promise<SocketSdkReturnType<'updateOrgRepo'>['data'] | undefined> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  return await fetchUpdateRepoWithToken(apiToken, {\n    default_branch,\n    description,\n    homepage,\n    orgSlug,\n    repoName,\n    visibility\n  })\n}\n\nasync function fetchUpdateRepoWithToken(\n  apiToken: string,\n  {\n    default_branch,\n    description,\n    homepage,\n    orgSlug,\n    repoName,\n    visibility\n  }: {\n    orgSlug: string\n    repoName: string\n    description: string\n    homepage: string\n    default_branch: string\n    visibility: string\n  }\n): Promise<SocketSdkReturnType<'updateOrgRepo'>['data'] | undefined> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Sending request to update a repository...')\n\n  const socketSdk = await setupSdk(apiToken)\n  const result = await handleApiCall(\n    socketSdk.updateOrgRepo(orgSlug, repoName, {\n      orgSlug,\n      name: repoName,\n      description,\n      homepage,\n      default_branch,\n      visibility\n    }),\n    'updating repository'\n  )\n\n  spinner.successAndStop('Received response trying to update a repository')\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('updateOrgRepo', result)\n    return\n  }\n\n  return result.data\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function outputUpdateRepo(\n  _data: SocketSdkReturnType<'updateOrgRepo'>['data']\n): Promise<void> {\n  logger.success('Repository updated successfully')\n}\n","import { fetchUpdateRepo } from './fetch-update-repo'\nimport { outputUpdateRepo } from './output-update-repo'\n\nexport async function handleUpdateRepo({\n  default_branch,\n  description,\n  homepage,\n  orgSlug,\n  repoName,\n  visibility\n}: {\n  orgSlug: string\n  repoName: string\n  description: string\n  homepage: string\n  default_branch: string\n  visibility: string\n}): Promise<void> {\n  const data = await fetchUpdateRepo({\n    default_branch,\n    description,\n    homepage,\n    orgSlug,\n    repoName,\n    visibility\n  })\n  if (!data) return\n\n  await outputUpdateRepo(data)\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleUpdateRepo } from './handle-update-repo'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'update',\n  description: 'Update a repository in an organization',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    repoName: {\n      type: 'string',\n      shortFlag: 'n',\n      default: '',\n      description: 'Repository name'\n    },\n    repoDescription: {\n      type: 'string',\n      shortFlag: 'd',\n      default: '',\n      description: 'Repository description'\n    },\n    homepage: {\n      type: 'string',\n      shortFlag: 'h',\n      default: '',\n      description: 'Repository url'\n    },\n    defaultBranch: {\n      type: 'string',\n      shortFlag: 'b',\n      default: 'main',\n      description: 'Repository default branch'\n    },\n    visibility: {\n      type: 'string',\n      shortFlag: 'v',\n      default: 'private',\n      description: 'Repository visibility (Default Private)'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeOrg\n  `\n}\n\nexport const cmdReposUpdate = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const repoName = cli.flags['repoName']\n  const [orgSlug = ''] = cli.input\n\n  if (!repoName || typeof repoName !== 'string' || !orgSlug) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Repository name using --repoName ${!repoName ? colors.red('(missing!)') : typeof repoName !== 'string' ? colors.red('(invalid!)') : colors.green('(ok)')}\n\n      - At least one TARGET (e.g. \\`.\\` or \\`./package.json\\``)\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleUpdateRepo({\n    orgSlug,\n    repoName,\n    description: String(cli.flags['repoDescription'] || ''),\n    homepage: String(cli.flags['homepage'] || ''),\n    default_branch: String(cli.flags['defaultBranch'] || ''),\n    visibility: String(cli.flags['visibility'] || 'private')\n  })\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function fetchViewRepo(\n  orgSlug: string,\n  repoName: string\n): Promise<SocketSdkReturnType<'getOrgRepo'>['data'] | undefined> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n  return await fetchViewRepoWithToken(orgSlug, repoName, apiToken)\n}\n\nasync function fetchViewRepoWithToken(\n  orgSlug: string,\n  repoName: string,\n  apiToken: string\n): Promise<SocketSdkReturnType<'getOrgRepo'>['data'] | undefined> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  const socketSdk = await setupSdk(apiToken)\n\n  spinner.start('Fetching repository data...')\n\n  const result = await handleApiCall(\n    socketSdk.getOrgRepo(orgSlug, repoName),\n    'fetching repository'\n  )\n\n  spinner.successAndStop('Received response while fetched repository data.')\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('getOrgRepo', result)\n    return\n  }\n\n  return result.data\n}\n","// @ts-ignore\nimport chalkTable from 'chalk-table'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\n\nexport async function outputViewRepo(\n  data: SocketSdkReturnType<'createOrgRepo'>['data'],\n  outputKind: 'json' | 'markdown' | 'text'\n): Promise<void> {\n  if (outputKind === 'json') {\n    const {\n      archived,\n      created_at,\n      default_branch,\n      homepage,\n      id,\n      name,\n      visibility\n    } = data\n    logger.log(\n      JSON.stringify(\n        {\n          id,\n          name,\n          visibility,\n          default_branch,\n          homepage,\n          archived,\n          created_at\n        },\n        null,\n        2\n      )\n    )\n    return\n  }\n\n  const options = {\n    columns: [\n      { field: 'id', name: colors.magenta('ID') },\n      { field: 'name', name: colors.magenta('Name') },\n      { field: 'visibility', name: colors.magenta('Visibility') },\n      { field: 'default_branch', name: colors.magenta('Default branch') },\n      { field: 'homepage', name: colors.magenta('Homepage') },\n      { field: 'archived', name: colors.magenta('Archived') },\n      { field: 'created_at', name: colors.magenta('Created at') }\n    ]\n  }\n\n  logger.log(chalkTable(options, [data]))\n}\n","import { fetchViewRepo } from './fetch-view-repo'\nimport { outputViewRepo } from './output-view-repo'\n\nexport async function handleViewRepo(\n  orgSlug: string,\n  repoName: string,\n  outputKind: 'json' | 'markdown' | 'text'\n): Promise<void> {\n  const data = await fetchViewRepo(orgSlug, repoName)\n  if (!data) return\n\n  await outputViewRepo(data, outputKind)\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { handleViewRepo } from './handle-view-repo'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'view',\n  description: 'View repositories in an organization',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags,\n    repoName: {\n      description: 'The repository to check',\n      default: '',\n      type: 'string'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeOrg\n  `\n}\n\nexport const cmdReposView = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const { json, markdown, repoName } = cli.flags\n\n  const [orgSlug = ''] = cli.input\n\n  if (!repoName || typeof repoName !== 'string' || !orgSlug) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`\n      ${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${\n        !orgSlug ? colors.red('(missing!)') : colors.green('(ok)')\n      }\n\n      - Repository name using --repoName ${\n        !repoName\n          ? colors.red('(missing!)')\n          : typeof repoName !== 'string'\n            ? colors.red('(invalid!)')\n            : colors.green('(ok)')\n      }\n    `\n    )\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await handleViewRepo(\n    orgSlug,\n    repoName,\n    json ? 'json' : markdown ? 'markdown' : 'text'\n  )\n}\n","import { cmdReposCreate } from './cmd-repos-create'\nimport { cmdReposDel } from './cmd-repos-del'\nimport { cmdReposList } from './cmd-repos-list'\nimport { cmdReposUpdate } from './cmd-repos-update'\nimport { cmdReposView } from './cmd-repos-view'\nimport { meowWithSubcommands } from '../../utils/meow-with-subcommands'\n\nimport type { CliSubcommand } from '../../utils/meow-with-subcommands'\n\nconst description = 'Repositories related commands'\n\nexport const cmdRepos: CliSubcommand = {\n  description,\n  async run(argv, importMeta, { parentName }) {\n    await meowWithSubcommands(\n      {\n        create: cmdReposCreate,\n        view: cmdReposView,\n        list: cmdReposList,\n        del: cmdReposDel,\n        update: cmdReposUpdate\n      },\n      {\n        argv,\n        description,\n        importMeta,\n        name: `${parentName} repos`\n      }\n    )\n  }\n}\n","import { select } from '@socketsecurity/registry/lib/prompts'\nimport { SocketSdk } from '@socketsecurity/sdk'\n\nimport { handleApiCall } from '../../utils/api'\n\nexport async function suggestOrgSlug(\n  socketSdk: SocketSdk\n): Promise<string | void> {\n  const result = await handleApiCall(\n    socketSdk.getOrganizations(),\n    'looking up organizations'\n  )\n  // Ignore a failed request here. It was not the primary goal of\n  // running this command and reporting it only leads to end-user confusion.\n  if (result.success) {\n    const proceed = await select<string>({\n      message:\n        'Missing org name; do you want to use any of these orgs for this scan?',\n      choices: Array.from(Object.values(result.data.organizations))\n        .map(({ name: slug }) => ({\n          name: 'Yes [' + slug + ']',\n          value: slug,\n          description: `Use \"${slug}\" as the organization`\n        }))\n        .concat({\n          name: 'No',\n          value: '',\n          description:\n            'Do not use any of these organizations (will end in a no-op)'\n        })\n    })\n    if (proceed) {\n      return proceed\n    }\n  } else {\n    // TODO: in verbose mode, report this error to stderr\n  }\n}\n","import path from 'node:path'\nimport process from 'node:process'\n\nimport { select } from '@socketsecurity/registry/lib/prompts'\nimport { SocketSdk } from '@socketsecurity/sdk'\n\nimport { handleApiCall } from '../../utils/api'\n\nexport async function suggestRepoSlug(\n  socketSdk: SocketSdk,\n  orgSlug: string\n): Promise<{\n  slug: string\n  defaultBranch: string\n} | void> {\n  // Same as above, but if there's a repo with the same name as cwd then\n  // default the selection to that name.\n  const result = await handleApiCall(\n    socketSdk.getOrgRepoList(orgSlug, {\n      orgSlug,\n      sort: 'name',\n      direction: 'asc',\n      // There's no guarantee that the cwd is part of this page. If it's not\n      // then do an additional request and specific search for it instead.\n      // This way we can offer the tip of \"do you want to create [cwd]?\".\n      perPage: '10',\n      page: '0'\n    }),\n    'looking up known repos'\n  )\n  // Ignore a failed request here. It was not the primary goal of\n  // running this command and reporting it only leads to end-user confusion.\n  if (result.success) {\n    const currentDirName = dirNameToSlug(path.basename(process.cwd()))\n\n    let cwdIsKnown =\n      !!currentDirName &&\n      result.data.results.some(obj => obj.slug === currentDirName)\n    if (!cwdIsKnown && currentDirName) {\n      // Do an explicit request so we can assert that the cwd exists or not\n      const result = await handleApiCall(\n        socketSdk.getOrgRepo(orgSlug, currentDirName),\n        'checking if current cwd is a known repo'\n      )\n      if (result.success) {\n        cwdIsKnown = true\n      }\n    }\n\n    const proceed = await select<string>({\n      message:\n        'Missing repo name; do you want to use any of these known repo names for this scan?',\n      choices:\n        // Put the CWD suggestion at the top, whether it exists or not\n        (currentDirName\n          ? [\n              {\n                name: `Yes, current dir [${cwdIsKnown ? currentDirName : `create repo for ${currentDirName}`}]`,\n                value: currentDirName,\n                description: cwdIsKnown\n                  ? 'Register a new repo name under the given org and use it'\n                  : 'Use current dir as repo'\n              }\n            ]\n          : []\n        ).concat(\n          result.data.results\n            .filter(({ slug }) => !!slug && slug !== currentDirName)\n            .map(({ slug }) => ({\n              name: 'Yes [' + slug + ']',\n              value: slug || '', // Filtered above but TS is like nah.\n              description: `Use \"${slug}\" as the repo name`\n            })),\n          {\n            name: 'No',\n            value: '',\n            description: 'Do not use any of these repos (will end in a no-op)'\n          }\n        )\n    })\n\n    if (proceed) {\n      const repoName = proceed\n      let repoDefaultBranch = ''\n      // Store the default branch to help with the branch name question next\n      result.data.results.some(obj => {\n        if (obj.slug === proceed && obj.default_branch) {\n          repoDefaultBranch = obj.default_branch\n          return\n        }\n      })\n      return { slug: repoName, defaultBranch: repoDefaultBranch }\n    }\n  } else {\n    // TODO: in verbose mode, report this error to stderr\n  }\n}\n\nfunction dirNameToSlug(name: string): string {\n  // Uses slug specs asserted by our servers\n  // Note: this can lead to collisions; eg. slug for `x--y` and `x---y` is `x-y`\n  return name\n    .toLowerCase()\n    .replace(/[^[a-zA-Z0-9_.-]/g, '_')\n    .replace(/--+/g, '-')\n    .replace(/__+/g, '_')\n    .replace(/\\.\\.+/g, '.')\n    .replace(/[._-]+$/, '')\n}\n","import { select } from '@socketsecurity/registry/lib/prompts'\nimport { spawnSync } from '@socketsecurity/registry/lib/spawn'\n\nexport async function suggestBranchSlug(\n  repoDefaultBranch: string | undefined\n): Promise<string | void> {\n  const spawnResult = spawnSync('git', ['branch', '--show-current'])\n  const currentBranch = spawnResult.stdout.toString('utf8').trim()\n  if (currentBranch && spawnResult.status === 0) {\n    const proceed = await select<string>({\n      message: 'Use the current git branch as target branch name?',\n      choices: [\n        {\n          name: `Yes [${currentBranch}]`,\n          value: currentBranch,\n          description: 'Use the current git branch for branch name'\n        },\n        ...(repoDefaultBranch && repoDefaultBranch !== currentBranch\n          ? [\n              {\n                name: `No, use the default branch [${repoDefaultBranch}]`,\n                value: repoDefaultBranch,\n                description:\n                  'Use the default branch for target repo as the target branch name'\n              }\n            ]\n          : []),\n        {\n          name: 'No',\n          value: '',\n          description:\n            'Do not use the current git branch as name (will end in a no-op)'\n        }\n      ].filter(Boolean)\n    })\n    if (proceed) {\n      return proceed\n    }\n  }\n}\n","import { select } from '@socketsecurity/registry/lib/prompts'\n\nexport async function suggestTarget(): Promise<string[] | void> {\n  // We could prefill this with sub-dirs of the current\n  // dir ... but is that going to be useful?\n  const proceed = await select<boolean>({\n    message: 'No TARGET given. Do you want to use the current directory?',\n    choices: [\n      {\n        name: 'Yes',\n        value: true,\n        description: 'Target the current directory'\n      },\n      {\n        name: 'No',\n        value: false,\n        description:\n          'Do not use the current directory (this will end in a no-op)'\n      }\n    ]\n  })\n  if (proceed) {\n    return ['.']\n  }\n}\n","import assert from 'node:assert'\nimport process from 'node:process'\nimport readline from 'node:readline/promises'\n\nimport { stripIndents } from 'common-tags'\nimport open from 'open'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { suggestOrgSlug } from './suggest-org-slug'\nimport { suggestRepoSlug } from './suggest-repo-slug'\nimport { suggestBranchSlug } from './suggest_branch_slug'\nimport { suggestTarget } from './suggest_target'\nimport constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getPackageFilesFullScans } from '../../utils/path-resolve'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nexport async function createFullScan({\n  branchName,\n  commitHash: _commitHash,\n  commitMessage,\n  committers: _committers,\n  cwd,\n  defaultBranch,\n  orgSlug,\n  pendingHead,\n  pullRequest: _pullRequest,\n  readOnly,\n  repoName,\n  targets,\n  tmp\n}: {\n  branchName: string\n  commitHash: string\n  commitMessage: string\n  committers: string\n  cwd: string\n  defaultBranch: boolean\n  orgSlug: string\n  pendingHead: boolean\n  pullRequest: number | undefined\n  readOnly: boolean\n  repoName: string\n  targets: string[]\n  tmp: boolean\n}): Promise<void> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n  const socketSdk = await setupSdk()\n  const supportedFiles = await socketSdk\n    .getReportSupportedFiles()\n    .then(res => {\n      if (!res.success) {\n        handleUnsuccessfulApiResponse('getReportSupportedFiles', res)\n        assert(\n          false,\n          'handleUnsuccessfulApiResponse should unconditionally throw'\n        )\n      }\n\n      return res.data\n    })\n    .catch((cause: Error) => {\n      throw new Error('Failed getting supported files for report', { cause })\n    })\n\n  // If we updated any inputs then we should print the command line to repeat\n  // the command without requiring user input, as a suggestion.\n  let updatedInput = false\n\n  if (!targets.length) {\n    const received = await suggestTarget()\n    targets = received ?? []\n    updatedInput = true\n  }\n\n  // // TODO: we'll probably use socket.json or something else soon...\n  // const absoluteConfigPath = path.join(cwd, 'socket.yml')\n  // const socketConfig = await getSocketConfig(absoluteConfigPath)\n\n  const packagePaths = await getPackageFilesFullScans(\n    cwd,\n    targets,\n    supportedFiles\n    // socketConfig\n  )\n\n  // We're going to need an api token to suggest data because those suggestions\n  // must come from data we already know. Don't error on missing api token yet.\n  // If the api-token is not set, ignore it for the sake of suggestions.\n  const apiToken = getDefaultToken()\n\n  // If the current cwd is unknown and is used as a repo slug anyways, we will\n  // first need to register the slug before we can use it.\n  let repoDefaultBranch = ''\n\n  if (apiToken) {\n    if (!orgSlug) {\n      const suggestion = await suggestOrgSlug(socketSdk)\n      if (suggestion) orgSlug = suggestion\n      updatedInput = true\n    }\n\n    // (Don't bother asking for the rest if we didn't get an org slug above)\n    if (orgSlug && !repoName) {\n      const suggestion = await suggestRepoSlug(socketSdk, orgSlug)\n      if (suggestion) {\n        repoDefaultBranch = suggestion.defaultBranch\n        repoName = suggestion.slug\n      }\n      updatedInput = true\n    }\n\n    // (Don't bother asking for the rest if we didn't get an org/repo above)\n    if (orgSlug && repoName && !branchName) {\n      const suggestion = await suggestBranchSlug(repoDefaultBranch)\n      if (suggestion) branchName = suggestion\n      updatedInput = true\n    }\n  }\n\n  if (!orgSlug || !repoName || !branchName || !packagePaths.length) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`\n      ${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Repository name using --repo ${!repoName ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Branch name using --branch ${!branchName ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - At least one TARGET (e.g. \\`.\\` or \\`./package.json\\`) ${\n        !packagePaths.length\n          ? colors.red(\n              targets.length > 0\n                ? '(TARGET' +\n                    (targets.length ? 's' : '') +\n                    ' contained no matching/supported files!)'\n                : '(missing)'\n            )\n          : colors.green('(ok)')\n      }\n\n      ${!apiToken ? 'Note: was unable to make suggestions because no API Token was found; this would make command fail regardless' : ''}\n      `\n    )\n    return\n  }\n\n  if (updatedInput) {\n    logger.log(\n      'Note: You can invoke this command next time to skip the interactive questions:'\n    )\n    logger.log('```')\n    logger.log(\n      `    socket scan create [other flags...] --repo ${repoName} --branch ${branchName} ${orgSlug} ${targets.join(' ')}`\n    )\n    logger.log('```')\n  }\n\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  if (readOnly) {\n    logger.log('[ReadOnly] Bailing now')\n    return\n  }\n\n  spinner.start(`Creating a scan with ${packagePaths.length} packages...`)\n\n  const result = await handleApiCall(\n    socketSdk.createOrgFullScan(\n      orgSlug,\n      {\n        repo: repoName,\n        branch: branchName,\n        commit_message: commitMessage,\n        make_default_branch: String(defaultBranch),\n        set_as_pending_head: String(pendingHead),\n        tmp: String(tmp)\n      },\n      packagePaths,\n      cwd\n    ),\n    'Creating scan'\n  )\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('CreateOrgFullScan', result)\n    return\n  }\n\n  spinner.successAndStop('Scan created successfully')\n\n  const link = colors.underline(colors.cyan(`${result.data.html_report_url}`))\n  logger.log(`Available at: ${link}`)\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  })\n\n  const answer = await rl.question(\n    'Would you like to open it in your browser? (y/n)'\n  )\n\n  if (answer.toLowerCase() === 'y') {\n    await open(`${result.data.html_report_url}`)\n  }\n  rl.close()\n}\n","import process from 'node:process'\n\nimport { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { createFullScan } from './create-full-scan'\nimport constants from '../../constants'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\nimport { getDefaultToken } from '../../utils/sdk'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'create',\n  description: 'Create a scan',\n  hidden: false,\n  flags: {\n    repo: {\n      type: 'string',\n      shortFlag: 'r',\n      default: '',\n      description: 'Repository name'\n    },\n    branch: {\n      type: 'string',\n      shortFlag: 'b',\n      default: '',\n      description: 'Branch name'\n    },\n    commitMessage: {\n      type: 'string',\n      shortFlag: 'm',\n      default: '',\n      description: 'Commit message'\n    },\n    commitHash: {\n      type: 'string',\n      shortFlag: 'ch',\n      default: '',\n      description: 'Commit hash'\n    },\n    cwd: {\n      type: 'string',\n      description: 'working directory, defaults to process.cwd()'\n    },\n    dryRun: {\n      type: 'boolean',\n      description:\n        'run input validation part of command without any concrete side effects'\n    },\n    pullRequest: {\n      type: 'number',\n      shortFlag: 'pr',\n      description: 'Commit hash'\n    },\n    committers: {\n      type: 'string',\n      shortFlag: 'c',\n      default: '',\n      description: 'Committers'\n    },\n    defaultBranch: {\n      type: 'boolean',\n      shortFlag: 'db',\n      default: false,\n      description: 'Make default branch'\n    },\n    pendingHead: {\n      type: 'boolean',\n      shortFlag: 'ph',\n      default: false,\n      description: 'Set as pending head'\n    },\n    readOnly: {\n      type: 'boolean',\n      default: false,\n      description:\n        'Similar to --dry-run except it can read from remote, stops before it would create an actual report'\n    },\n    tmp: {\n      type: 'boolean',\n      shortFlag: 't',\n      default: false,\n      description:\n        'Set the visibility (true/false) of the scan in your dashboard'\n    },\n    view: {\n      type: 'boolean',\n      shortFlag: 'v',\n      default: true,\n      description:\n        'Will wait for and return the created report. Use --no-view to disable.'\n    }\n  },\n  // TODO: your project's \"socket.yml\" file's \"projectIgnorePaths\"\n  help: (command, config) => `\n    Usage\n      $ ${command} [...options] <org> <TARGET> [TARGET...]\n\n    Uploads the specified \"package.json\" and lock files for JavaScript, Python,\n    Go, Scala, Gradle, and Kotlin dependency manifests.\n    If any folder is specified, the ones found in there recursively are uploaded.\n\n    Supports globbing such as \"**/package.json\", \"**/requirements.txt\", etc.\n\n    Ignores any file specified in your project's \".gitignore\" and also has a\n    sensible set of default ignores from the \"ignore-by-default\" module.\n\n    TARGET should be a FILE or DIR that _must_ be inside the CWD.\n\n    When a FILE is given only that FILE is targeted. Otherwise any eligible\n    files in the given DIR will be considered.\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} --repo=test-repo --branch=main FakeOrg ./package.json\n  `\n}\n\nexport const cmdScanCreate = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const [orgSlug = '', ...targets] = cli.input\n\n  const cwd =\n    cli.flags['cwd'] && cli.flags['cwd'] !== 'process.cwd()'\n      ? String(cli.flags['cwd'])\n      : process.cwd()\n\n  const { branch: branchName, repo: repoName } = cli.flags\n\n  const apiToken = getDefaultToken() // This checks if we _can_ suggest anything\n\n  if (!apiToken && (!orgSlug || !repoName || !branchName || !targets.length)) {\n    // Without api token we cannot recover because we can't request more info\n    // from the server, to match and help with the current cwd/git status.\n    //\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`\n      ${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Repository name using --repo ${!repoName ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Branch name using --branch ${!branchName ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - At least one TARGET (e.g. \\`.\\` or \\`./package.json\\`) ${!targets.length ? '(missing)' : colors.green('(ok)')}\n\n      (Additionally, no API Token was set so we cannot auto-discover these details)\n    `\n    )\n    return\n  }\n\n  // Note exiting earlier to skirt a hidden auth requirement\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await createFullScan({\n    branchName: branchName as string,\n    commitHash: (cli.flags['commitHash'] as string) ?? '',\n    commitMessage: (cli.flags['commitMessage'] as string) ?? '',\n    committers: (cli.flags['committers'] as string) ?? '',\n    cwd,\n    defaultBranch: Boolean(cli.flags['defaultBranch']),\n    orgSlug,\n    pendingHead: Boolean(cli.flags['pendingHead']),\n    pullRequest: (cli.flags['pullRequest'] as number) ?? undefined,\n    readOnly: Boolean(cli.flags['readOnly']),\n    repoName: repoName as string,\n    targets,\n    tmp: Boolean(cli.flags['tmp'])\n  })\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nexport async function deleteOrgFullScan(\n  orgSlug: string,\n  fullScanId: string\n): Promise<void> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  await deleteOrgFullScanWithToken(orgSlug, fullScanId, apiToken)\n}\nexport async function deleteOrgFullScanWithToken(\n  orgSlug: string,\n  fullScanId: string,\n  apiToken: string\n): Promise<void> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Deleting scan...')\n\n  const socketSdk = await setupSdk(apiToken)\n  const result = await handleApiCall(\n    socketSdk.deleteOrgFullScan(orgSlug, fullScanId),\n    'Deleting scan'\n  )\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('deleteOrgFullScan', result)\n    return\n  }\n\n  spinner.successAndStop('Scan deleted successfully')\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { deleteOrgFullScan } from './delete-full-scan'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'del',\n  description: 'Delete a scan',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug> <scan ID>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeOrg 000aaaa1-0000-0a0a-00a0-00a0000000a0\n  `\n}\n\nexport const cmdScanDel = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const [orgSlug = '', fullScanId = ''] = cli.input\n\n  if (!orgSlug || !fullScanId) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Full Scan ID to delete as second argument ${!fullScanId ? colors.red('(missing!)') : colors.green('(ok)')}`\n    )\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await deleteOrgFullScan(orgSlug, fullScanId)\n}\n","// @ts-ignore\nimport chalkTable from 'chalk-table'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nexport async function listFullScans({\n  direction,\n  from_time,\n  orgSlug,\n  outputKind,\n  page,\n  per_page,\n  sort\n}: {\n  direction: string\n  from_time: string\n  orgSlug: string\n  outputKind: 'json' | 'markdown' | 'print'\n  page: number\n  per_page: number\n  sort: string\n}): Promise<void> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  await listFullScansWithToken({\n    apiToken,\n    direction,\n    from_time,\n    orgSlug,\n    outputKind,\n    page,\n    per_page,\n    sort\n  })\n}\n\nasync function listFullScansWithToken({\n  apiToken,\n  direction,\n  from_time,\n  orgSlug,\n  outputKind,\n  page,\n  per_page,\n  sort\n}: {\n  apiToken: string\n  direction: string\n  from_time: string // seconds\n  orgSlug: string\n  outputKind: 'json' | 'markdown' | 'print'\n  page: number\n  per_page: number\n  sort: string\n}): Promise<void> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Fetching list of scans...')\n\n  const socketSdk = await setupSdk(apiToken)\n  const result = await handleApiCall(\n    socketSdk.getOrgFullScanList(orgSlug, {\n      sort,\n      direction,\n      per_page: String(per_page),\n      page: String(page),\n      from: from_time\n    }),\n    'Listing scans'\n  )\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('getOrgFullScanList', result)\n    return\n  }\n\n  spinner.stop(`Fetch complete`)\n\n  if (outputKind === 'json') {\n    logger.log(result.data)\n    return\n  }\n\n  const options = {\n    columns: [\n      { field: 'id', name: colors.magenta('ID') },\n      { field: 'report_url', name: colors.magenta('Scan URL') },\n      { field: 'branch', name: colors.magenta('Branch') },\n      { field: 'created_at', name: colors.magenta('Created at') }\n    ]\n  }\n\n  const formattedResults = result.data.results.map(d => {\n    return {\n      id: d.id,\n      report_url: colors.underline(`${d.html_report_url}`),\n      created_at: d.created_at\n        ? new Date(d.created_at).toLocaleDateString('en-us', {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric'\n          })\n        : '',\n      branch: d.branch\n    }\n  })\n\n  logger.log(chalkTable(options, formattedResults))\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { listFullScans } from './list-full-scans'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type {\n  CliCommandConfig,\n  CliSubcommand\n} from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'list',\n  description: 'List the scans for an organization',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags,\n    sort: {\n      type: 'string',\n      shortFlag: 's',\n      default: 'created_at',\n      description:\n        'Sorting option (`name` or `created_at`) - default is `created_at`'\n    },\n    direction: {\n      type: 'string',\n      shortFlag: 'd',\n      default: 'desc',\n      description: 'Direction option (`desc` or `asc`) - Default is `desc`'\n    },\n    perPage: {\n      type: 'number',\n      shortFlag: 'pp',\n      default: 30,\n      description: 'Results per page - Default is 30'\n    },\n    page: {\n      type: 'number',\n      shortFlag: 'p',\n      default: 1,\n      description: 'Page number - Default is 1'\n    },\n    fromTime: {\n      type: 'string',\n      shortFlag: 'f',\n      default: '',\n      description: 'From time - as a unix timestamp'\n    },\n    untilTime: {\n      type: 'string',\n      shortFlag: 'u',\n      default: '',\n      description: 'Until time - as a unix timestamp'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeOrg\n  `\n}\n\nexport const cmdScanList: CliSubcommand = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n) {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const orgSlug = cli.input[0]\n\n  if (!orgSlug) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n    - Org name as the argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}`\n    )\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await listFullScans({\n    direction: String(cli.flags['direction'] || ''),\n    from_time: String(cli.flags['fromTime'] || ''),\n    orgSlug,\n    outputKind: cli.flags['json']\n      ? 'json'\n      : cli.flags['markdown']\n        ? 'markdown'\n        : 'print',\n    page: Number(cli.flags['page'] || 1),\n    per_page: Number(cli.flags['perPage'] || 30),\n    sort: String(cli.flags['sort'] || '')\n  })\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nexport async function getOrgScanMetadata(\n  orgSlug: string,\n  scanId: string,\n  outputKind: 'json' | 'markdown' | 'print'\n): Promise<void> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  await getOrgScanMetadataWithToken(orgSlug, scanId, apiToken, outputKind)\n}\nexport async function getOrgScanMetadataWithToken(\n  orgSlug: string,\n  scanId: string,\n  apiToken: string,\n  outputKind: 'json' | 'markdown' | 'print'\n): Promise<void> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  spinner.start('Fetching meta data for a full scan...')\n\n  const socketSdk = await setupSdk(apiToken)\n  const result = await handleApiCall(\n    socketSdk.getOrgFullScanMetadata(orgSlug, scanId),\n    'Listing scans'\n  )\n\n  if (!result.success) {\n    handleUnsuccessfulApiResponse('getOrgFullScanMetadata', result)\n    return\n  }\n\n  spinner?.successAndStop('Fetched the meta data\\n')\n\n  if (outputKind === 'json') {\n    logger.log(result.data)\n  } else {\n    // Markdown = print\n    if (outputKind === 'markdown') {\n      logger.log('# Scan meta data\\n')\n    }\n    logger.log(`Scan ID: ${scanId}\\n`)\n    for (const [key, value] of Object.entries(result.data)) {\n      if (\n        [\n          'id',\n          'updated_at',\n          'organization_id',\n          'repository_id',\n          'commit_hash',\n          'html_report_url'\n        ].includes(key)\n      )\n        continue\n      logger.log(`- ${key}:`, value)\n    }\n    if (outputKind === 'markdown') {\n      logger.log(\n        `\\nYou can view this report at: [${result.data.html_report_url}](${result.data.html_report_url})\\n`\n      )\n    } else {\n      logger.log(\n        `\\nYou can view this report at: ${result.data.html_report_url}]\\n`\n      )\n    }\n  }\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { getOrgScanMetadata } from './get-full-scan-metadata'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type {\n  CliCommandConfig,\n  CliSubcommand\n} from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'metadata',\n  description: \"Get a scan's metadata\",\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug> <scan id>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeOrg 000aaaa1-0000-0a0a-00a0-00a0000000a0\n  `\n}\n\nexport const cmdScanMetadata: CliSubcommand = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const [orgSlug = '', fullScanId = ''] = cli.input\n\n  if (!orgSlug || !fullScanId) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Full Scan ID to inspect as second argument ${!fullScanId ? colors.red('(missing!)') : colors.green('(ok)')}`\n    )\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await getOrgScanMetadata(\n    orgSlug,\n    fullScanId,\n    cli.flags['json'] ? 'json' : cli.flags['markdown'] ? 'markdown' : 'print'\n  )\n}\n","import colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport constants from '../../constants'\nimport { handleAPIError, handleApiCall, queryAPI } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type {\n  SocketSdkResultType,\n  SocketSdkReturnType\n} from '@socketsecurity/sdk'\nimport type { components } from '@socketsecurity/sdk/types/api'\n\n/**\n * This fetches all the relevant pieces of data to generate a report, given a\n * full scan ID.\n * It can optionally only fetch the security or license side of things.\n */\nexport async function fetchReportData(\n  orgSlug: string,\n  fullScanId: string,\n  // includeLicensePolicy: boolean,\n  includeSecurityPolicy: boolean\n): Promise<\n  | {\n      ok: true\n      scan: Array<components['schemas']['SocketArtifact']>\n      // licensePolicy: undefined | SocketSdkReturnType<'getOrgSecurityPolicy'>\n      securityPolicy: undefined | SocketSdkReturnType<'getOrgSecurityPolicy'>\n    }\n  | {\n      ok: false\n      scan: undefined\n      // licensePolicy: undefined\n      securityPolicy: undefined\n    }\n> {\n  let haveScan = false\n  // let haveLicensePolicy = false\n  let haveSecurityPolicy = false\n\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  function updateProgress() {\n    const needs = [\n      !haveScan ? 'scan' : undefined,\n      // includeLicensePolicy && !haveLicensePolicy ? 'license policy' : undefined,\n      includeSecurityPolicy && !haveSecurityPolicy\n        ? 'security policy'\n        : undefined\n    ].filter(Boolean)\n    if (needs.length > 2) {\n      // .toOxford()\n      needs[needs.length - 1] = `and ${needs[needs.length - 1]}`\n    }\n    const haves = [\n      haveScan ? 'scan' : undefined,\n      // includeLicensePolicy && haveLicensePolicy ? 'license policy' : undefined,\n      includeSecurityPolicy && haveSecurityPolicy\n        ? 'security policy'\n        : undefined\n    ].filter(Boolean)\n    if (haves.length > 2) {\n      // .toOxford()\n      haves[haves.length - 1] = `and ${haves[haves.length - 1]}`\n    }\n\n    if (needs.length) {\n      spinner.start(\n        `Fetching ${needs.join(needs.length > 2 ? ', ' : ' and ')}...${haves.length ? ` Completed fetching ${haves.join(haves.length > 2 ? ', ' : ' and ')}.` : ''}`\n      )\n    } else {\n      spinner?.successAndStop(\n        `Completed fetching ${haves.join(haves.length > 2 ? ', ' : ' and ')}.`\n      )\n    }\n  }\n\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  updateProgress()\n\n  const socketSdk = await setupSdk(apiToken)\n\n  // @ts-ignore\n  const [\n    scan,\n    // licensePolicyMaybe,\n    securityPolicyMaybe\n  ]: [\n    undefined | Array<components['schemas']['SocketArtifact']>,\n    // undefined | SocketSdkResultType<'getOrgSecurityPolicy'>,\n    undefined | SocketSdkResultType<'getOrgSecurityPolicy'>\n  ] = await Promise.all([\n    (async () => {\n      try {\n        const response = await queryAPI(\n          `orgs/${orgSlug}/full-scans/${encodeURIComponent(fullScanId)}`,\n          apiToken\n        )\n\n        haveScan = true\n        updateProgress()\n\n        if (!response.ok) {\n          const err = await handleAPIError(response.status)\n          logger.fail(\n            `${colors.bgRed(colors.white(response.statusText))}: Fetch error: ${err}`\n          )\n          return undefined\n        }\n\n        const jsons = await response.text()\n        const lines = jsons.split('\\n').filter(Boolean)\n        const data = lines.map(line => {\n          try {\n            return JSON.parse(line)\n          } catch {\n            console.error(\n              'At least one line item was returned that could not be parsed as JSON...'\n            )\n            return\n          }\n        }) as unknown as Array<components['schemas']['SocketArtifact']>\n\n        return data\n      } catch (e) {\n        spinner.errorAndStop(\n          'There was an issue while fetching full scan data.'\n        )\n        throw e\n      }\n    })(),\n    // includeLicensePolicy &&\n    //   (async () => {\n    //     const r = await socketSdk.getOrgSecurityPolicy(orgSlug)\n    //     haveLicensePolicy = true\n    //     updateProgress()\n    //     return await handleApiCall(\n    //       r,\n    //       \"looking up organization's license policy\"\n    //     )\n    //   })(),\n    includeSecurityPolicy &&\n      (async () => {\n        const r = await socketSdk.getOrgSecurityPolicy(orgSlug)\n        haveSecurityPolicy = true\n        updateProgress()\n        return await handleApiCall(\n          r,\n          \"looking up organization's security policy\"\n        )\n      })()\n  ]).finally(() => spinner.stop())\n\n  if (!Array.isArray(scan)) {\n    logger.error('Was unable to fetch scan, bailing')\n    process.exitCode = 1\n    return {\n      ok: false,\n      scan: undefined,\n      // licensePolicy: undefined,\n      securityPolicy: undefined\n    }\n  }\n\n  // // Note: security->license once the api ships in the sdk\n  // let licensePolicy: undefined | SocketSdkReturnType<'getOrgSecurityPolicy'> =\n  //   undefined\n  // if (includeLicensePolicy) {\n  //   if (licensePolicyMaybe && licensePolicyMaybe.success) {\n  //     licensePolicy = licensePolicyMaybe\n  //   } else {\n  //     logger.error('Was unable to fetch license policy, bailing')\n  //     process.exitCode = 1\n  //     return {\n  //       ok: false,\n  //       scan: undefined,\n  //       licensePolicy: undefined,\n  //       securityPolicy: undefined\n  //     }\n  //   }\n  // }\n\n  let securityPolicy: undefined | SocketSdkReturnType<'getOrgSecurityPolicy'> =\n    undefined\n  if (includeSecurityPolicy) {\n    if (securityPolicyMaybe && securityPolicyMaybe.success) {\n      securityPolicy = securityPolicyMaybe\n    } else {\n      logger.error('Was unable to fetch security policy, bailing')\n      process.exitCode = 1\n      return {\n        ok: false,\n        scan: undefined,\n        // licensePolicy: undefined,\n        securityPolicy: undefined\n      }\n    }\n  }\n\n  return {\n    ok: true,\n    scan,\n    // licensePolicy,\n    securityPolicy\n  }\n}\n","import constants from '../../constants'\n\nimport type { SocketSdkReturnType } from '@socketsecurity/sdk'\nimport type { components } from '@socketsecurity/sdk/types/api'\n\ntype AlertAction = 'defer' | 'ignore' | 'monitor' | 'error' | 'warn'\ntype AlertKey = string\n\ntype FileMap = Map<string, ReportLeafNode | Map<AlertKey, ReportLeafNode>>\ntype VersionMap = Map<string, ReportLeafNode | FileMap>\ntype PackageMap = Map<string, ReportLeafNode | VersionMap>\ntype EcoMap = Map<string, ReportLeafNode | PackageMap>\nexport type ViolationsMap = Map<string, EcoMap>\n\nexport interface ShortScanReport {\n  healthy: boolean\n}\nexport interface ScanReport {\n  orgSlug: string\n  scanId: string\n  options: { fold: string; reportLevel: string }\n  healthy: boolean\n  alerts: ViolationsMap\n}\n\nexport type ReportLeafNode = {\n  type: string\n  policy: 'defer' | 'ignore' | 'monitor' | 'warn' | 'error'\n  url: string\n  manifest: string[]\n}\n\nexport function generateReport(\n  scan: Array<components['schemas']['SocketArtifact']>,\n  _licensePolicy: undefined | SocketSdkReturnType<'getOrgSecurityPolicy'>,\n  securityPolicy: undefined | SocketSdkReturnType<'getOrgSecurityPolicy'>,\n  {\n    fold,\n    orgSlug,\n    reportLevel,\n    scanId,\n    short\n  }: {\n    fold: 'pkg' | 'version' | 'file' | 'none'\n    orgSlug: string\n    reportLevel: 'defer' | 'ignore' | 'monitor' | 'warn' | 'error'\n    scanId: string\n    short: boolean\n  }\n): ScanReport | ShortScanReport {\n  const now = Date.now()\n\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n  spinner.start('Generating report...')\n\n  // Create an object that includes:\n  //   healthy: boolean\n  //   worst violation level;\n  //   per eco\n  //     per package\n  //       per version\n  //         per offending file\n  //           reported issue -> policy action\n\n  // In the context of a report;\n  // - the alert.severity is irrelevant\n  // - the securityPolicyDefault is irrelevant\n  // - the report defaults to healthy:true with no alerts\n  // - the appearance of an alert will trigger the policy action;\n  //   - error: healthy will end up as false, add alerts to report\n  //   - warn: healthy unchanged, add alerts to report\n  //   - monitor/ignore: no action\n  //   - defer: unknown (no action)\n\n  const violations = new Map()\n\n  let healthy = true\n\n  const securityRules: SocketSdkReturnType<'getOrgSecurityPolicy'>['data']['securityPolicyRules'] =\n    securityPolicy?.data.securityPolicyRules\n  if (securityPolicy && securityRules) {\n    // Note: reportLevel: error > warn > monitor > ignore > defer\n    scan.forEach(artifact => {\n      const {\n        alerts,\n        name: pkgName = '<unknown>',\n        type: ecosystem,\n        version = '<unknown>'\n      } = artifact\n\n      alerts?.forEach(\n        (\n          alert: NonNullable<\n            components['schemas']['SocketArtifact']['alerts']\n          >[number]\n        ) => {\n          const alertName = alert.type as keyof typeof securityRules // => policy[type]\n          const action = securityRules[alertName]?.action || ''\n          switch (action) {\n            case 'error': {\n              healthy = false\n              if (!short) {\n                addAlert(\n                  artifact,\n                  violations,\n                  fold,\n                  ecosystem,\n                  pkgName,\n                  version,\n                  alert,\n                  action\n                )\n              }\n              break\n            }\n            case 'warn': {\n              if (!short && reportLevel !== 'error') {\n                addAlert(\n                  artifact,\n                  violations,\n                  fold,\n                  ecosystem,\n                  pkgName,\n                  version,\n                  alert,\n                  action\n                )\n              }\n              break\n            }\n            case 'monitor': {\n              if (!short && reportLevel !== 'warn' && reportLevel !== 'error') {\n                addAlert(\n                  artifact,\n                  violations,\n                  fold,\n                  ecosystem,\n                  pkgName,\n                  version,\n                  alert,\n                  action\n                )\n              }\n              break\n            }\n\n            case 'ignore': {\n              if (\n                !short &&\n                reportLevel !== 'warn' &&\n                reportLevel !== 'error' &&\n                reportLevel !== 'monitor'\n              ) {\n                addAlert(\n                  artifact,\n                  violations,\n                  fold,\n                  ecosystem,\n                  pkgName,\n                  version,\n                  alert,\n                  action\n                )\n              }\n              break\n            }\n\n            case 'defer': {\n              // Not sure but ignore for now. Defer to later ;)\n              if (!short && reportLevel === 'defer') {\n                addAlert(\n                  artifact,\n                  violations,\n                  fold,\n                  ecosystem,\n                  pkgName,\n                  version,\n                  alert,\n                  action\n                )\n              }\n              break\n            }\n\n            default: {\n              // This value was not emitted from the api at the time of writing.\n            }\n          }\n        }\n      )\n    })\n  }\n\n  spinner.successAndStop(`Generated reported in ${Date.now() - now} ms`)\n\n  const report = short\n    ? { healthy }\n    : {\n        healthy,\n        orgSlug,\n        scanId,\n        options: { fold, reportLevel },\n        alerts: violations\n      }\n\n  return report\n}\n\nfunction createLeaf(\n  art: components['schemas']['SocketArtifact'],\n  alert: NonNullable<components['schemas']['SocketArtifact']['alerts']>[number],\n  policyAction: AlertAction\n): ReportLeafNode {\n  const leaf: ReportLeafNode = {\n    type: alert.type,\n    policy: policyAction,\n    url: `https://socket.dev/${art.type}/package/${art.name}/${art.version}`,\n    manifest: art.manifestFiles?.map(obj => obj.file) ?? []\n  }\n  return leaf\n}\n\nfunction addAlert(\n  art: components['schemas']['SocketArtifact'],\n  violations: ViolationsMap,\n  foldSetting: 'pkg' | 'version' | 'file' | 'none',\n  ecosystem: string,\n  pkgName: string,\n  version: string,\n  alert: NonNullable<components['schemas']['SocketArtifact']['alerts']>[number],\n  policyAction: AlertAction\n): void {\n  if (!violations.has(ecosystem)) violations.set(ecosystem, new Map())\n  const ecomap: EcoMap = violations.get(ecosystem)!\n  if (foldSetting === 'pkg') {\n    const existing = ecomap.get(pkgName) as ReportLeafNode | undefined\n    if (!existing || isStricterPolicy(existing.policy, policyAction)) {\n      ecomap.set(pkgName, createLeaf(art, alert, policyAction))\n    }\n  } else {\n    if (!ecomap.has(pkgName)) ecomap.set(pkgName, new Map())\n    const pkgmap = ecomap.get(pkgName) as PackageMap\n    if (foldSetting === 'version') {\n      const existing = pkgmap.get(version) as ReportLeafNode | undefined\n      if (!existing || isStricterPolicy(existing.policy, policyAction)) {\n        pkgmap.set(version, createLeaf(art, alert, policyAction))\n      }\n    } else {\n      if (!pkgmap.has(version)) pkgmap.set(version, new Map())\n      const file = alert.file || '<unknown>'\n      const vermap = pkgmap.get(version) as VersionMap\n\n      if (foldSetting === 'file') {\n        const existing = vermap.get(file) as ReportLeafNode | undefined\n        if (!existing || isStricterPolicy(existing.policy, policyAction)) {\n          vermap.set(file, createLeaf(art, alert, policyAction))\n        }\n      } else {\n        if (!vermap.has(file)) vermap.set(file, new Map())\n        const key = `${alert.type} at ${alert.start}:${alert.end}`\n        const filemap: FileMap = vermap.get(file) as FileMap\n        const existing = filemap.get(key) as ReportLeafNode | undefined\n        if (!existing || isStricterPolicy(existing.policy, policyAction)) {\n          filemap.set(key, createLeaf(art, alert, policyAction))\n        }\n      }\n    }\n  }\n}\n\nfunction isStricterPolicy(\n  was: 'error' | 'warn' | 'monitor' | 'ignore' | 'defer',\n  is: 'error' | 'warn' | 'monitor' | 'ignore' | 'defer'\n): boolean {\n  // error > warn > monitor > ignore > defer > {unknown}\n  if (was === 'error') return false\n  if (is === 'error') return true\n  if (was === 'warn') return false\n  if (is === 'warn') return false\n  if (was === 'monitor') return false\n  if (is === 'monitor') return false\n  if (was === 'ignore') return false\n  if (is === 'ignore') return false\n  if (was === 'defer') return false\n  if (is === 'defer') return false\n  // unreachable?\n  return false\n}\n","interface NestedRecord<T> {\n  [key: string]: T | NestedRecord<T>\n}\n\n/**\n * Convert a Map<string, Map|string> to a nested object of similar shape.\n * The goal is to serialize it with JSON.stringify, which Map can't do.\n */\nexport function mapToObject<T>(\n  map: Map<string, T | Map<string, T | Map<string, T>>>\n): NestedRecord<T> {\n  return Object.fromEntries(\n    Array.from(map.entries()).map(([k, v]) => [\n      k,\n      v instanceof Map ? mapToObject(v) : v\n    ])\n  )\n}\n","type NestedMap<T> = Map<string, T | NestedMap<T>>\n\nexport function* walkNestedMap<T>(\n  map: NestedMap<T>,\n  keys: string[] = []\n): Generator<{ keys: string[]; value: T }> {\n  for (const [key, value] of map.entries()) {\n    if (value instanceof Map) {\n      yield* walkNestedMap(value as NestedMap<T>, keys.concat(key))\n    } else {\n      yield { keys: keys.concat(key), value: value }\n    }\n  }\n}\n","import fs from 'node:fs/promises'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { fetchReportData } from './fetch-report-data'\nimport { generateReport } from './generate-report'\nimport { mapToObject } from '../../utils/map-to-object'\nimport { mdTable } from '../../utils/markdown'\nimport { walkNestedMap } from '../../utils/walk-nested-map'\n\nimport type { ReportLeafNode, ScanReport } from './generate-report'\n\nexport async function reportFullScan({\n  filePath,\n  fold,\n  fullScanId,\n  includeLicensePolicy,\n  includeSecurityPolicy,\n  orgSlug,\n  outputKind,\n  reportLevel,\n  short\n}: {\n  orgSlug: string\n  fullScanId: string\n  includeLicensePolicy: boolean\n  includeSecurityPolicy: boolean\n  outputKind: 'json' | 'markdown' | 'text'\n  filePath: string\n  fold: 'pkg' | 'version' | 'file' | 'none'\n  reportLevel: 'defer' | 'ignore' | 'monitor' | 'warn' | 'error'\n  short: boolean\n}): Promise<void> {\n  logger.error(\n    'output:',\n    outputKind,\n    ', file:',\n    filePath,\n    ', fold:',\n    fold,\n    ', reportLevel:',\n    reportLevel\n  )\n  if (!includeLicensePolicy && !includeSecurityPolicy) {\n    return // caller should assert\n  }\n\n  const {\n    // licensePolicy,\n    ok,\n    scan,\n    securityPolicy\n  } = await fetchReportData(\n    orgSlug,\n    fullScanId,\n    // includeLicensePolicy\n    includeSecurityPolicy\n  )\n\n  if (!ok) {\n    return\n  }\n\n  const scanReport = generateReport(\n    scan,\n    undefined, // licensePolicy,\n    securityPolicy,\n    {\n      orgSlug,\n      scanId: fullScanId,\n      fold,\n      short,\n      reportLevel\n    }\n  )\n\n  if (!scanReport.healthy) {\n    process.exitCode = 1\n  }\n\n  if (\n    outputKind === 'json' ||\n    (outputKind === 'text' && filePath && filePath.endsWith('.json'))\n  ) {\n    const json = short\n      ? JSON.stringify(scanReport)\n      : toJsonReport(scanReport as ScanReport)\n\n    if (filePath && filePath !== '-') {\n      logger.log('Writing json report to', filePath)\n      return await fs.writeFile(filePath, json)\n    }\n\n    logger.log(json)\n    return\n  }\n\n  if (outputKind === 'markdown' || (filePath && filePath.endsWith('.md'))) {\n    const md = short\n      ? `healthy = ${scanReport.healthy}`\n      : toMarkdownReport(scanReport as ScanReport)\n\n    if (filePath && filePath !== '-') {\n      logger.log('Writing markdown report to', filePath)\n      return await fs.writeFile(filePath, md)\n    }\n\n    logger.log(md)\n    return\n  }\n\n  if (short) {\n    logger.log(scanReport.healthy ? 'OK' : 'ERR')\n  } else {\n    logger.dir(scanReport, { depth: null })\n  }\n}\n\nexport function toJsonReport(report: ScanReport): string {\n  const obj = mapToObject(report.alerts)\n\n  const json = JSON.stringify(\n    {\n      ...report,\n      alerts: obj\n    },\n    null,\n    2\n  )\n\n  return json\n}\n\nexport function toMarkdownReport(report: ScanReport): string {\n  const flatData = Array.from(walkNestedMap(report.alerts)).map(\n    ({ keys, value }: { keys: string[]; value: ReportLeafNode }) => {\n      const { manifest, policy, type, url } = value\n      return {\n        'Alert Type': type,\n        Package: keys[1] || '<unknown>',\n        'Introduced by': keys[2] || '<unknown>',\n        url,\n        'Manifest file': manifest.join(', '),\n        Policy: policy\n      }\n    }\n  )\n\n  const md =\n    `\n# Scan Policy Report\n\nThis report tells you whether the results of a Socket scan results violate the\nsecurity or license policy set by your organization.\n\n## Health status\n\n${\n  report.healthy\n    ? 'The scan *PASSES* all requirements set by your security and license policy.'\n    : 'The scan *VIOLATES* one or more policies set to the \"error\" level.'\n}\n\n## Settings\n\nConfiguration used to generate this report:\n\n- Organization: ${report.orgSlug}\n- Scan ID: ${report.scanId}\n- Alert folding: ${report.options.fold === 'none' ? 'none' : `up to ${report.options.fold}`}\n- Minimal policy level for alert to be included in report: ${report.options.reportLevel === 'defer' ? 'everything' : report.options.reportLevel}\n\n## Alerts\n\n${\n  report.alerts.size\n    ? `All the alerts from the scan with a policy set to at least \"${report.options.reportLevel}\"}.`\n    : `The scan contained no alerts for with a policy set to at least \"${report.options.reportLevel}\".`\n}\n\n${\n  !report.alerts.size\n    ? ''\n    : mdTable(flatData, [\n        'Policy',\n        'Alert Type',\n        'Package',\n        'Introduced by',\n        'url',\n        'Manifest file'\n      ])\n}\n  `.trim() + '\\n'\n\n  return md\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { reportFullScan } from './report-full-scan'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type {\n  CliCommandConfig,\n  CliSubcommand\n} from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'report',\n  description:\n    'Check whether a scan result passes the organizational policies (security, license)',\n  hidden: true, // [beta]\n  flags: {\n    ...commonFlags,\n    ...outputFlags,\n    fold: {\n      type: 'string',\n      default: 'none',\n      description: 'Fold reported alerts to some degree'\n    },\n    reportLevel: {\n      type: 'string',\n      default: 'warn',\n      description: 'Which policy level alerts should be reported'\n    },\n    short: {\n      type: 'boolean',\n      default: false,\n      description: 'Report only the healthy status'\n    },\n    // license: {\n    //   type: 'boolean',\n    //   default: true,\n    //   description: 'Report the license policy status. Default: true'\n    // },\n    security: {\n      type: 'boolean',\n      default: true,\n      description: 'Report the security policy status. Default: true'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug> <scan ID> [path to output file]\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    This consumes 1 quota unit plus 1 for each of the requested policy types.\n\n    Note: By default it reports both so by default it consumes 3 quota units.\n\n    Your API token will need the \\`full-scans:list\\` scope regardless. Additionally\n    it needs \\`security-policy:read\\` to report on the security policy.\n\n    By default the result is a nested object that looks like this:\n      \\`{[ecosystem]: {[pkgName]: {[version]: {[file]: {[type:loc]: policy}}}}\\`\n    You can fold this up to given level: 'pkg', 'version', 'file', and 'none'.\n\n    By default only the warn and error policy level alerts are reported. You can\n    override this and request more ('defer' < 'ignore' < 'monitor' < 'warn' < 'error')\n\n    Short responses: JSON: \\`{healthy:bool}\\`, markdown: \\`healthy = bool\\`, text: \\`OK/ERR\\`\n\n    Examples\n      $ ${command} FakeOrg 000aaaa1-0000-0a0a-00a0-00a0000000a0 --json --fold=version\n  `\n}\n\nexport const cmdScanReport: CliSubcommand = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const {\n    fold = 'none',\n    json,\n    // license,\n    markdown,\n    reportLevel = 'warn',\n    security\n  } = cli.flags\n\n  const [orgSlug = '', fullScanId = '', file = '-'] = cli.input\n\n  if (\n    !orgSlug ||\n    !fullScanId ||\n    // (!license && !security) ||\n    (json && markdown)\n  ) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`\n      ${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Full Scan ID to fetch as second argument ${!fullScanId ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Not both the --json and --markdown flags ${json && markdown ? colors.red('(pick one!)') : colors.green('(ok)')}\n    `\n      // - At least one policy to report ${!license && !security ? colors.red('(do not omit both!)') : colors.green('(ok)')}\n    )\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await reportFullScan({\n    orgSlug,\n    fullScanId,\n    includeLicensePolicy: false, // !!license,\n    includeSecurityPolicy: typeof security === 'boolean' ? security : true,\n    outputKind: json ? 'json' : markdown ? 'markdown' : 'text',\n    filePath: file,\n    fold: fold as 'none' | 'file' | 'pkg' | 'version',\n    short: !!cli.flags['short'],\n    reportLevel: reportLevel as\n      | 'warn'\n      | 'error'\n      | 'defer'\n      | 'ignore'\n      | 'monitor'\n  })\n}\n","import constants from '../../constants'\nimport { handleApiCall, handleUnsuccessfulApiResponse } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken, setupSdk } from '../../utils/sdk'\n\nimport type { SocketSdkResultType } from '@socketsecurity/sdk'\n\nexport async function streamFullScan(\n  orgSlug: string,\n  fullScanId: string,\n  file: string | undefined\n): Promise<SocketSdkResultType<'getOrgFullScan'> | undefined> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  spinner.start('Fetching scan...')\n\n  const socketSdk = await setupSdk(apiToken)\n  const data = await handleApiCall(\n    socketSdk.getOrgFullScan(\n      orgSlug,\n      fullScanId,\n      file === '-' ? undefined : file\n    ),\n    'Fetching a scan'\n  )\n\n  if (!data?.success) {\n    handleUnsuccessfulApiResponse('getOrgFullScan', data)\n    return\n  }\n\n  spinner?.successAndStop(\n    file ? `Full scan details written to ${file}` : 'stdout'\n  )\n\n  return data\n}\n","import fs from 'node:fs/promises'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { getFullScan } from './get-full-scan'\nimport { mdTable } from '../../utils/markdown'\n\nimport type { components } from '@socketsecurity/sdk/types/api'\n\nexport async function viewFullScan(\n  orgSlug: string,\n  fullScanId: string,\n  filePath: string\n): Promise<void> {\n  const artifacts: Array<components['schemas']['SocketArtifact']> | undefined =\n    await getFullScan(orgSlug, fullScanId)\n  if (!artifacts) return\n\n  const display = artifacts.map(art => {\n    const author = Array.isArray(art.author)\n      ? `${art.author[0]}${art.author.length > 1 ? ' et.al.' : ''}`\n      : art.author\n    return {\n      type: art.type,\n      name: art.name,\n      version: art.version,\n      author,\n      score: JSON.stringify(art.score)\n    }\n  })\n\n  const md = mdTable<any>(display, [\n    'type',\n    'version',\n    'name',\n    'author',\n    'score'\n  ])\n\n  const report =\n    `\n# Scan Details\n\nThese are the artifacts and their scores found.\n\nSscan ID: ${fullScanId}\n\n${md}\n\nView this report at: https://socket.dev/dashboard/org/${orgSlug}/sbom/${fullScanId}\n  `.trim() + '\\n'\n\n  if (filePath && filePath !== '-') {\n    try {\n      await fs.writeFile(filePath, report, 'utf8')\n      logger.log(`Data successfully written to ${filePath}`)\n    } catch (e) {\n      process.exitCode = 1\n      logger.fail('There was an error trying to write the json to disk')\n      logger.error(e)\n    }\n  } else {\n    logger.log(report)\n  }\n}\n","import { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { streamFullScan } from './stream-full-scan'\nimport { viewFullScan } from './view-full-scan'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type {\n  CliCommandConfig,\n  CliSubcommand\n} from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'view',\n  description: 'View the raw results of a scan',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <org slug> <scan ID> [path to output file]\n\n    When no output path is given the contents is sent to stdout.\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} FakeOrg 000aaaa1-0000-0a0a-00a0-00a0000000a0 ./stream.txt\n  `\n}\n\nexport const cmdScanView: CliSubcommand = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: string[] | readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const [orgSlug = '', fullScanId = '', file = '-'] = cli.input\n\n  if (!orgSlug || !fullScanId) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`\n      ${colors.bgRed(colors.white('Input error'))}: Please provide the required fields:\n\n      - Org name as the first argument ${!orgSlug ? colors.red('(missing!)') : colors.green('(ok)')}\n\n      - Full Scan ID to fetch as second argument ${!fullScanId ? colors.red('(missing!)') : colors.green('(ok)')}\n    `\n    )\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  if (cli.flags['json']) {\n    await streamFullScan(orgSlug, fullScanId, file)\n  } else {\n    await viewFullScan(orgSlug, fullScanId, file)\n  }\n}\n","import { cmdScanCreate } from './cmd-scan-create'\nimport { cmdScanDel } from './cmd-scan-del'\nimport { cmdScanList } from './cmd-scan-list'\nimport { cmdScanMetadata } from './cmd-scan-metadata'\nimport { cmdScanReport } from './cmd-scan-report'\nimport { cmdScanView } from './cmd-scan-view'\nimport { meowWithSubcommands } from '../../utils/meow-with-subcommands'\n\nimport type { CliSubcommand } from '../../utils/meow-with-subcommands'\n\nconst description = 'Full Scan related commands'\n\nexport const cmdScan: CliSubcommand = {\n  description,\n  async run(argv, importMeta, { parentName }) {\n    await meowWithSubcommands(\n      {\n        create: cmdScanCreate,\n        list: cmdScanList,\n        del: cmdScanDel,\n        metadata: cmdScanMetadata,\n        report: cmdScanReport,\n        view: cmdScanView\n      },\n      {\n        aliases: {\n          // Backwards compat. TODO: Drop next major bump\n          stream: {\n            description: cmdScanView.description,\n            hidden: true,\n            argv: ['view'] // Original args will be appended (!)\n          }\n        },\n        argv,\n        description,\n        importMeta,\n        name: parentName + ' scan'\n      }\n    )\n  }\n}\n","import process from 'node:process'\n\n// @ts-ignore\nimport BoxWidget from 'blessed/lib/widgets/box'\n// @ts-ignore\nimport ScreenWidget from 'blessed/lib/widgets/screen'\n// @ts-ignore\nimport TableWidget from 'blessed-contrib/lib/widget/table'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport constants from '../../constants'\nimport { queryAPI } from '../../utils/api'\nimport { AuthError } from '../../utils/errors'\nimport { getDefaultToken } from '../../utils/sdk'\n\nimport type { Widgets } from 'blessed' // Note: Widgets does not seem to actually work as code :'(\n\ntype ThreatResult = {\n  createdAt: string\n  description: string\n  id: number\n  locationHtmlUrl: string\n  packageHtmlUrl: string\n  purl: string\n  removedAt: string\n  threatType: string\n}\n\nexport async function getThreatFeed({\n  direction,\n  ecosystem,\n  filter,\n  outputKind,\n  page,\n  perPage\n}: {\n  direction: string\n  ecosystem: string\n  filter: string\n  outputKind: 'json' | 'markdown' | 'print'\n  page: string\n  perPage: number\n}): Promise<void> {\n  const apiToken = getDefaultToken()\n  if (!apiToken) {\n    throw new AuthError(\n      'User must be authenticated to run this command. To log in, run the command `socket login` and enter your API key.'\n    )\n  }\n\n  await getThreatFeedWithToken({\n    apiToken,\n    direction,\n    ecosystem,\n    filter,\n    outputKind,\n    page,\n    perPage\n  })\n}\n\nasync function getThreatFeedWithToken({\n  apiToken,\n  direction,\n  ecosystem,\n  filter,\n  outputKind,\n  page,\n  perPage\n}: {\n  apiToken: string\n  direction: string\n  ecosystem: string\n  filter: string\n  outputKind: 'json' | 'markdown' | 'print'\n  page: string\n  perPage: number\n}): Promise<void> {\n  // Lazily access constants.spinner.\n  const { spinner } = constants\n\n  const queryParams = new URLSearchParams([\n    ['direction', direction],\n    ['ecosystem', ecosystem],\n    ['filter', filter],\n    ['page', page],\n    ['per_page', String(perPage)]\n  ])\n\n  spinner.start('Fetching Threat Feed data...')\n\n  const response = await queryAPI(`threat-feed?${queryParams}`, apiToken)\n  const data = (await response.json()) as {\n    results: ThreatResult[]\n    nextPage: string\n  }\n\n  spinner.stop('Threat feed data fetched')\n\n  if (outputKind === 'json') {\n    logger.log(data)\n    return\n  }\n\n  const screen: Widgets.Screen = new ScreenWidget()\n\n  const table: any = new TableWidget({\n    keys: 'true',\n    fg: 'white',\n    selectedFg: 'white',\n    selectedBg: 'magenta',\n    interactive: 'true',\n    label: 'Threat feed',\n    width: '100%',\n    height: '70%', // Changed from 100% to 70%\n    border: {\n      type: 'line',\n      fg: 'cyan'\n    },\n    columnWidth: [10, 30, 20, 18, 15, 200],\n    // TODO: the truncation doesn't seem to work too well yet but when we add\n    //       `pad` alignment fails, when we extend columnSpacing alignment fails\n    columnSpacing: 1,\n    truncate: '_'\n  })\n\n  // Create details box at the bottom\n  const detailsBox: Widgets.BoxElement = new BoxWidget({\n    bottom: 0,\n    height: '30%',\n    width: '100%',\n    border: {\n      type: 'line',\n      fg: 'cyan'\n    },\n    label: 'Details',\n    content:\n      'Use arrow keys to navigate. Press Enter to select a threat. Press q to exit.',\n    style: {\n      fg: 'white'\n    }\n  })\n\n  // allow control the table with the keyboard\n  table.focus()\n\n  screen.append(table)\n  screen.append(detailsBox)\n\n  const formattedOutput = formatResults(data.results)\n  const descriptions = data.results.map(d => d.description)\n\n  table.setData({\n    headers: [\n      ' Ecosystem',\n      ' Name',\n      '  Version',\n      '  Threat type',\n      '  Detected at',\n      ' Details'\n    ],\n    data: formattedOutput\n  })\n\n  // Update details box when selection changes\n  table.rows.on('select item', () => {\n    const selectedIndex = table.rows.selected\n    if (selectedIndex !== undefined && selectedIndex >= 0) {\n      const selectedRow = formattedOutput[selectedIndex]\n      if (selectedRow) {\n        // Note: the spacing works around issues with the table; it refuses to pad!\n        detailsBox.setContent(\n          `Ecosystem: ${selectedRow[0]}\\n` +\n            `Name: ${selectedRow[1]}\\n` +\n            `Version:${selectedRow[2]}\\n` +\n            `Threat type:${selectedRow[3]}\\n` +\n            `Detected at:${selectedRow[4]}\\n` +\n            `Details: ${selectedRow[5]}\\n` +\n            `Description: ${descriptions[selectedIndex]}`\n        )\n        screen.render()\n      }\n    }\n  })\n\n  screen.render()\n\n  screen.key(['escape', 'q', 'C-c'], () => process.exit(0))\n  screen.key(['return'], () => {\n    const selectedIndex = table.rows.selected\n    screen.destroy()\n    const selectedRow = formattedOutput[selectedIndex]\n    console.log(selectedRow)\n  })\n}\n\nfunction formatResults(data: ThreatResult[]) {\n  return data.map(d => {\n    const ecosystem = d.purl.split('pkg:')[1]!.split('/')[0]!\n    const name = d.purl.split('/')[1]!.split('@')[0]!\n    const version = d.purl.split('@')[1]!\n\n    const timeDiff = msAtHome(d.createdAt)\n\n    // Note: the spacing works around issues with the table; it refuses to pad!\n    return [\n      ecosystem,\n      decodeURIComponent(name),\n      ` ${version}`,\n      ` ${d.threatType}`,\n      ` ${timeDiff}`,\n      d.locationHtmlUrl\n    ]\n  })\n}\n\nfunction msAtHome(isoTimeStamp: string): string {\n  const timeStart = Date.parse(isoTimeStamp)\n  const timeEnd = Date.now()\n\n  const rtf = new Intl.RelativeTimeFormat('en', {\n    numeric: 'always',\n    style: 'short'\n  })\n\n  const delta = timeEnd - timeStart\n  if (delta < 60 * 60 * 1000) {\n    return rtf.format(-Math.round(delta / (60 * 1000)), 'minute')\n    // return Math.round(delta / (60 * 1000)) + ' min ago'\n  } else if (delta < 24 * 60 * 60 * 1000) {\n    return rtf.format(-(delta / (60 * 60 * 1000)).toFixed(1), 'hour')\n    // return (delta / (60 * 60 * 1000)).toFixed(1) + ' hr ago'\n  } else if (delta < 7 * 24 * 60 * 60 * 1000) {\n    return rtf.format(-(delta / (24 * 60 * 60 * 1000)).toFixed(1), 'day')\n    // return (delta / (24 * 60 * 60 * 1000)).toFixed(1) + ' day ago'\n  } else {\n    return isoTimeStamp.slice(0, 10)\n  }\n}\n","import { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { getThreatFeed } from './get-threat-feed'\nimport constants from '../../constants'\nimport { commonFlags, outputFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'threat-feed',\n  description: '[beta] View the threat feed',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    ...outputFlags,\n    perPage: {\n      type: 'number',\n      shortFlag: 'pp',\n      default: 30,\n      description: 'Number of items per page'\n    },\n    page: {\n      type: 'string',\n      shortFlag: 'p',\n      default: '1',\n      description: 'Page token'\n    },\n    direction: {\n      type: 'string',\n      shortFlag: 'd',\n      default: 'desc',\n      description: 'Order asc or desc by the createdAt attribute.'\n    },\n    eco: {\n      type: 'string',\n      shortFlag: 'e',\n      default: '',\n      description: 'Only show threats for a particular ecosystem'\n    },\n    filter: {\n      type: 'string',\n      shortFlag: 'f',\n      default: 'mal',\n      description: 'Filter what type of threats to return'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command}\n\n    This feature requires a Threat Feed license. Please contact\n    sales@socket.dev if you are interested in purchasing this access.\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Valid filters:\n\n      - anom    Anomaly\n      - c       Do not filter\n      - fp      False Positives\n      - joke    Joke / Fake\n      - mal     Malware and Possible Malware [default]\n      - secret  Secrets\n      - spy     Telemetry\n      - tp      False Positives and Unreviewed\n      - typo    Typo-squat\n      - u       Unreviewed\n      - vuln    Vulnerability\n\n    Valid ecosystems:\n\n      - gem\n      - golang\n      - maven\n      - npm\n      - nuget\n      - pypi\n\n    Examples\n      $ ${command}\n      $ ${command} --perPage=5 --page=2 --direction=asc --filter=joke\n  `\n}\n\nexport const cmdThreatFeed = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  await getThreatFeed({\n    direction: String(cli.flags['direction'] || 'desc'),\n    ecosystem: String(cli.flags['eco'] || ''),\n    filter: String(cli.flags['filter'] || 'mal'),\n    outputKind: cli.flags['json']\n      ? 'json'\n      : cli.flags['markdown']\n        ? 'markdown'\n        : 'print',\n    page: String(cli.flags['page'] || '1'),\n    perPage: Number(cli.flags['perPage']) || 30\n  })\n}\n","import fs from 'node:fs'\n\nimport { stripIndents } from 'common-tags'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nexport function addSocketWrapper(file: string): void {\n  return fs.appendFile(\n    file,\n    'alias npm=\"socket npm\"\\nalias npx=\"socket npx\"\\n',\n    err => {\n      if (err) {\n        return new Error(`There was an error setting up the alias: ${err}`)\n      }\n      // TODO: pretty sure you need to source the file or restart\n      //       any terminal session before changes are reflected.\n      logger.log(\n        stripIndents`\nThe alias was added to ${file}. Running 'npm install' will now be wrapped in Socket's \"safe npm\" 🎉\nIf you want to disable it at any time, run \\`socket wrapper --disable\\`\n`\n      )\n    }\n  )\n}\n","import fs from 'node:fs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nexport function checkSocketWrapperSetup(file: string): boolean {\n  const fileContent = fs.readFileSync(file, 'utf8')\n  const linesWithSocketAlias = fileContent\n    .split('\\n')\n    .filter(\n      l => l === 'alias npm=\"socket npm\"' || l === 'alias npx=\"socket npx\"'\n    )\n\n  if (linesWithSocketAlias.length) {\n    logger.log(\n      `The Socket npm/npx wrapper is set up in your bash profile (${file}).`\n    )\n    return true\n  }\n  return false\n}\n","import { existsSync } from 'node:fs'\nimport process from 'node:process'\nimport readline from 'node:readline'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { addSocketWrapper } from './add-socket-wrapper'\nimport { checkSocketWrapperSetup } from './check-socket-wrapper-setup'\nimport constants from '../../constants'\n\nexport function postinstallWrapper() {\n  // Lazily access constants.bashRcPath and constants.zshRcPath.\n  const { bashRcPath, zshRcPath } = constants\n  const socketWrapperEnabled =\n    (existsSync(bashRcPath) && checkSocketWrapperSetup(bashRcPath)) ||\n    (existsSync(zshRcPath) && checkSocketWrapperSetup(zshRcPath))\n\n  if (!socketWrapperEnabled) {\n    installSafeNpm(`The Socket CLI is now successfully installed! 🎉\n\n      To better protect yourself against supply-chain attacks, our \"safe npm\" wrapper can warn you about malicious packages whenever you run 'npm install'.\n\n      Do you want to install \"safe npm\" (this will create an alias to the socket-npm command)? (y/n)`)\n  }\n}\n\nfunction installSafeNpm(query: string): void {\n  logger.log(`\n _____         _       _\n|   __|___ ___| |_ ___| |_\n|__   | . |  _| '_| -_|  _|\n|_____|___|___|_,_|___|_|\n\n`)\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  })\n  return askQuestion(rl, query)\n}\n\nfunction askQuestion(rl: readline.Interface, query: string): void {\n  rl.question(query, (ans: string) => {\n    if (ans.toLowerCase() === 'y') {\n      // Lazily access constants.bashRcPath and constants.zshRcPath.\n      const { bashRcPath, zshRcPath } = constants\n      try {\n        if (existsSync(bashRcPath)) {\n          addSocketWrapper(bashRcPath)\n        }\n        if (existsSync(zshRcPath)) {\n          addSocketWrapper(zshRcPath)\n        }\n      } catch (e) {\n        throw new Error(`There was an issue setting up the alias: ${e}`)\n      }\n      rl.close()\n    } else if (ans.toLowerCase() !== 'n') {\n      askQuestion(\n        rl,\n        'Incorrect input: please enter either y (yes) or n (no): '\n      )\n    } else {\n      rl.close()\n    }\n  })\n}\n","import fs from 'node:fs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nexport function removeSocketWrapper(file: string): void {\n  return fs.readFile(file, 'utf8', function (err, data) {\n    if (err) {\n      logger.fail('There was an error removing the alias:')\n      logger.error(err)\n      return\n    }\n    const linesWithoutSocketAlias = data\n      .split('\\n')\n      .filter(\n        l => l !== 'alias npm=\"socket npm\"' && l !== 'alias npx=\"socket npx\"'\n      )\n\n    const updatedFileContent = linesWithoutSocketAlias.join('\\n')\n\n    fs.writeFile(file, updatedFileContent, function (err) {\n      if (err) {\n        logger.error(err)\n        return\n      }\n      // TODO: pretty sure you need to source the file or restart\n      //       any terminal session before changes are reflected.\n      logger.log(\n        `The alias was removed from ${file}. Running 'npm install' will now run the standard npm command.`\n      )\n    })\n  })\n}\n","import { existsSync } from 'node:fs'\n\nimport { stripIndents } from 'common-tags'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { addSocketWrapper } from './add-socket-wrapper'\nimport { checkSocketWrapperSetup } from './check-socket-wrapper-setup'\nimport { postinstallWrapper } from './postinstall-wrapper'\nimport { removeSocketWrapper } from './remove-socket-wrapper'\nimport constants from '../../constants'\nimport { commonFlags } from '../../flags'\nimport { meowOrExit } from '../../utils/meow-with-subcommands'\nimport { getFlagListOutput } from '../../utils/output-formatting'\n\nimport type { CliCommandConfig } from '../../utils/meow-with-subcommands'\n\nconst { DRY_RUN_BAIL_TEXT } = constants\n\nconst config: CliCommandConfig = {\n  commandName: 'wrapper',\n  description: 'Enable or disable the Socket npm/npx wrapper',\n  hidden: false,\n  flags: {\n    ...commonFlags,\n    enable: {\n      type: 'boolean',\n      default: false,\n      description: 'Enables the Socket npm/npx wrapper'\n    },\n    disable: {\n      type: 'boolean',\n      default: false,\n      description: 'Disables the Socket npm/npx wrapper'\n    }\n  },\n  help: (command, config) => `\n    Usage\n      $ ${command} <flag>\n\n    Options\n      ${getFlagListOutput(config.flags, 6)}\n\n    Examples\n      $ ${command} --enable\n      $ ${command} --disable\n  `\n}\n\nexport const cmdWrapper = {\n  description: config.description,\n  hidden: config.hidden,\n  run\n}\n\nasync function run(\n  argv: readonly string[],\n  importMeta: ImportMeta,\n  { parentName }: { parentName: string }\n): Promise<void> {\n  // I don't think meow would mess with this but ...\n  if (argv[0] === '--postinstall') {\n    postinstallWrapper()\n    return\n  }\n\n  const cli = meowOrExit({\n    argv,\n    config,\n    importMeta,\n    parentName\n  })\n\n  const { enable } = cli.flags\n  if (!enable && !cli.flags['disable']) {\n    // Use exit status of 2 to indicate incorrect usage, generally invalid\n    // options or missing arguments.\n    // https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\n    process.exitCode = 2\n    logger.fail(\n      stripIndents`\n      ${colors.bgRed(colors.white('Input error'))}: Please provide the required flags:\n\n      - Must use --enabled or --disabled\n    `\n    )\n    return\n  }\n\n  if (cli.flags['dryRun']) {\n    logger.log(DRY_RUN_BAIL_TEXT)\n    return\n  }\n\n  // Lazily access constants.bashRcPath and constants.zshRcPath.\n  const { bashRcPath, zshRcPath } = constants\n  if (enable) {\n    if (existsSync(bashRcPath) && !checkSocketWrapperSetup(bashRcPath)) {\n      addSocketWrapper(bashRcPath)\n    }\n    if (existsSync(zshRcPath) && !checkSocketWrapperSetup(zshRcPath)) {\n      addSocketWrapper(zshRcPath)\n    }\n  } else {\n    if (existsSync(bashRcPath)) {\n      removeSocketWrapper(bashRcPath)\n    }\n    if (existsSync(zshRcPath)) {\n      removeSocketWrapper(zshRcPath)\n    }\n  }\n  if (!existsSync(bashRcPath) && !existsSync(zshRcPath)) {\n    logger.fail('There was an issue setting up the alias in your bash profile')\n  }\n}\n","#!/usr/bin/env node\n\nimport process from 'node:process'\nimport { pathToFileURL } from 'node:url'\n\nimport { messageWithCauses, stackWithCauses } from 'pony-cause'\nimport updateNotifier from 'tiny-updater'\nimport colors from 'yoctocolors-cjs'\n\nimport { logger } from '@socketsecurity/registry/lib/logger'\n\nimport { cmdAnalytics } from './commands/analytics/cmd-analytics'\nimport { cmdAuditLog } from './commands/audit-log/cmd-audit-log'\nimport { cmdCdxgen } from './commands/cdxgen/cmd-cdxgen'\nimport { cmdScanCreate } from './commands/dependencies/cmd-dependencies'\nimport { cmdDiffScan } from './commands/diff-scan/cmd-diff-scan'\nimport { cmdFix } from './commands/fix/cmd-fix'\nimport { cmdInfo } from './commands/info/cmd-info'\nimport { cmdLogin } from './commands/login/cmd-login'\nimport { cmdLogout } from './commands/logout/cmd-logout'\nimport { cmdManifest } from './commands/manifest/cmd-manifest'\nimport { cmdNpm } from './commands/npm/cmd-npm'\nimport { cmdNpx } from './commands/npx/cmd-npx'\nimport { cmdOops } from './commands/oops/cmd-oops'\nimport { cmdOptimize } from './commands/optimize/cmd-optimize'\nimport { cmdOrganization } from './commands/organization/cmd-organization'\nimport { cmdPackage } from './commands/package/cmd-package'\nimport { cmdRawNpm } from './commands/raw-npm/cmd-raw-npm'\nimport { cmdRawNpx } from './commands/raw-npx/cmd-raw-npx'\nimport { cmdReport } from './commands/report/cmd-report'\nimport { cmdRepos } from './commands/repos/cmd-repos'\nimport { cmdScan } from './commands/scan/cmd-scan'\nimport { cmdThreatFeed } from './commands/threat-feed/cmd-threat-feed'\nimport { cmdWrapper } from './commands/wrapper/cmd-wrapper'\nimport constants from './constants'\nimport { AuthError, InputError, captureException } from './utils/errors'\nimport { meowWithSubcommands } from './utils/meow-with-subcommands'\n\nconst { SOCKET_CLI_BIN_NAME } = constants\n\n// TODO: Add autocompletion using https://socket.dev/npm/package/omelette\nvoid (async () => {\n  await updateNotifier({\n    name: SOCKET_CLI_BIN_NAME,\n    // The '@rollup/plugin-replace' will replace \"process.env['INLINED_SOCKET_CLI_VERSION']\".\n    version: process.env['INLINED_SOCKET_CLI_VERSION']!,\n    ttl: 86_400_000 /* 24 hours in milliseconds */\n  })\n\n  try {\n    await meowWithSubcommands(\n      {\n        cdxgen: cmdCdxgen,\n        fix: cmdFix,\n        info: cmdInfo,\n        login: cmdLogin,\n        logout: cmdLogout,\n        npm: cmdNpm,\n        npx: cmdNpx,\n        oops: cmdOops,\n        optimize: cmdOptimize,\n        organization: cmdOrganization,\n        package: cmdPackage,\n        'raw-npm': cmdRawNpm,\n        'raw-npx': cmdRawNpx,\n        report: cmdReport,\n        wrapper: cmdWrapper,\n        scan: cmdScan,\n        'audit-log': cmdAuditLog,\n        repos: cmdRepos,\n        dependencies: cmdScanCreate,\n        analytics: cmdAnalytics,\n        'diff-scan': cmdDiffScan,\n        'threat-feed': cmdThreatFeed,\n        manifest: cmdManifest\n      },\n      {\n        aliases: {\n          ci: {\n            description: 'Alias for \"report create --view --strict\"',\n            argv: ['report', 'create', '--view', '--strict']\n          }\n        },\n        argv: process.argv.slice(2),\n        name: SOCKET_CLI_BIN_NAME,\n        importMeta: { url: `${pathToFileURL(__filename)}` } as ImportMeta\n      }\n    )\n  } catch (e) {\n    process.exitCode = 1\n    let errorBody: string | undefined\n    let errorTitle: string\n    let errorMessage = ''\n    if (e instanceof AuthError) {\n      errorTitle = 'Authentication error'\n      errorMessage = e.message\n    } else if (e instanceof InputError) {\n      errorTitle = 'Invalid input'\n      errorMessage = e.message\n      errorBody = e.body\n    } else if (e instanceof Error) {\n      errorTitle = 'Unexpected error'\n      errorMessage = messageWithCauses(e)\n      errorBody = stackWithCauses(e)\n    } else {\n      errorTitle = 'Unexpected error with no details'\n    }\n    logger.fail(\n      `${colors.bgRed(colors.white(`${errorTitle}:`))} ${errorMessage}`\n    )\n    if (errorBody) {\n      logger.error(`\\n${errorBody}`)\n    }\n    await captureException(e)\n  }\n})()\n"],"names":["spinner","logger","process","cause","method","headers","handleUnsuccessfulApiResponse","mw2","lines","cols","body","time","rows","screen","label","barWidth","barSpacing","xOffset","maxHeight","barBgColor","data","formattedData","totalTopAlerts","sortedTopFiveAlerts","top_five_alert_types","formatted","style","line","text","baseline","xLabelPadding","xPadding","wholeNumbersOnly","legend","width","x","y","help","type","default","shortFlag","description","dryRun","json","markdown","all","strict","keyPrefix","padName","REDACTED","__proto__","commandOrAliasName","parentName","hidden","allowUnknownFlags","DRY_RUN_BAIL_TEXT","commandName","flags","file","repo","scope","run","filePath","perPage","outputJson","outputMarkdown","page","desc","org","logs","user_email","created_at","year","month","day","name","choices","pageSize","logType","YARN_LOCK","cleanupPackageLock","result","length","i","configuration","coerce","author","filter","only","profile","standard","lifecycle","alias","array","key","boolean","argv","offset","outputKind","columns","field","limit","orgSlug","fs","showHidden","depth","colors","maxArrayLength","after","before","get","NPM","path","consolidate","include","existing","unfixable","upgrade","editable","vulnerableVersionRange","version","stdio","content","pkgJson","arb2","critical","alerts","compact","fixable","components","remaining","SOCKET_IPC_HANDSHAKE","args","constants","env","spawnPromise","agentExecPath","PNPM","ignoreIncompatible","YARN_CLASSIC","nothrow","semver","cwd","onUnknown","agent","agentVersion","maintainedNodeVersions","engines","pkgAgentRange","pkgNodeRange","lockSrc","lockName","lockPath","features","npmBuggyOverrides","pkgRequirements","node","pkgSupports","cmdName","prod","acc","count","fallbackToUrl","severityCount","pkgVersion","Maintenance","Quality","Vulnerabilities","Object","outputPackageIssuesDetails","includeAllIssues","updateSetting","SOCKET_PUBLIC_API_TOKEN","apiBaseUrl","apiProxy","message","value","enforcedOrgs","applyLogout","attemptLogout","bin","gradleOpts","out","stdout","task","verbose","poms","sbtOpts","subArgs","meow","importMeta","auto","scala","gradle","kotlin","aliases","yolo","NPX","peerDependencies","overrides","workspacePatterns","pkgs","pkgid","names","editablePkgJson","isPlacingHigher","insertIndex","entries","updatePkgJsonField","pkgPath","state","added","addedInWorkspaces","updated","updatedInWorkspaces","warnedPnpmWorkspaceRequiresNpm","npmExecPath","overridesDataObjects","package","depAliasMap","thisSpec","depObj","newSpec","absolute","ignore","updateManifestByAgent","NPM_BUGGY_OVERRIDES_PATCHED_VERSION","pin","mw1","mw3","console","security","defaultSub","list","quota","policy","purl","packageData","set","License","purls","valid","shallowScore","shallow","pkg","DRY_RUN_LABEL","debugLog","basePath","formatReportDataOutput","view","create","visibility","repoName","repoDescription","homepage","defaultBranch","sort","per_page","direction","del","update","cwdIsKnown","slug","commitHash","committers","pullRequest","tmp","assert","updatedInput","branch","commit_message","make_default_branch","set_as_pending_head","commitMessage","pendingHead","readOnly","branchName","from","fromTime","untilTime","includeSecurityPolicy","needs","haves","updateProgress","haveScan","haveSecurityPolicy","ok","scan","securityPolicy","short","healthy","addAlert","options","reportLevel","url","manifest","ecomap","pkgmap","vermap","filemap","keys","scanId","Package","Policy","fold","includeLicensePolicy","score","metadata","report","stream","fg","selectedFg","selectedBg","interactive","height","border","columnWidth","columnSpacing","truncate","bottom","table","numeric","eco","zshRcPath","installSafeNpm","rl","askQuestion","enable","disable","postinstallWrapper","SOCKET_CLI_BIN_NAME","cdxgen","fix","info","login","logout","npm","npx","oops","optimize","organization","wrapper","repos","dependencies","analytics","ci","errorTitle","errorMessage","errorBody"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBO;AAIL;AACA;;;AAME;;AACQA;AAAQ;;AAGhB;AACF;AACAC;AAGAC;AACF;AAEO;AAIL;;;;AAIE;AAA2CC;AAAM;AACnD;AACA;AACF;AAEO;;AAEH;AACF;AACE;AACF;AAGF;AAEO;AACL;;AAEF;;AAEA;AACA;AACE;AAEA;AACF;AAEO;AACL;;AAEEC;AACAC;;AAEA;AACF;AACF;;AC1EO;AAKL;AACA;AAKA;AACEC;AACA;AACF;;AAIA;AACEL;AACA;AACF;;AAGF;;ACxBO;AAML;AACA;AAKA;AACEK;AACA;AACF;;AAIA;AACEL;AACA;AACF;;AAGF;;ACjCO;AAKL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEEM;AACF;;;AAIAC;AACA;;AAIA;AACAA;AAEA;AACF;AAEO;AAEL;AACA;AACAC;AAEA;;AAGA;AACE;AACE;AACA;;AAEF;AACF;;AAGA;;AAGA;;AAIA;AACEC;AACA;AACE;AACA;;AAEF;AACAA;AACF;AAEA;AACF;AAEO;AAEL;AACA;AACAD;AAEA;;;;;AAMA;;AAGA;;AAGA;;AAEA;;;AAIEC;;;AAGAA;AACF;AAEA;AACF;;ACjFuC;;AAkBvC;;AAeA;AACA;AAeO;;;;;AAKLC;AAOF;AACE;;AAEE;AAGF;AAEA;;;;;;AAMEA;AACF;AACF;AAEA;;;;;;AAMEA;AAQF;AACE;;AACQX;AAAQ;AAEhBA;AAEA;;;;;AAQA;;AAEA;;;AAIE;;AAGA;;;AAGIC;;;AAGAA;AACAA;AACF;AACF;AACEA;AACF;AACF;AACE;;;AAKE;;;AAGIA;;AAEAA;AACF;AACF;AACEA;AACF;AACF;;AAEA;AACF;AACF;AAEA;;;;;AAKI;AACAA;AAGA;AACF;AACF;AAEA;AAKE;AACF;;AAEA;;AAEA;AAqCA;;AAEA;AACA;;AAIA;;AAEA;AACA;AACA;AAEA;AACE;AACA;AAAgCW;AAASH;AAASI;AAAO;;;;;;;;;AA2DzD;AACEC;AACAC;AACAC;AACAC;AACAC;AACAC;AACF;AAEAN;;;;AAIEO;AACF;;AAIAP;AACF;AAEA;;;;AAOE;AACEQ;AACF;AAEA;AACE;;AAEE;AACA;AACEC;;AAEAA;AACF;AACF;AACF;AACA;AACE;AACED;AACF;AACF;AAEA;;AAIEE;AACF;;AAGE;AACAC;;AAEJ;AAEA;;;;AAOE;AACEH;AACF;AAEA;AACE;;AAEE;AACA;AACEC;AACF;AACEA;AACF;AACF;AACF;AAEA;AACE;AACA;;AAEE;AACEG;AACF;AACEA;AACF;AACF;AACF;AAEA;;AAIEF;AACF;;AAGE;AACAC;;AAEJ;AAEA;;AAEA;AAEA;AAOE;AACEE;AAASC;AAAcC;AAAcC;;AACrCC;AACAC;AACAd;AACAe;AACAC;AACEC;;AAEFpB;AACF;AAEAD;AAEA;AACEsB;AACAC;;AAGFT;AACF;;ACxbA;;AAMA;;AAGO;AACLU;AACEC;AACAC;AACAC;AACAC;;AAEFC;AACEJ;AACAC;AACAE;AACF;AACF;AAEO;AACLE;AACEL;AACAE;AACAD;AACAE;;AAEFG;AACEN;AACAE;AACAD;AACAE;AACF;AACF;AAEO;AACLI;AACEP;AACAC;AACAE;;AAEFK;AACER;AACAC;AACAE;AACF;AACF;;AC5CO;AAGHM;AAAkBC;AAAQ;AAE5B;;;;AAKeA;AAAQ;AAEzB;AAEO;AAGHD;AAAgBC;AAAa;;;AAI/B;AACE;AACA;;AASF;AACA;AACF;;ACxBA;;AAAuBC;AAAS;AAiDzB;;;;;;;;AAWL;AAAMC;;;AACN;;AAEA;AACEC;AACF;AACA;AACA;AACE;AACA;;AAIA;;AAEA;AACA;;AAEIC;AACF;AACF;AACF;AACA;AACE;AACA;;AAEF;;;;AAMF;AACA;;AAEA;AACA;AAEU;AAGS;AAAc;AAIvB;AAEsC;AAAS;;AACjCC;AAAO;;;AAGf;AACF;;;AAOd;AACA;;AAEA;AACA;AACA;;;AAIM;;;AAGF;AAEF;;AAEEpD;AACF;;AAEA;AACF;;AAEA;AACA;AACA;AACO;;AACc;;;;AAInBmD;AAOF;;;;AAME;;;;;;;AAOEE;;AAEF;AACA;;AAEA;AACA;AACF;AAEO;AACL;AACA;AA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CzHA;;;;;;;;;;;;AAYE2I;AACF;AAEO;AAIP;AASA;AACE;AACA;AAA+BC;;AACjC;AAEA;AAIE;;;AAGI;AACA;AACA;AACAC;AACE;;AAC6CC;AAAI;;AAGvD;AACF;;AAEA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AAMA;;;;AAMQ;;AAEF;;AAEJ;AAEA;AAEA;AAIA;AAIM;;AAEE;AACF;;AAEE;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACF;AACA;AACF;AAQN;AAuDO;AACLA;AACAC;AACa;;AACqCD;AAAI;;AAEtD;;AAMiCA;AAAI;AACrC;;AAKqCxB;;AAErC;AACA;AACA;AACA;AAIA;AACA;AACA;AACE;AACA;AACA;AACA;;;;AAII0B;AACF;AACF;AACF;AACA;AAMEA;AACF;;AAEEA;;AAEF;AACA;AACA;;AAGEC;AACF;AACA;AACED;AACF;AACA;;AACQE;AAAuB;AAC/B;;AAEA;;AAEA;AACA;AACA;;;AAGA;;AACUC;AAAQ;AAChB;AACA;AACA;AACEC;AACA;AACA;AACA;;;AAGA;AACF;AACA;AACEC;AACA;AACA;AACA;;;AAGA;AACF;AACA;AACA;AACE;AACA;;AAKE;;;;AAIA;AACF;AACF;AACAC;AAIF;AACEC;AACAC;AACF;AACA;AACA;;AAIA;;AAMA;;;;;;AAUEC;AAAYC;;;;;;;;AAOZ/B;;AAEAgC;AACEX;AACAY;;AAEFC;AACE;;AAKA;AACAD;AAGF;;AAEJ;AAOO;;AAKHE;;AAEAC;AACF;AACE7G;;;AAGF;;;AAGIjD;AAMF;AACF;;;;AAC4B0J;AAAgB;AAC5C;AACA;;AAEE1J;AAMA;AACF;AACA;AACE;AACAA;AAMA;AACF;AACA;AACEA;AAMA;AACF;AACA;AACEA;AAMA;AACF;;;AAQE;AACF;AACA;;;AAGE;AACF;;;AAGE;AACF;AACA;;AAEE;AACF;;AAEEA;AAMA;AACF;AACA;AAIEA;AAMF;AACA;AACF;;ACxdA;;AAAawI;AAAK;AAElB;AAEO;AACL;;AACQzI;AAAQ;;AAIhB;AAEA;AACE8J;AACA7J;AACF;;;AAGE;AACF;;AAGE;AAAU;AACR;AACA;AACF;AACA;AAAW;AACT;AACA;AACF;AACF;AACAD;AACF;;AC7BA;AAAQuD;AAAkB;AAE1B;AACEC;AACAf;AACAY;AACAI;;;AAGApB;AACF;AACA;;AAEA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;AAEA;AACEnD;AACA;AACF;;AAGF;;AC7CO;;;AAOL;;AACQD;AAAQ;AAEhBA;AAMA;AAIA;AAKAA;AAEA;AACE;AACF;AAEA;AACE;AACF;AAEA;;;;;;AAUF;;ACnCA;AAAQ+G;AAAI;AAEZ;;AAEI;;AAEA;AACF;AACA;AACF;AAEA;;;;AAUYzE;AAAK;AACb;AACE;AACA;;AAEA;AACE0H;AACElJ;AACAmJ;AACF;AACF;AACF;AACA;AACF;AACA;AACA;AACE;AAGIC;AAAoB;AAExB;AACEjK;AACF;;AAEA;AACF;AACF;AAEO;;;AACUkK;AAA2B;;;;AAKxCC;AAOF;;AAGEnK;AACA;AACF;;;AAGF;;AAEA;AACA;AACE;AACEA;AACF;AACA;AACE;AACAoK;AACAC;AACAC;;;AAGFtK;AACAuK;AAGAvK;AACA;;AAEIA;AACF;;AAIAwK;AACF;AACExK;AACF;;;AAKAA;;AAEEA;AACwEiK;;AAE1E;AACEjK;AACuFiK;;AAEzF;;;AAOA;AACEjK;AACF;AACF;;AC7HO;;;;;;AAML6C;AAQF;;AAOE;;AAEI6B;;;AAIAyF;AACF;;AAGE;;AAEF;AACF;AACF;;ACvCA;AAAQ7G;AAAkB;AAE1B;AACEC;AACAf;AACAY;AACAI;AACE;AACA;;;AAGFpB;AACF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;;;;;AAE6BN;;;;AAI3B;AACA;AACA;;AAEA7C;AACJ;AACA;AACI;AACF;AAEA;AACA;AAEA;AAGA;AACEA;AACA;AACF;AAEA;AACEuD;AACAkH;;;;;AAKF;AACF;;ACrFO;AAMLC;AACAA;AACAA;AACAA;AACF;;ACIA;AAAQC;AAAwB;AAEzB;AAILC;AACAC;AACA;AAEIC;;AAKJ;;AACQ/K;AAAQ;AAEhBA;AAEA;;;AAGE;AACA;;AAEA;;AAEAA;AACF;AACEA;AACA;AACF;;;;AAOE;;AAGF;AACE;AAEI+K;AAEAnG;AACED;AACAqG;AACAvI;;AAEJ;AAEEzC;AACF;AAEF;;AAEA;AACF;AACE;;AAGIuC;AACF;AAEEvC;AACF;AAEF;AACE;AACA;AACEiL;AACF;AACF;AACF;;AAIA;;;;AAIA;AACEhL;AACF;AACF;;AC3FA;AAAQsD;AAAkB;AAE1B;AACEC;AACAf;AACAY;AACAI;AACE;AACAoH;AACEvI;AACAG;;AAEFqI;AACExI;AACAG;AACF;;AAEFJ;AACF;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;AAEA;AACA;AAEA;AACEnD;AACA;AACF;AAEA;AACE;AAGF;AAEA;AACF;;AC3EO;AACL0K;AACAA;AACAA;AACAA;AACF;;ACHO;;AAEHO;AACAjL;AACF;AACEA;AACF;AACF;;ACFA;AAAQsD;AAAkB;AAE1B;AACEC;AACAf;AACAY;AACAI;;;AAGApB;AACF;AACA;;AAEA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;AAEA;AACEnD;AACA;AACF;AAEAkL;AACF;;AC3CO;AAOL;;AACQnL;AAAQ;AAEhB;AACA;AAEA;AACEC;AACAA;AACAA;;AAEF;AACEA;AACAA;AACAA;;AAEF;;AAGE;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;;AAEA;;;;AAQA;;AAIA;AACEA;AACAA;;AAEF;;;AAGEA;AACA;;AAEEA;AACAA;;AAEF;AACA;AACF;AACAA;AACAA;;AAIIA;AACA;AACF;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAQA;AACEA;AACAA;;AAEF;AACF;AACF;;AC5GA;AAAQsD;AAAkB;AAE1B;AACEC;AACAf;AAEAY;AACAI;AACE;AACA2H;AACE9I;AACAG;;AAEFqG;AACExG;AACAG;;AAEF4I;AACE/I;AACAC;AACAE;;AAGF6I;AACEhJ;AACAC;AACAE;;AAGF8I;AACEjJ;AACAG;;AAEF+I;AACElJ;AACAC;AACAE;;AAEFgJ;AACEnJ;AACAG;AACF;;AAEFJ;AACF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;;AAIA;AACEnD;;;;;AAKF;AAEA;;AAEA;AACA;AACA;AACA;AACE;AACA;AACA;;AAEAA;;AAEJ;;AAEA;AACI;AACF;AAEA;AACA;AACEmL;AACF;;AAEA;;AAGA;AACEE;AACF;AACA;AACEA;AACF;AAEA;;AAEErL;AACAA;AACAA;;AAEF;;AAGA;;AAKA;AAEA;AACEA;AACA;AACF;;AAGF;;ACvKO;AAOL;;AACQD;AAAQ;AAChB;AACA;AAEA;AACEC;AACAA;AACAA;AACA;;AAEF;AACEA;AACAA;AACAA;AACA;;AAEF;;;;AAKE;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACEA;AACAA;;AAEF;;;AAGEA;AACA;;AAEEA;AACAA;;AAEF;AACA;AACF;;;AAGEyL;AACA;AACF;AACA;;AAEEzL;AAGA;AACF;AACA;AACA;AACA;;AAEEA;;AAEAA;AACAA;AACF;;AAEEA;AAGAyL;AACAzL;AACA;AACF;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAyL;AACAzL;AACF;;;;;AAQA;AACEA;AACAA;;AAEF;AACF;AACF;;AC1GA;AAAQsD;AAAkB;AAE1B;AACEC;AACAf;AAEAY;AACAI;AACE;AACA2H;AACE9I;AACAC;AACAE;;AAEFqG;AACExG;AACAG;;AAEF6I;AACEhJ;AACAC;AACAE;;AAGF8I;AACEjJ;AACAG;;AAEFkJ;AACErJ;AACAC;AACAE;;AAEFgJ;AACEnJ;AACAG;AACF;;AAEFJ;AACF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;;AAIA;AACEnD;;;;;AAKF;AAEA;;AAEA;AACA;AACA;AACA;AACE;AACA;AACA;;AAEAA;;AAGJ;;AAEA;AAEI;AACF;;AAGA;AACEmL;AACF;;AAGA;AACEE;AACF;AACA;AACEA;AACF;AAEA;;AAEErL;AACAA;AACAA;;AAEF;;AAGA;;AAKA;AAEA;AACEA;AACA;AACF;;AAGF;;AC7JA;AAAQsD;AAAkB;AAE1B;AACEC;AACAf;AACAY;AACAI;AACE;AACAqF;AACExG;AACAG;;AAEFgJ;AACEnJ;AACAC;AACAE;AACF;AACA;;AAEFJ;AACF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;;AAEA;AAEA;AACEnD;;;;AAIAA;;AAEF;;AAGA;AACE2L;AACF;;;AAKE3L;AACA;AACE2L;AACF;AACAA;AACA;AACE3L;AACA;AACF;AACA;AAAkDmD;AAAW;AAC7D;AACF;;AAGEnD;AACA;AACE;AACA2L;AACF;AACA;AACE3L;AACA;AACF;AACA;AAAmDmD;AAAW;AAC9D;AACF;AAEA;AACEnD;AACA;AACF;;AAEA;AACA4L;AAEF;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEM7F;;AAEA8F;AACF;AAEJ;;AC3HA;AAAQvI;AAAkB;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACEC;AACAf;AAEAY;AACAI;AACE;AACA2H;AACE9I;AACAG;;AAEFqG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ACAyC;AAEIzC;;;;AAKR;AAEA;;AAKI;AACE;AACA;AACA;AAEIA;AACF;AACa;;AAGnB;AACF;AAEA;;AAKI;AACA;AACA;AACA;;AAEmDA;AAAI;;AAGzD;AACF;AAEO;;ACnIP;;;;;;;;AAQEH;AACF;AAEA;AASA;AAIE;AAIF;AAEA;;AAKA;AAEA;AAIE;AACF;AAEA;;AAKUjB;AAAiB;AACzB;AACA;AACE;;AAEE;AACA;;AAEI;AACE;AACA6E;;;AAGA;AACF;AACF;AACF;AACE;AACAK;AAGQ;AACE;AACAL;AACF;AACF;AACE;AAAmB;AAE7B;;AAEA;;;AAGA;AACF;;AAC2B;AAAe;AAC1C;AACA;AACF;AACA;AAIE;AACF;AACA;AACA;AACA;AACA;;;;;AAKE;AACEM;;AAEF;AACF;AACEA;AACAC;AACF;;AAEE;AACED;AACAC;AACF;AACF;AACA;;AAEA;AACA;AACED;AACAC;AACF;AACA;;;AAGEA;AACF;AACAC;AAEqB;;;AAKvB;AAEA;AAIEC;AACF;AAEA;AAIEA;AACF;AAEA;AAIEA;AACF;AAEO;;AC3HP;;;AAAmBrE;AAAa;AAEhC;AAEA;AAEO;;;;;;;AAWHsE;AACF;;;;;;AAMEC;AACEC;AACAC;AACAC;AACAC;AACAC;AACF;AACF;AAAMrK;;;;AACAyE;AAAyB;;AAE7BiF;AAAmDtF;AAAe;AACpE;;AACQI;AAAiB;;;AAIzB;AACA;AACA;AACA;AAGE;AACA8F;;AAIAvN;AAMF;;AAGA;AACEwN;AACF;;AAKA;AAEAzN;AAIA;AACA;AAEA;AAAuD;;AAEnD;AACA;AACA6I;;AAKJ;AACA;AAAyC;AAAQ;;AACvClE;AAAsB+I;AAAsBlG;AAAQ;AAC5D;AACA;AACA;AACA;AAAa;;AACX;AAGA;AACEmG;AACF;AACA;AAGA;;AAEE;AACA;AACA;AACA;AACE;AACA;AAEE;AACA;AACA9E;AAGF+E;AACAC;AACAX;AACA;AACEA;AACF;AACF;AACAS;AACF;AACF;AACA;AACE;AACA;AACA;AACA;AACA;AAKA;AAE0DH;AAAY;AACtE;AACA;;AAAyDlL;AAAK;AAC5D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AGFpB;AACF;AACA;;AAEA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;;;;AAKE;AACA;AACA;;;AAGJ;;AAEA;AACA;AACI;AACF;AAEA;AACEnD;AACA;AACF;;AAGF;;AChEA;AAEO;;AAEL;AACA;AACA;AACA;AACAoD;AACA;AAA8BD;AAAW;AACvC;AAEIqL;AACAC;AACAC;AACF;;;AAIEH;AAAoB;;;AAGtB;AAEJ;AACF;;ACrBO;AAGLvO;;AAIA;;AACQD;AAAQ;AAEhBA;;;AAQQ8H;AACA;AACA;AACA;AACA;AACF;AACEG;AAAiC2G;AAAK;;AAK9C5O;;AAGE;AACF;AACAM;AACF;;ACvCO;;AAMH;AACA;AACAL;AACA;AACF;;AAEA;;AAEA;AACA4O;;AAEEC;AACF;AACA;;;AAIE;AACF;;;AAIF;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACI;AACF;AAEA7O;AACAA;;;AASA;AAEA4O;AACE5O;;AAEF;AACAA;AACF;AAEA;AAIE;AACE;AACAoK;AACAC;AACAC;AACAwE;;;AAGF;AAEA;AAUF;AAEA;AACE;AAEA;AAIF;AAEA;AAIE;;AAEA;;;;;AAWE;AACA;AACA;AAEA;;AAaA;AAEA;AAsBF;AACF;;AC7JO;;AAELC;AAIF;AACE;AACA;;AAMA;AACF;;ACpBA;AACA;AACA;AACA;AACO;;;;AAOHC;;AAEA;AACE;;AAEEA;AACA;;AAEA;AACAD;;AAEA;AACAA;AACF;;AAEA;AACF;AACA;AACEC;AACF;AACF;AACE;AACAxC;AAEA;AACE;AACA;AACE;AACAwC;AACA;;AAEAD;AACF;AACEA;AACF;AACF;AAEA;AACEC;AACF;AACF;;;AAEgBA;;AAClB;;ACzCA;AAAQ1L;AAAkB;AAE1B;AACEC;AACAf;AAEAY;AACAI;AACE;;;AAGFpB;AACF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO;;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;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAGE;AACA+R;;;;AAIIzP;AACAkF;AACF;AAEAM;AAMI;;AAEA;AACE;AAAc;AACZoK;;AAEEC;AAUF;AACA;AACF;AACA;AAAa;AACX;AACEA;AAUF;AACA;AACF;AACA;AAAgB;;AAEZA;AAUF;AACA;AACF;AAEA;AAAe;AACb;AAMEA;AAUF;AACA;AACF;AAEA;AAAc;AACZ;AACA;AACEA;AAUF;AACA;AACF;AAKF;AACF;AAEJ;AACF;AAEAnS;;AAGMkS;AAAQ;;;;AAKRE;;AAAiBC;;AACjBvK;;AAGN;AACF;AAEA;AAKE;;AAEE6G;AACA2D;AACAC;;AAEF;AACF;AAEA;AAUE;AACA;;AAEE;;AAEEC;AACF;AACF;AACE;AACA;;AAEE;;AAEEC;AACF;AACF;AACE;AACA;AACA;;AAGE;;AAEEC;AACF;AACF;AACE;AACA;AACA;AACA;;AAEEC;AACF;AACF;AACF;AACF;AACF;AAEA;AAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;;AC5RA;AACA;AACA;AACA;AACO;AAGL;AAMF;;ACfO;AAIL;;;AAGE;;AACUC;AAAwB5H;;AAClC;AACF;AACF;;ACDO;;;;;;;;;AASLiH;AAWF;AACEhS;AAUA;AACE;AACF;;AAGE;;;AAGA+R;AACF;AAGE;AACAR;;AAIA;AACF;AAEA;AAEa;AACXQ;;AAGEa;;;AAGAR;AACF;AAGF;;AAEA;AAEA;AAIE;AAIA;AACEpS;;AAEF;AAEAA;AACA;AACF;AAEA;AACE;AAIA;AACEA;;AAEF;AAEAA;AACA;AACF;AAEA;;AAEA;AACEA;AAAyBwG;AAAY;AACvC;AACF;AAEO;AACL;AAEA;AAEI;AACAqB;AACF;AAKF;AACF;AAEO;AACL;;AACWkD;AAAiD;;;;;AACxBsH;AAAI;;AAElC;AACAQ;AACA;;AAEA;AACAC;;AAEJ;AAGF;AAEF;;AAEA;AACA;;AAEA;;AAEA;;AAKA;;AAEA;;AAEA;AAEA;AACA;AACA;;AAEA;;AAEA;;AAKA;AAYA;AAGE;AACF;;ACnLA;AAAQxP;AAAkB;AAE1B;AACEC;AACAf;AAEAY;AAAc;AACdI;AACE;AACA;AACAuP;AACE1Q;AACAC;AACAE;;AAEF4P;AACE/P;AACAC;AACAE;;AAEFwP;AACE3P;AACAC;AACAE;;AAEF;AACA;AACA;AACA;AACA;AACA8L;AACEjM;AACAC;AACAE;AACF;;AAEFJ;AACF;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;;AAGE4P;;AAEA;;AAEAX;AACA9D;;AAGF;AAEA;AAGE;;AAGA;AACA;AACA;;;AAIJ;;AAEA;;AAEA;;AAEA;AACA;AACM;;AAEF;AACF;AAEA;AACEtO;AACA;AACF;AAEA;;;AAGEgT;AAA6B;;;AAG7BnP;AACAkP;;AAEAX;AAMF;AACF;;ACpJO;AAKL;;AACQrS;AAAQ;AAEhB;;AAEE;AAGF;AAEAA;AAEA;;AAUA;AACEM;AACA;AACF;;AAMA;AACF;;ACnCO;;;AASL;AACE;;;;;;AAQE4S;;AAEJ;AAEA;AAQA;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AAEE;;;AAGIjT;;;AAGAA;AACAA;AACF;AACF;AACEA;AACF;AACF;;AC/CA;AAAQsD;AAAkB;AAE1B;AACEC;AACAf;AACAY;AACAI;AACE;;;AAGFpB;AACF;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;AAEA;AAEA;AACE;AACA;AACA;;;AAIJ;;AAEA;;AAEA;AACA;AAEI;AACF;AAEA;AACEnD;AACA;AACF;AAEA;AACE;AACF;AACE;AACF;AACF;;AC9EA;AAEO;;AAEL;AAA8BmD;AAAW;AACvC;AAEIsM;AACAjB;AACA0B;AACAgD;AACAC;AACA3D;AACF;AAEEtD;AACE;AACAkH;;AAEEhQ;AACA2C;AACF;;;;;;AAMJ;AAEJ;AACF;;ACxBuC;;AAahC;;;;;;AAMLjC;AAQF;AACE;;AAEE;AAGF;AAEA;;;;;;;AAOEA;AACF;AACF;AAEA;;;;;;;AAOEA;AASF;AACE;;AACQ/D;AAAQ;AAEhB;AAQAA;;AAGA;AAKAA;;AAGEC;AACA;AACF;AAEA;AAEA;AACE2S;AACAU;AACAC;AACAC;AACAC;AACA3S;AACAoB;AACAwR;AAAe;AACfC;AACErR;AACAgR;;AAEFM;AACA;AACA;AACAC;AACAC;AACF;;AAEA;AACA;AACEC;AACAL;AACAxR;AACAyR;AACErR;AACAgR;;AAEFxS;AACA4G;AAEAhG;AACE4R;AACF;AACF;;AAEA;;AAGAzS;AACAA;AAEA;AACA;;AAGER;AAQAe;AACF;;AAEA;AACA4S;AACE;AACA;AACE;AACA;AACE;;;AAWF;AACF;AACF;;AAIAnT;AACAA;AACE;;AAEA;AACAyN;AACF;AACF;AAEA;AACE;;;AAGE;AAEA;;AAEA;;AASF;AACF;AAEA;AACE;AACA;;AAGE2F;AACAvS;AACF;AAEA;AACA;AACE;AACA;;;AAGA;AACF;;AAEE;AACF;AACE;AACF;AACF;;ACrOA;AAAQ6B;AAAkB;AAE1B;AACEC;AACAf;AACAY;AACAI;AACE;AACA;AACAM;AACEzB;AACAE;AACAD;AACAE;;AAEFyB;AACE5B;AACAE;AACAD;AACAE;;AAEFyN;AACE5N;AACAE;AACAD;AACAE;;AAEFyR;AACE5R;AACAE;AACAD;AACAE;;AAEF8C;AACEjD;AACAE;AACAD;AACAE;AACF;;AAEFJ;AACF;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;;;;;AAMnCA;AACF;AAEA;AACEnD;AACA;AACF;AAEA;;;;AAIEiG;;;AAOF;AACF;;ACtHO;;AAKD;AACE;AACF;AACA;AACA;;AAGN;AACA;AACA;AAEI;AAEJ;;ACpBO;;;;AASHjG;AAGA;AACF;AACA;AACF;;ACTO;AACL;;;AACoBkU;AAAU;;;AAM5BC;;AAEJ;;AAEA;AACE;AACF;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AAEE;;;AAGA;AACA;AACF;AAEA;AACEC;AACE;AACE;;;AACoBF;AAAU;;AAE5B;;AAEA;AACA;;AAEA;;AAEA;AACF;;;AAGAG;AAIF;;AAEA;AACF;AACF;;AC/DO;AACL;AACE;AACErU;AACAA;AACA;AACF;;AAOA;;AAGE;AACEA;AACA;AACF;AACA;AACA;AACAA;AAGF;AACF;AACF;;ACbA;AAAQsD;AAAkB;AAE1B;AACEC;AACAf;AACAY;AACAI;AACE;AACA8Q;AACEjS;AACAC;AACAE;;AAEF+R;AACElS;AACAC;AACAE;AACF;;AAEFJ;AACF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEO;;;AAGLwB;AACF;AAEA;AAGIT;AAAmC;AAErC;AACA;AACEqR;AACA;AACF;;;;;AAMErR;AACF;;AAEQmR;;;AAEN;AACA;AACA;;;AAIJ;;AAEA;AACA;AAEI;AACF;AAEA;AACEtU;AACA;AACF;;AAEA;;;AACoBkU;AAAU;AAC9B;;;AAGE;;;AAGA;AACF;AACE;;AAEA;AACA;;AAEA;AACF;;AAEElU;AACF;AACF;;AC7EA;AAAQyU;AAAoB;;AAE5B;AACA;AACE;AACE/P;AACA;AACA6C;;AAEF;;AAGE;AAEImN;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACA1H;AACA;AACA;AACA0F;AACAiC;AACAtD;AACA;AACAuD;AACAC;AACAC;AACA;AACA;AACAjD;AACF;AAEEpG;AACEsJ;AACEhT;;AAEF;;;AAGFkC;AACAmH;AAAcwG;AAAoC;AACpD;;;AAIF;AACA;;;AAGEoD;;AAEF;AACEA;;;AAGF;AACEA;AACAC;AACAC;AACF;AACEF;AACF;;AAIA;AACEzV;AACF;;AAEF;AACF","debugId":"a3546933-7fe3-404c-ac5f-dae11e0b6833"}