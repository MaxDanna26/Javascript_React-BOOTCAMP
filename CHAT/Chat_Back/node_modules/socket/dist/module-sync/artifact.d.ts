import { Remap } from '@socketsecurity/registry/lib/objects';
import { components } from '@socketsecurity/sdk/types/api';
type ArtifactAlertCve = Remap<Omit<CompactSocketArtifactAlert, 'type'> & {
    type: CveAlertType;
}>;
type ArtifactAlertCveFixable = Remap<Omit<CompactSocketArtifactAlert, 'props' | 'type'> & {
    type: CveAlertType;
    props: {
        firstPatchedVersionIdentifier: string;
        vulnerableVersionRange: string;
        [key: string]: any;
    };
}>;
type ArtifactAlertUpgrade = Remap<Omit<CompactSocketArtifactAlert, 'type'> & {
    type: 'socketUpgradeAvailable';
}>;
type CveAlertType = 'cve' | 'mediumCVE' | 'mildCVE' | 'criticalCVE';
type CompactSocketArtifactAlert = Remap<Omit<SocketArtifactAlert, 'action' | 'actionPolicyIndex' | 'category' | 'end' | 'file' | 'start'>>;
type CompactSocketArtifact = Remap<Omit<SocketArtifact, 'alerts' | 'batchIndex' | 'size'> & {
    alerts: CompactSocketArtifactAlert[];
}>;
type SocketArtifact = components['schemas']['SocketArtifact'];
type SocketArtifactAlert = Remap<Omit<components['schemas']['SocketAlert'], 'props'> & {
    props?: any | undefined;
}>;
declare function isArtifactAlertCve(alert: CompactSocketArtifactAlert): alert is ArtifactAlertCve;
export { ArtifactAlertCve, ArtifactAlertCveFixable, ArtifactAlertUpgrade, CveAlertType, CompactSocketArtifactAlert, CompactSocketArtifact, SocketArtifact, SocketArtifactAlert, isArtifactAlertCve };
